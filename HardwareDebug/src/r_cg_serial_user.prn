RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Thu Nov 25 15:02:58 2021
00000000                       19  
00000000                       20  	.EXTERN _gp_uart1_tx_address
00000000                       21  	.EXTERN _g_uart1_tx_count
00000000                       22  	.EXTERN _gp_uart1_rx_address
00000000                       23  	.EXTERN _g_uart1_rx_count
00000000                       24  	.EXTERN _g_uart1_rx_length
00000000                       25  	.EXTERN _gp_csi00_tx_address
00000000                       26  	.EXTERN _g_csi00_tx_count
00000000                       27  	.EXTERN _gp_csi01_rx_address
00000000                       28  	.EXTERN _gp_csi01_tx_address
00000000                       29  	.EXTERN _g_csi01_tx_count
00000000                       30  	.EXTERN _gp_uart2_tx_address
00000000                       31  	.EXTERN _g_uart2_tx_count
00000000                       32  	.EXTERN _gp_uart2_rx_address
00000000                       33  	.EXTERN _g_uart2_rx_count
00000000                       34  	.EXTERN _g_uart2_rx_length
00000000                       35  	.EXTERN _gp_uart3_tx_address
00000000                       36  	.EXTERN _g_uart3_tx_count
00000000                       37  	.EXTERN _gp_uart3_rx_address
00000000                       38  	.EXTERN _g_uart3_rx_count
00000000                       39  	.EXTERN _g_uart3_rx_length
00000000                       40  	.PUBLIC _g_csi_count
00000000                       41  	.PUBLIC _g_csi_err
00000000                       42  	.PUBLIC _g_csi_send_end
00000000                       43  	.PUBLIC _g_csi_rev_end
00000000                       44  	.PUBLIC _g_uart1_end
00000000                       45  	.PUBLIC _g_uart2_send
00000000                       46  	.PUBLIC _g_uart2_receive
00000000                       47  	.PUBLIC _g_rx_data
00000000                       48  	.PUBLIC _g_uart2_fault
00000000                       49  	.EXTERN _R_CSI01_Stop
00000000                       50  	.EXTERN _R_UART2_Receive
00000000                       51  
00000000                       52  	.SECTION .text,TEXT
00000000                       53  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                       54  _r_uart1_interrupt_receive@1:
00000000                       55  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                       56  	;***        1 : /***********************************************************************************************************************
00000000                       57  	;***        2 : * DISCLAIMER
00000000                       58  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       59  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       60  	;***        5 : * applicable laws, including copyright laws. 
00000000                       61  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       62  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       63  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       64  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       65  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       66  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       67  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       68  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       69  	;***       14 : * following link:
00000000                       70  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       71  	;***       16 : *
00000000                       72  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       73  	;***       18 : ***********************************************************************************************************************/
00000000                       74  	;***       19 : 
00000000                       75  	;***       20 : /***********************************************************************************************************************
00000000                       76  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       77  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       78  	;***       23 : * Device(s)    : R5F104ML
00000000                       79  	;***       24 : * Tool-Chain   : CCRL
00000000                       80  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       81  	;***       26 : * Creation Date: 24/11/2021
00000000                       82  	;***       27 : ***********************************************************************************************************************/
00000000                       83  	;***       28 : 
00000000                       84  	;***       29 : /***********************************************************************************************************************
00000000                       85  	;***       30 : Includes
00000000                       86  	;***       31 : ***********************************************************************************************************************/
00000000                       87  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       88  	;***       33 : #include "r_cg_serial.h"
00000000                       89  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                       90  	;***       35 : /* End user code. Do not edit comment generated here */
00000000                       91  	;***       36 : #include "r_cg_userdefine.h"
00000000                       92  	;***       37 : 
00000000                       93  	;***       38 : /***********************************************************************************************************************
00000000                       94  	;***       39 : Pragma directive
00000000                       95  	;***       40 : ***********************************************************************************************************************/
00000000                       96  	;***       41 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                       97  	;***       42 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                       98  	;***       43 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                       99  	;***       44 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      100  	;***       45 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      101  	;***       46 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      102  	;***       47 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      103  	;***       48 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      104  	;***       49 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      105  	;***       50 : /* End user code. Do not edit comment generated here */
00000000                      106  	;***       51 : 
00000000                      107  	;***       52 : /***********************************************************************************************************************
00000000                      108  	;***       53 : Global variables and functions
00000000                      109  	;***       54 : ***********************************************************************************************************************/
00000000                      110  	;***       55 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      111  	;***       56 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      112  	;***       57 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      113  	;***       58 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      114  	;***       59 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      115  	;***       60 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      116  	;***       61 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      117  	;***       62 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      118  	;***       63 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      119  	;***       64 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      120  	;***       65 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      121  	;***       66 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      122  	;***       67 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      123  	;***       68 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      124  	;***       69 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      125  	;***       70 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      126  	;***       71 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      127  	;***       72 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      128  	;***       73 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      129  	;***       74 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      130  	;***       75 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      131  	;***       76 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      132  	;***       77 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      133  	;***       78 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      134  	;***       79 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      135  	;***       80 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      136  	;***       81 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      137  	;***       82 : /* Start user code for global. Do not edit comment generated here */
00000000                      138  	;***       83 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_end, g_uart2_send, g_uart2_receive;
00000000                      139  	;***       84 : uint8_t g_rx_data[32];
00000000                      140  	;***       85 : volatile uint8_t g_uart2_fault;
00000000                      141  	;***       86 : /* End user code. Do not edit comment generated here */
00000000                      142  	;***       87 : 
00000000                      143  	;***       88 : /***********************************************************************************************************************
00000000                      144  	;***       89 : * Function Name: r_uart1_interrupt_receive
00000000                      145  	;***       90 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      146  	;***       91 : * Arguments    : None
00000000                      147  	;***       92 : * Return Value : None
00000000                      148  	;***       93 : ***********************************************************************************************************************/
00000000                      149  	;***       94 : static void __near r_uart1_interrupt_receive(void)
00000000                      150  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 94
00000000 C1                   151  	push ax
00000001 C3                   152  	push bc
00000002 C5                   153  	push de
00000003 C7                   154  	push hl
00000004 8EFD                 155  	mov a, es
00000006 70                   156  	mov x, a
00000007 8EFC                 157  	mov a, cs
00000009 C1                   158  	push ax
0000000A C7                   159  	push hl
0000000B                      160  	;***       95 : {
0000000B                      161  	;***       96 :     volatile uint8_t rx_data;
0000000B                      162  	;***       97 :     volatile uint8_t err_type;
0000000B                      163  	;***       98 :     
0000000B                      164  	;***       99 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      165  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 99
0000000B AF0601               166  	movw ax, !0x0106
0000000E 60                   167  	mov a, x
0000000F 5C07                 168  	and a, #0x07
00000011 9800                 169  	mov [sp+0x00], a
00000013                      170  	;***      100 :     SIR03 = (uint16_t)err_type;
00000013                      171  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 100
00000013 8800                 172  	mov a, [sp+0x00]
00000015 318E                 173  	shrw ax, 8+0x00000
00000017 BF0E01               174  	movw !0x010E, ax
0000001A                      175  	;***      101 : 
0000001A                      176  	;***      102 :     if (err_type != 0U)
0000001A                      177  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 102
0000001A 8800                 178  	mov a, [sp+0x00]
0000001C D1                   179  	cmp0 a
0000001D DD00                 180  	bz $.BB@LABEL@1_2
0000001F                      181  .BB@LABEL@1_1:	; if_then_bb
0000001F                      182  	;***      103 :     {
0000001F                      183  	;***      104 :         r_uart1_callback_error(err_type);
0000001F                      184  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 104
0000001F 8800                 185  	mov a, [sp+0x00]
00000021 FC000000             186  	call !!_r_uart1_callback_error@1
00000025                      187  .BB@LABEL@1_2:	; if_break_bb
00000025                      188  	;***      105 :     }
00000025                      189  	;***      106 :     
00000025                      190  	;***      107 :     rx_data = RXD1;
00000025                      191  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 107
00000025 8E46                 192  	mov a, 0xFFF46
00000027 9801                 193  	mov [sp+0x01], a
00000029                      194  	;***      108 : 
00000029                      195  	;***      109 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      196  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 109
00000029 AF0000               197  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               198  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 199  	mov a, [sp+0x01]
00000031 61D300               200  	bnh $.BB@LABEL@1_6
00000034                      201  .BB@LABEL@1_3:	; if_then_bb18
00000034                      202  	;***      110 :     {
00000034                      203  	;***      111 :         *gp_uart1_rx_address = rx_data;
00000034                      204  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 111
00000034 EB0000               205  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   206  	mov [de], a
00000038                      207  	;***      112 :         gp_uart1_rx_address++;
00000038                      208  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 112
00000038 A20000               209  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      210  	;***      113 :         g_uart1_rx_count++;
0000003B                      211  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 113
0000003B A20000               212  	incw !LOWW(_g_uart1_rx_count)
0000003E                      213  	;***      114 : 
0000003E                      214  	;***      115 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      215  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 115
0000003E AF0000               216  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               217  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 218  	sknz
00000046                      219  .BB@LABEL@1_4:	; if_then_bb30
00000046                      220  	;***      116 :         {
00000046                      221  	;***      117 :             r_uart1_callback_receiveend();
00000046                      222  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 117
00000046 FC000000             223  	call !!_r_uart1_callback_receiveend@1
0000004A                      224  .BB@LABEL@1_5:	; return
0000004A C6                   225  	pop hl
0000004B C0                   226  	pop ax
0000004C 9EFC                 227  	mov cs, a
0000004E 60                   228  	mov a, x
0000004F 9EFD                 229  	mov es, a
00000051 C6                   230  	pop hl
00000052 C4                   231  	pop de
00000053 C2                   232  	pop bc
00000054 C0                   233  	pop ax
00000055                      234  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 124
00000055 61FC                 235  	reti
00000057                      236  .BB@LABEL@1_6:	; if_else_bb
00000057                      237  	;***      118 :         }
00000057                      238  	;***      119 :     }
00000057                      239  	;***      120 :     else
00000057                      240  	;***      121 :     {
00000057                      241  	;***      122 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      242  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 122
00000057 318E                 243  	shrw ax, 8+0x00000
00000059 FC000000             244  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 245  	br $.BB@LABEL@1_5
0000005F                      246  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      247  _r_uart1_interrupt_send@1:
0000005F                      248  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      249  	;***      123 :     }
0000005F                      250  	;***      124 : }
0000005F                      251  	;***      125 : 
0000005F                      252  	;***      126 : /***********************************************************************************************************************
0000005F                      253  	;***      127 : * Function Name: r_uart1_interrupt_send
0000005F                      254  	;***      128 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      255  	;***      129 : * Arguments    : None
0000005F                      256  	;***      130 : * Return Value : None
0000005F                      257  	;***      131 : ***********************************************************************************************************************/
0000005F                      258  	;***      132 : static void __near r_uart1_interrupt_send(void)
0000005F                      259  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 132
0000005F C1                   260  	push ax
00000060 C3                   261  	push bc
00000061 C5                   262  	push de
00000062 C7                   263  	push hl
00000063 8EFD                 264  	mov a, es
00000065 70                   265  	mov x, a
00000066 8EFC                 266  	mov a, cs
00000068 C1                   267  	push ax
00000069                      268  	;***      133 : {
00000069                      269  	;***      134 :     if (g_uart1_tx_count > 0U)
00000069                      270  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 134
00000069 AF0000               271  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   272  	clrw bc
0000006D 43                   273  	cmpw ax, bc
0000006E DF00                 274  	bnz $.BB@LABEL@2_3
00000070                      275  .BB@LABEL@2_1:	; if_else_bb
00000070                      276  	;***      135 :     {
00000070                      277  	;***      136 :         TXD1 = *gp_uart1_tx_address;
00000070                      278  	;***      137 :         gp_uart1_tx_address++;
00000070                      279  	;***      138 :         g_uart1_tx_count--;
00000070                      280  	;***      139 :     }
00000070                      281  	;***      140 :     else
00000070                      282  	;***      141 :     {
00000070                      283  	;***      142 :         r_uart1_callback_sendend();
00000070                      284  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
00000070 FC000000             285  	call !!_r_uart1_callback_sendend@1
00000074                      286  .BB@LABEL@2_2:	; if_else_bb
00000074 C0                   287  	pop ax
00000075 9EFC                 288  	mov cs, a
00000077 60                   289  	mov a, x
00000078 9EFD                 290  	mov es, a
0000007A C6                   291  	pop hl
0000007B C4                   292  	pop de
0000007C C2                   293  	pop bc
0000007D C0                   294  	pop ax
0000007E                      295  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
0000007E 61FC                 296  	reti
00000080                      297  .BB@LABEL@2_3:	; if_then_bb
00000080                      298  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 136
00000080 EB0000               299  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   300  	mov a, [de]
00000084 9E44                 301  	mov 0xFFF44, a
00000086                      302  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 137
00000086 A5                   303  	incw de
00000087 15                   304  	movw ax, de
00000088 BF0000               305  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      306  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
0000008B B20000               307  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 308  	br $.BB@LABEL@2_2
00000000                      309  	.SECTION .textf,TEXTF
00000000                      310  _r_uart1_callback_receiveend@1:
00000000                      311  	.STACK _r_uart1_callback_receiveend@1 = 4
00000000                      312  	;***      143 :     }
00000000                      313  	;***      144 : }
00000000                      314  	;***      145 : 
00000000                      315  	;***      146 : /***********************************************************************************************************************
00000000                      316  	;***      147 : * Function Name: r_uart1_callback_receiveend
00000000                      317  	;***      148 : * Description  : This function is a callback function when UART1 finishes reception.
00000000                      318  	;***      149 : * Arguments    : None
00000000                      319  	;***      150 : * Return Value : None
00000000                      320  	;***      151 : ***********************************************************************************************************************/
00000000                      321  	;***      152 : static void r_uart1_callback_receiveend(void)
00000000                      322  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 152
00000000 D7                   323  	ret
00000001                      324  _r_uart1_callback_softwareoverrun@1:
00000001                      325  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000001                      326  	;***      153 : {
00000001                      327  	;***      154 :     /* Start user code. Do not edit comment generated here */
00000001                      328  	;***      155 :     /* End user code. Do not edit comment generated here */
00000001                      329  	;***      156 : }
00000001                      330  	;***      157 : 
00000001                      331  	;***      158 : /***********************************************************************************************************************
00000001                      332  	;***      159 : * Function Name: r_uart1_callback_softwareoverrun
00000001                      333  	;***      160 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000001                      334  	;***      161 : * Arguments    : rx_data -
00000001                      335  	;***      162 : *                    receive data
00000001                      336  	;***      163 : * Return Value : None
00000001                      337  	;***      164 : ***********************************************************************************************************************/
00000001                      338  	;***      165 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000001                      339  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000001 D7                   340  	ret
00000002                      341  _r_uart1_callback_sendend@1:
00000002                      342  	.STACK _r_uart1_callback_sendend@1 = 4
00000002                      343  	;***      166 : {
00000002                      344  	;***      167 :     /* Start user code. Do not edit comment generated here */
00000002                      345  	;***      168 :     /* End user code. Do not edit comment generated here */
00000002                      346  	;***      169 : }
00000002                      347  	;***      170 : 
00000002                      348  	;***      171 : /***********************************************************************************************************************
00000002                      349  	;***      172 : * Function Name: r_uart1_callback_sendend
00000002                      350  	;***      173 : * Description  : This function is a callback function when UART1 finishes transmission.
00000002                      351  	;***      174 : * Arguments    : None
00000002                      352  	;***      175 : * Return Value : None
00000002                      353  	;***      176 : ***********************************************************************************************************************/
00000002                      354  	;***      177 : static void r_uart1_callback_sendend(void)
00000002                      355  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 177
00000002 D7                   356  	ret
00000003                      357  _r_uart1_callback_error@1:
00000003                      358  	.STACK _r_uart1_callback_error@1 = 4
00000003                      359  	;***      178 : {
00000003                      360  	;***      179 :     /* Start user code. Do not edit comment generated here */
00000003                      361  	;***      180 :     /* End user code. Do not edit comment generated here */
00000003                      362  	;***      181 : }
00000003                      363  	;***      182 : 
00000003                      364  	;***      183 : /***********************************************************************************************************************
00000003                      365  	;***      184 : * Function Name: r_uart1_callback_error
00000003                      366  	;***      185 : * Description  : This function is a callback function when UART1 reception error occurs.
00000003                      367  	;***      186 : * Arguments    : err_type -
00000003                      368  	;***      187 : *                    error type value
00000003                      369  	;***      188 : * Return Value : None
00000003                      370  	;***      189 : ***********************************************************************************************************************/
00000003                      371  	;***      190 : static void r_uart1_callback_error(uint8_t err_type)
00000003                      372  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 190
00000003 D7                   373  	ret
00000090                      374  	.SECTION .text,TEXT
00000090                      375  _r_csi00_interrupt@1	.vector 0x001E
00000090                      376  _r_csi00_interrupt@1:
00000090                      377  	.STACK _r_csi00_interrupt@1 = 16
00000090                      378  	;***      191 : {
00000090                      379  	;***      192 :     /* Start user code. Do not edit comment generated here */
00000090                      380  	;***      193 :     /* End user code. Do not edit comment generated here */
00000090                      381  	;***      194 : }
00000090                      382  	;***      195 : 
00000090                      383  	;***      196 : /***********************************************************************************************************************
00000090                      384  	;***      197 : * Function Name: r_csi00_interrupt
00000090                      385  	;***      198 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      386  	;***      199 : * Arguments    : None
00000090                      387  	;***      200 : * Return Value : None
00000090                      388  	;***      201 : ***********************************************************************************************************************/
00000090                      389  	;***      202 : static void __near r_csi00_interrupt(void)
00000090                      390  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 202
00000090 C1                   391  	push ax
00000091 C3                   392  	push bc
00000092 C5                   393  	push de
00000093 C7                   394  	push hl
00000094 8EFD                 395  	mov a, es
00000096 70                   396  	mov x, a
00000097 8EFC                 397  	mov a, cs
00000099 C1                   398  	push ax
0000009A C7                   399  	push hl
0000009B                      400  	;***      203 : {
0000009B                      401  	;***      204 :     volatile uint8_t err_type;
0000009B                      402  	;***      205 : 
0000009B                      403  	;***      206 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      404  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 206
0000009B AF0001               405  	movw ax, !0x0100
0000009E 60                   406  	mov a, x
0000009F 5C01                 407  	and a, #0x01
000000A1 9800                 408  	mov [sp+0x00], a
000000A3                      409  	;***      207 :     SIR00 = (uint16_t)err_type;
000000A3                      410  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 207
000000A3 8800                 411  	mov a, [sp+0x00]
000000A5 318E                 412  	shrw ax, 8+0x00000
000000A7 BF0801               413  	movw !0x0108, ax
000000AA                      414  	;***      208 : 
000000AA                      415  	;***      209 :     if (err_type != 1U)
000000AA                      416  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 209
000000AA 8800                 417  	mov a, [sp+0x00]
000000AC 91                   418  	dec a
000000AD DF00                 419  	bnz $.BB@LABEL@7_2
000000AF                      420  .BB@LABEL@7_1:	; return
000000AF C6                   421  	pop hl
000000B0 C0                   422  	pop ax
000000B1 9EFC                 423  	mov cs, a
000000B3 60                   424  	mov a, x
000000B4 9EFD                 425  	mov es, a
000000B6 C6                   426  	pop hl
000000B7 C4                   427  	pop de
000000B8 C2                   428  	pop bc
000000B9 C0                   429  	pop ax
000000BA                      430  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 222
000000BA 61FC                 431  	reti
000000BC                      432  .BB@LABEL@7_2:	; if_then_bb
000000BC                      433  	;***      210 :     {
000000BC                      434  	;***      211 :         if (g_csi00_tx_count > 0U)
000000BC                      435  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 211
000000BC AF0000               436  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   437  	clrw bc
000000C0 43                   438  	cmpw ax, bc
000000C1 DF00                 439  	bnz $.BB@LABEL@7_4
000000C3                      440  .BB@LABEL@7_3:	; if_else_bb
000000C3                      441  	;***      212 :         {
000000C3                      442  	;***      213 :             SIO00 = *gp_csi00_tx_address;
000000C3                      443  	;***      214 :             gp_csi00_tx_address++;
000000C3                      444  	;***      215 :             g_csi00_tx_count--;
000000C3                      445  	;***      216 :         }
000000C3                      446  	;***      217 :         else
000000C3                      447  	;***      218 :         {
000000C3                      448  	;***      219 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      449  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 219
000000C3 FC000000             450  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 451  	br $.BB@LABEL@7_1
000000C9                      452  .BB@LABEL@7_4:	; if_then_bb14
000000C9                      453  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 213
000000C9 EB0000               454  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   455  	mov a, [de]
000000CD 9D10                 456  	mov 0xFFF10, a
000000CF                      457  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 214
000000CF A5                   458  	incw de
000000D0 15                   459  	movw ax, de
000000D1 BF0000               460  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      461  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 215
000000D4 B20000               462  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 463  	br $.BB@LABEL@7_1
00000004                      464  	.SECTION .textf,TEXTF
00000004                      465  _r_csi00_callback_sendend@1:
00000004                      466  	.STACK _r_csi00_callback_sendend@1 = 4
00000004                      467  	;***      220 :         }
00000004                      468  	;***      221 :     }
00000004                      469  	;***      222 : }
00000004                      470  	;***      223 : 
00000004                      471  	;***      224 : /***********************************************************************************************************************
00000004                      472  	;***      225 : * Function Name: r_csi00_callback_sendend
00000004                      473  	;***      226 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000004                      474  	;***      227 : * Arguments    : None
00000004                      475  	;***      228 : * Return Value : None
00000004                      476  	;***      229 : ***********************************************************************************************************************/
00000004                      477  	;***      230 : static void r_csi00_callback_sendend(void)
00000004                      478  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 230
00000004 D7                   479  	ret
000000D9                      480  	.SECTION .text,TEXT
000000D9                      481  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      482  _r_csi01_interrupt@1:
000000D9                      483  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      484  	;***      231 : {
000000D9                      485  	;***      232 :     /* Start user code. Do not edit comment generated here */
000000D9                      486  	;***      233 :     /* End user code. Do not edit comment generated here */
000000D9                      487  	;***      234 : }
000000D9                      488  	;***      235 : 
000000D9                      489  	;***      236 : /***********************************************************************************************************************
000000D9                      490  	;***      237 : * Function Name: r_csi01_interrupt
000000D9                      491  	;***      238 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      492  	;***      239 : * Arguments    : None
000000D9                      493  	;***      240 : * Return Value : None
000000D9                      494  	;***      241 : ***********************************************************************************************************************/
000000D9                      495  	;***      242 : static void __near r_csi01_interrupt(void)
000000D9                      496  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 242
000000D9 C1                   497  	push ax
000000DA C3                   498  	push bc
000000DB C5                   499  	push de
000000DC C7                   500  	push hl
000000DD 8EFD                 501  	mov a, es
000000DF 70                   502  	mov x, a
000000E0 8EFC                 503  	mov a, cs
000000E2 C1                   504  	push ax
000000E3 C7                   505  	push hl
000000E4                      506  	;***      243 : {
000000E4                      507  	;***      244 :     volatile uint8_t err_type;
000000E4                      508  	;***      245 :     volatile uint8_t sio_dummy;
000000E4                      509  	;***      246 : 
000000E4                      510  	;***      247 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      511  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 247
000000E4 AF0201               512  	movw ax, !0x0102
000000E7 60                   513  	mov a, x
000000E8 5C01                 514  	and a, #0x01
000000EA 9800                 515  	mov [sp+0x00], a
000000EC                      516  	;***      248 :     SIR01 = (uint16_t)err_type;
000000EC                      517  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 248
000000EC 8800                 518  	mov a, [sp+0x00]
000000EE 318E                 519  	shrw ax, 8+0x00000
000000F0 BF0A01               520  	movw !0x010A, ax
000000F3                      521  	;***      249 : 
000000F3                      522  	;***      250 :     if (1U == err_type)
000000F3                      523  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 250
000000F3 8800                 524  	mov a, [sp+0x00]
000000F5 91                   525  	dec a
000000F6 DF00                 526  	bnz $.BB@LABEL@9_2
000000F8                      527  .BB@LABEL@9_1:	; if_then_bb
000000F8                      528  	;***      251 :     {
000000F8                      529  	;***      252 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      530  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 252
000000F8 8800                 531  	mov a, [sp+0x00]
000000FA FC000000             532  	call !!_r_csi01_callback_error@1
000000FE EF00                 533  	br $.BB@LABEL@9_15
00000100                      534  .BB@LABEL@9_2:	; if_else_bb
00000100                      535  	;***      253 :     }
00000100                      536  	;***      254 :     else
00000100                      537  	;***      255 :     {
00000100                      538  	;***      256 :         if (g_csi01_tx_count > 0U)
00000100                      539  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 256
00000100 AF0000               540  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   541  	clrw bc
00000104 43                   542  	cmpw ax, bc
00000105 DF00                 543  	bnz $.BB@LABEL@9_8
00000107                      544  .BB@LABEL@9_3:	; if_else_bb42
00000107                      545  	;***      257 :         {
00000107                      546  	;***      258 :             if (0U != gp_csi01_rx_address)
00000107                      547  	;***      259 :             {
00000107                      548  	;***      260 :                 *gp_csi01_rx_address = SIO01;
00000107                      549  	;***      261 :                 gp_csi01_rx_address++;
00000107                      550  	;***      262 :             }
00000107                      551  	;***      263 :             else
00000107                      552  	;***      264 :             {
00000107                      553  	;***      265 :                 sio_dummy = SIO01;
00000107                      554  	;***      266 :             }
00000107                      555  	;***      267 : 
00000107                      556  	;***      268 :             if (0U != gp_csi01_tx_address)
00000107                      557  	;***      269 :             {
00000107                      558  	;***      270 :                 SIO01 = *gp_csi01_tx_address;
00000107                      559  	;***      271 :                 gp_csi01_tx_address++;
00000107                      560  	;***      272 :             }
00000107                      561  	;***      273 :             else
00000107                      562  	;***      274 :             {
00000107                      563  	;***      275 :                 SIO01 = 0xFFU;
00000107                      564  	;***      276 :             }
00000107                      565  	;***      277 : 
00000107                      566  	;***      278 :             g_csi01_tx_count--;
00000107                      567  	;***      279 :         }
00000107                      568  	;***      280 :         else 
00000107                      569  	;***      281 :         {
00000107                      570  	;***      282 :             if (0U == g_csi01_tx_count)
00000107                      571  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 282
00000107 AF0000               572  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   573  	cmpw ax, bc
0000010B DF00                 574  	bnz $.BB@LABEL@9_7
0000010D                      575  .BB@LABEL@9_4:	; if_then_bb47
0000010D                      576  	;***      283 :             {
0000010D                      577  	;***      284 :                 if (0U != gp_csi01_rx_address)
0000010D                      578  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 284
0000010D AF0000               579  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   580  	cmpw ax, bc
00000111 DF00                 581  	bnz $.BB@LABEL@9_6
00000113                      582  .BB@LABEL@9_5:	; if_else_bb55
00000113                      583  	;***      285 :                 {
00000113                      584  	;***      286 :                     *gp_csi01_rx_address = SIO01;
00000113                      585  	;***      287 :                 }
00000113                      586  	;***      288 :                 else
00000113                      587  	;***      289 :                 {
00000113                      588  	;***      290 :                     sio_dummy = SIO01;
00000113                      589  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 290
00000113 8D12                 590  	mov a, 0xFFF12
00000115 9801                 591  	mov [sp+0x01], a
00000117 EF00                 592  	br $.BB@LABEL@9_7
00000119                      593  .BB@LABEL@9_6:	; if_then_bb52
00000119 14                   594  	movw de, ax
0000011A                      595  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 286
0000011A 8D12                 596  	mov a, 0xFFF12
0000011C 99                   597  	mov [de], a
0000011D                      598  .BB@LABEL@9_7:	; if_break_bb59
0000011D                      599  	;***      291 :                 }
0000011D                      600  	;***      292 :             }
0000011D                      601  	;***      293 : 
0000011D                      602  	;***      294 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      603  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 294
0000011D FC000000             604  	call !!_r_csi01_callback_sendend@1
00000121                      605  	;***      295 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      606  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 295
00000121 FC000000             607  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 608  	br $.BB@LABEL@9_15
00000127                      609  .BB@LABEL@9_8:	; if_then_bb16
00000127                      610  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 258
00000127 AF0000               611  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   612  	cmpw ax, bc
0000012B DF00                 613  	bnz $.BB@LABEL@9_10
0000012D                      614  .BB@LABEL@9_9:	; if_else_bb26
0000012D                      615  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 265
0000012D 8D12                 616  	mov a, 0xFFF12
0000012F 9801                 617  	mov [sp+0x01], a
00000131 EF00                 618  	br $.BB@LABEL@9_11
00000133                      619  .BB@LABEL@9_10:	; if_then_bb21
00000133 14                   620  	movw de, ax
00000134                      621  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 260
00000134 8D12                 622  	mov a, 0xFFF12
00000136 99                   623  	mov [de], a
00000137                      624  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 261
00000137 A20000               625  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      626  .BB@LABEL@9_11:	; if_break_bb
0000013A                      627  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 268
0000013A AF0000               628  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   629  	cmpw ax, bc
0000013E DF00                 630  	bnz $.BB@LABEL@9_13
00000140                      631  .BB@LABEL@9_12:	; if_else_bb38
00000140                      632  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 275
00000140 CD12FF               633  	mov 0xFFF12, #0xFF
00000143 EF00                 634  	br $.BB@LABEL@9_14
00000145                      635  .BB@LABEL@9_13:	; if_then_bb32
00000145 14                   636  	movw de, ax
00000146                      637  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 270
00000146 89                   638  	mov a, [de]
00000147 9D12                 639  	mov 0xFFF12, a
00000149                      640  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 271
00000149 A5                   641  	incw de
0000014A 15                   642  	movw ax, de
0000014B BF0000               643  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      644  .BB@LABEL@9_14:	; if_break_bb39
0000014E                      645  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 278
0000014E B20000               646  	decw !LOWW(_g_csi01_tx_count)
00000151                      647  .BB@LABEL@9_15:	; if_break_bb39
00000151 C6                   648  	pop hl
00000152 C0                   649  	pop ax
00000153 9EFC                 650  	mov cs, a
00000155 60                   651  	mov a, x
00000156 9EFD                 652  	mov es, a
00000158 C6                   653  	pop hl
00000159 C4                   654  	pop de
0000015A C2                   655  	pop bc
0000015B C0                   656  	pop ax
0000015C                      657  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 298
0000015C 61FC                 658  	reti
00000005                      659  	.SECTION .textf,TEXTF
00000005                      660  _r_csi01_callback_receiveend@1:
00000005                      661  	.STACK _r_csi01_callback_receiveend@1 = 4
00000005                      662  	;***      296 :         }
00000005                      663  	;***      297 :     }
00000005                      664  	;***      298 : }
00000005                      665  	;***      299 : 
00000005                      666  	;***      300 : /***********************************************************************************************************************
00000005                      667  	;***      301 : * Function Name: r_csi01_callback_receiveend
00000005                      668  	;***      302 : * Description  : This function is a callback function when CSI01 finishes reception.
00000005                      669  	;***      303 : * Arguments    : None
00000005                      670  	;***      304 : * Return Value : None
00000005                      671  	;***      305 : ***********************************************************************************************************************/
00000005                      672  	;***      306 : static void r_csi01_callback_receiveend(void)
00000005                      673  	;***      307 : {
00000005                      674  	;***      308 :     /* Start user code. Do not edit comment generated here */
00000005                      675  	;***      309 : 	g_csi_rev_end++;
00000005                      676  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 309
00000005 A00000               677  	inc !LOWW(_g_csi_rev_end)
00000008                      678  	;***      310 : 	R_CSI01_Stop();
00000008                      679  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 310
00000008 EC000000             680  	br !!_R_CSI01_Stop
0000000C                      681  _r_csi01_callback_error@1:
0000000C                      682  	.STACK _r_csi01_callback_error@1 = 4
0000000C                      683  	;***      311 :     /* End user code. Do not edit comment generated here */
0000000C                      684  	;***      312 : }
0000000C                      685  	;***      313 : 
0000000C                      686  	;***      314 : /***********************************************************************************************************************
0000000C                      687  	;***      315 : * Function Name: r_csi01_callback_error
0000000C                      688  	;***      316 : * Description  : This function is a callback function when CSI01 reception error occurs.
0000000C                      689  	;***      317 : * Arguments    : err_type -
0000000C                      690  	;***      318 : *                    error type value
0000000C                      691  	;***      319 : * Return Value : None
0000000C                      692  	;***      320 : ***********************************************************************************************************************/
0000000C                      693  	;***      321 : static void r_csi01_callback_error(uint8_t err_type)
0000000C                      694  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 321
0000000C D7                   695  	ret
0000000D                      696  _r_csi01_callback_sendend@1:
0000000D                      697  	.STACK _r_csi01_callback_sendend@1 = 4
0000000D                      698  	;***      322 : {
0000000D                      699  	;***      323 :     /* Start user code. Do not edit comment generated here */
0000000D                      700  	;***      324 : 
0000000D                      701  	;***      325 :     /* End user code. Do not edit comment generated here */
0000000D                      702  	;***      326 : }
0000000D                      703  	;***      327 : 
0000000D                      704  	;***      328 : /***********************************************************************************************************************
0000000D                      705  	;***      329 : * Function Name: r_csi01_callback_sendend
0000000D                      706  	;***      330 : * Description  : This function is a callback function when CSI01 finishes transmission.
0000000D                      707  	;***      331 : * Arguments    : None
0000000D                      708  	;***      332 : * Return Value : None
0000000D                      709  	;***      333 : ***********************************************************************************************************************/
0000000D                      710  	;***      334 : static void r_csi01_callback_sendend(void)
0000000D                      711  	;***      335 : {
0000000D                      712  	;***      336 :     /* Start user code. Do not edit comment generated here */
0000000D                      713  	;***      337 : 	g_csi_send_end++;
0000000D                      714  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 337
0000000D A00000               715  	inc !LOWW(_g_csi_send_end)
00000010 D7                   716  	ret
0000015E                      717  	.SECTION .text,TEXT
0000015E                      718  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      719  _r_uart2_interrupt_receive@1:
0000015E                      720  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      721  	;***      338 :     /* End user code. Do not edit comment generated here */
0000015E                      722  	;***      339 : }
0000015E                      723  	;***      340 : 
0000015E                      724  	;***      341 : /***********************************************************************************************************************
0000015E                      725  	;***      342 : * Function Name: r_uart2_interrupt_receive
0000015E                      726  	;***      343 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      727  	;***      344 : * Arguments    : None
0000015E                      728  	;***      345 : * Return Value : None
0000015E                      729  	;***      346 : ***********************************************************************************************************************/
0000015E                      730  	;***      347 : static void __near r_uart2_interrupt_receive(void)
0000015E                      731  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 347
0000015E C1                   732  	push ax
0000015F C3                   733  	push bc
00000160 C5                   734  	push de
00000161 C7                   735  	push hl
00000162 8EFD                 736  	mov a, es
00000164 70                   737  	mov x, a
00000165 8EFC                 738  	mov a, cs
00000167 C1                   739  	push ax
00000168 C7                   740  	push hl
00000169                      741  	;***      348 : {
00000169                      742  	;***      349 :     volatile uint8_t rx_data;
00000169                      743  	;***      350 :     volatile uint8_t err_type;
00000169                      744  	;***      351 :     
00000169                      745  	;***      352 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      746  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 352
00000169 AF4201               747  	movw ax, !0x0142
0000016C 60                   748  	mov a, x
0000016D 5C07                 749  	and a, #0x07
0000016F 9800                 750  	mov [sp+0x00], a
00000171                      751  	;***      353 :     SIR11 = (uint16_t)err_type;
00000171                      752  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 353
00000171 8800                 753  	mov a, [sp+0x00]
00000173 318E                 754  	shrw ax, 8+0x00000
00000175 BF4A01               755  	movw !0x014A, ax
00000178                      756  	;***      354 : 
00000178                      757  	;***      355 :     if (err_type != 0U)
00000178                      758  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 355
00000178 8800                 759  	mov a, [sp+0x00]
0000017A D1                   760  	cmp0 a
0000017B DD00                 761  	bz $.BB@LABEL@13_2
0000017D                      762  .BB@LABEL@13_1:	; if_then_bb
0000017D                      763  	;***      356 :     {
0000017D                      764  	;***      357 :         r_uart2_callback_error(err_type);
0000017D                      765  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 357
0000017D 8800                 766  	mov a, [sp+0x00]
0000017F FC000000             767  	call !!_r_uart2_callback_error@1
00000183                      768  .BB@LABEL@13_2:	; if_break_bb
00000183                      769  	;***      358 :     }
00000183                      770  	;***      359 :     
00000183                      771  	;***      360 :     rx_data = RXD2;
00000183                      772  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 360
00000183 8E4A                 773  	mov a, 0xFFF4A
00000185 9801                 774  	mov [sp+0x01], a
00000187                      775  	;***      361 : 
00000187                      776  	;***      362 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      777  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 362
00000187 AF0000               778  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               779  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 780  	mov a, [sp+0x01]
0000018F 61D300               781  	bnh $.BB@LABEL@13_6
00000192                      782  .BB@LABEL@13_3:	; if_then_bb18
00000192                      783  	;***      363 :     {
00000192                      784  	;***      364 :         *gp_uart2_rx_address = rx_data;
00000192                      785  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 364
00000192 EB0000               786  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   787  	mov [de], a
00000196                      788  	;***      365 :         gp_uart2_rx_address++;
00000196                      789  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 365
00000196 A20000               790  	incw !LOWW(_gp_uart2_rx_address)
00000199                      791  	;***      366 :         g_uart2_rx_count++;
00000199                      792  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 366
00000199 A20000               793  	incw !LOWW(_g_uart2_rx_count)
0000019C                      794  	;***      367 : 
0000019C                      795  	;***      368 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      796  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 368
0000019C AF0000               797  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               798  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 799  	sknz
000001A4                      800  .BB@LABEL@13_4:	; if_then_bb30
000001A4                      801  	;***      369 :         {
000001A4                      802  	;***      370 :             r_uart2_callback_receiveend();
000001A4                      803  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 370
000001A4 FC000000             804  	call !!_r_uart2_callback_receiveend@1
000001A8                      805  .BB@LABEL@13_5:	; return
000001A8 C6                   806  	pop hl
000001A9 C0                   807  	pop ax
000001AA 9EFC                 808  	mov cs, a
000001AC 60                   809  	mov a, x
000001AD 9EFD                 810  	mov es, a
000001AF C6                   811  	pop hl
000001B0 C4                   812  	pop de
000001B1 C2                   813  	pop bc
000001B2 C0                   814  	pop ax
000001B3                      815  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 377
000001B3 61FC                 816  	reti
000001B5                      817  .BB@LABEL@13_6:	; if_else_bb
000001B5                      818  	;***      371 :         }
000001B5                      819  	;***      372 :     }
000001B5                      820  	;***      373 :     else
000001B5                      821  	;***      374 :     {
000001B5                      822  	;***      375 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      823  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 375
000001B5 318E                 824  	shrw ax, 8+0x00000
000001B7 FC000000             825  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 826  	br $.BB@LABEL@13_5
000001BD                      827  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      828  _r_uart2_interrupt_send@1:
000001BD                      829  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      830  	;***      376 :     }
000001BD                      831  	;***      377 : }
000001BD                      832  	;***      378 : 
000001BD                      833  	;***      379 : /***********************************************************************************************************************
000001BD                      834  	;***      380 : * Function Name: r_uart2_interrupt_send
000001BD                      835  	;***      381 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      836  	;***      382 : * Arguments    : None
000001BD                      837  	;***      383 : * Return Value : None
000001BD                      838  	;***      384 : ***********************************************************************************************************************/
000001BD                      839  	;***      385 : static void __near r_uart2_interrupt_send(void)
000001BD                      840  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 385
000001BD C1                   841  	push ax
000001BE C3                   842  	push bc
000001BF C5                   843  	push de
000001C0 C7                   844  	push hl
000001C1 8EFD                 845  	mov a, es
000001C3 70                   846  	mov x, a
000001C4 8EFC                 847  	mov a, cs
000001C6 C1                   848  	push ax
000001C7                      849  	;***      386 : {
000001C7                      850  	;***      387 :     if (g_uart2_tx_count > 0U)
000001C7                      851  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 387
000001C7 AF0000               852  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   853  	clrw bc
000001CB 43                   854  	cmpw ax, bc
000001CC DF00                 855  	bnz $.BB@LABEL@14_3
000001CE                      856  .BB@LABEL@14_1:	; if_else_bb
000001CE                      857  	;***      388 :     {
000001CE                      858  	;***      389 :         TXD2 = *gp_uart2_tx_address;
000001CE                      859  	;***      390 :         gp_uart2_tx_address++;
000001CE                      860  	;***      391 :         g_uart2_tx_count--;
000001CE                      861  	;***      392 :     }
000001CE                      862  	;***      393 :     else
000001CE                      863  	;***      394 :     {
000001CE                      864  	;***      395 :         r_uart2_callback_sendend();
000001CE                      865  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
000001CE FC000000             866  	call !!_r_uart2_callback_sendend@1
000001D2                      867  .BB@LABEL@14_2:	; if_else_bb
000001D2 C0                   868  	pop ax
000001D3 9EFC                 869  	mov cs, a
000001D5 60                   870  	mov a, x
000001D6 9EFD                 871  	mov es, a
000001D8 C6                   872  	pop hl
000001D9 C4                   873  	pop de
000001DA C2                   874  	pop bc
000001DB C0                   875  	pop ax
000001DC                      876  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
000001DC 61FC                 877  	reti
000001DE                      878  .BB@LABEL@14_3:	; if_then_bb
000001DE                      879  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 389
000001DE EB0000               880  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   881  	mov a, [de]
000001E2 9E48                 882  	mov 0xFFF48, a
000001E4                      883  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 390
000001E4 A5                   884  	incw de
000001E5 15                   885  	movw ax, de
000001E6 BF0000               886  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      887  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
000001E9 B20000               888  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 889  	br $.BB@LABEL@14_2
00000011                      890  	.SECTION .textf,TEXTF
00000011                      891  _r_uart2_callback_receiveend@1:
00000011                      892  	.STACK _r_uart2_callback_receiveend@1 = 4
00000011                      893  	;***      396 :     }
00000011                      894  	;***      397 : }
00000011                      895  	;***      398 : 
00000011                      896  	;***      399 : /***********************************************************************************************************************
00000011                      897  	;***      400 : * Function Name: r_uart2_callback_receiveend
00000011                      898  	;***      401 : * Description  : This function is a callback function when UART2 finishes reception.
00000011                      899  	;***      402 : * Arguments    : None
00000011                      900  	;***      403 : * Return Value : None
00000011                      901  	;***      404 : ***********************************************************************************************************************/
00000011                      902  	;***      405 : static void r_uart2_callback_receiveend(void)
00000011                      903  	;***      406 : {
00000011                      904  	;***      407 :     /* Start user code. Do not edit comment generated here */
00000011                      905  	;***      408 : //	R_UART2_Receive(g_rx_data, 32);
00000011                      906  	;***      409 : //	R_UART2_Stop();
00000011                      907  	;***      410 : //	R_UART2_Start();
00000011                      908  	;***      411 : 	R_UART2_Receive(g_rx_data, sizeof(struct UART_Buffer_s));
00000011                      909  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 411
00000011 320600               910  	movw bc, #0x0006
00000014 300000               911  	movw ax, #LOWW(_g_rx_data)
00000017 FC000000             912  	call !!_R_UART2_Receive
0000001B                      913  	;***      412 : 	if(g_rx_data[0] > 6){
0000001B                      914  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 412
0000001B 40000007             915  	cmp !LOWW(_g_rx_data), #0x07
0000001F DC00                 916  	bc $.BB@LABEL@15_2
00000021                      917  .BB@LABEL@15_1:	; if_then_bb
00000021                      918  	;***      413 : 		g_uart2_fault = 1;
00000021                      919  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 413
00000021 E50000               920  	oneb !LOWW(_g_uart2_fault)
00000024 EF00                 921  	br $.BB@LABEL@15_3
00000026                      922  .BB@LABEL@15_2:	; if_else_bb
00000026                      923  	;***      414 : 	}else{
00000026                      924  	;***      415 : 		g_uart2_fault = 0;
00000026                      925  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 415
00000026 F50000               926  	clrb !LOWW(_g_uart2_fault)
00000029                      927  .BB@LABEL@15_3:	; if_break_bb
00000029                      928  	;***      416 : 	}
00000029                      929  	;***      417 : 	g_uart2_receive++;
00000029                      930  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 417
00000029 A00000               931  	inc !LOWW(_g_uart2_receive)
0000002C D7                   932  	ret
0000002D                      933  _r_uart2_callback_softwareoverrun@1:
0000002D                      934  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
0000002D                      935  	;***      418 :     /* End user code. Do not edit comment generated here */
0000002D                      936  	;***      419 : }
0000002D                      937  	;***      420 : 
0000002D                      938  	;***      421 : /***********************************************************************************************************************
0000002D                      939  	;***      422 : * Function Name: r_uart2_callback_softwareoverrun
0000002D                      940  	;***      423 : * Description  : This function is a callback function when UART2 receives an overflow data.
0000002D                      941  	;***      424 : * Arguments    : rx_data -
0000002D                      942  	;***      425 : *                    receive data
0000002D                      943  	;***      426 : * Return Value : None
0000002D                      944  	;***      427 : ***********************************************************************************************************************/
0000002D                      945  	;***      428 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
0000002D                      946  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 428
0000002D D7                   947  	ret
0000002E                      948  _r_uart2_callback_sendend@1:
0000002E                      949  	.STACK _r_uart2_callback_sendend@1 = 4
0000002E                      950  	;***      429 : {
0000002E                      951  	;***      430 :     /* Start user code. Do not edit comment generated here */
0000002E                      952  	;***      431 :     /* End user code. Do not edit comment generated here */
0000002E                      953  	;***      432 : }
0000002E                      954  	;***      433 : 
0000002E                      955  	;***      434 : /***********************************************************************************************************************
0000002E                      956  	;***      435 : * Function Name: r_uart2_callback_sendend
0000002E                      957  	;***      436 : * Description  : This function is a callback function when UART2 finishes transmission.
0000002E                      958  	;***      437 : * Arguments    : None
0000002E                      959  	;***      438 : * Return Value : None
0000002E                      960  	;***      439 : ***********************************************************************************************************************/
0000002E                      961  	;***      440 : static void r_uart2_callback_sendend(void)
0000002E                      962  	;***      441 : {
0000002E                      963  	;***      442 :     /* Start user code. Do not edit comment generated here */
0000002E                      964  	;***      443 : 	g_uart2_send++;
0000002E                      965  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
0000002E A00000               966  	inc !LOWW(_g_uart2_send)
00000031 D7                   967  	ret
00000032                      968  _r_uart2_callback_error@1:
00000032                      969  	.STACK _r_uart2_callback_error@1 = 4
00000032                      970  	;***      444 :     /* End user code. Do not edit comment generated here */
00000032                      971  	;***      445 : }
00000032                      972  	;***      446 : 
00000032                      973  	;***      447 : /***********************************************************************************************************************
00000032                      974  	;***      448 : * Function Name: r_uart2_callback_error
00000032                      975  	;***      449 : * Description  : This function is a callback function when UART2 reception error occurs.
00000032                      976  	;***      450 : * Arguments    : err_type -
00000032                      977  	;***      451 : *                    error type value
00000032                      978  	;***      452 : * Return Value : None
00000032                      979  	;***      453 : ***********************************************************************************************************************/
00000032                      980  	;***      454 : static void r_uart2_callback_error(uint8_t err_type)
00000032                      981  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 454
00000032 D7                   982  	ret
000001EE                      983  	.SECTION .text,TEXT
000001EE                      984  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                      985  _r_uart3_interrupt_receive@1:
000001EE                      986  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                      987  	;***      455 : {
000001EE                      988  	;***      456 :     /* Start user code. Do not edit comment generated here */
000001EE                      989  	;***      457 :     /* End user code. Do not edit comment generated here */
000001EE                      990  	;***      458 : }
000001EE                      991  	;***      459 : 
000001EE                      992  	;***      460 : /***********************************************************************************************************************
000001EE                      993  	;***      461 : * Function Name: r_uart3_interrupt_receive
000001EE                      994  	;***      462 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                      995  	;***      463 : * Arguments    : None
000001EE                      996  	;***      464 : * Return Value : None
000001EE                      997  	;***      465 : ***********************************************************************************************************************/
000001EE                      998  	;***      466 : static void __near r_uart3_interrupt_receive(void)
000001EE                      999  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 466
000001EE C1                  1000  	push ax
000001EF C3                  1001  	push bc
000001F0 C5                  1002  	push de
000001F1 C7                  1003  	push hl
000001F2 8EFD                1004  	mov a, es
000001F4 70                  1005  	mov x, a
000001F5 8EFC                1006  	mov a, cs
000001F7 C1                  1007  	push ax
000001F8 C7                  1008  	push hl
000001F9                     1009  	;***      467 : {
000001F9                     1010  	;***      468 :     volatile uint8_t rx_data;
000001F9                     1011  	;***      469 :     volatile uint8_t err_type;
000001F9                     1012  	;***      470 :     
000001F9                     1013  	;***      471 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1014  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 471
000001F9 AF4601              1015  	movw ax, !0x0146
000001FC 60                  1016  	mov a, x
000001FD 5C07                1017  	and a, #0x07
000001FF 9800                1018  	mov [sp+0x00], a
00000201                     1019  	;***      472 :     SIR13 = (uint16_t)err_type;
00000201                     1020  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 472
00000201 8800                1021  	mov a, [sp+0x00]
00000203 318E                1022  	shrw ax, 8+0x00000
00000205 BF4E01              1023  	movw !0x014E, ax
00000208                     1024  	;***      473 : 
00000208                     1025  	;***      474 :     if (err_type != 0U)
00000208                     1026  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 474
00000208 8800                1027  	mov a, [sp+0x00]
0000020A D1                  1028  	cmp0 a
0000020B DD00                1029  	bz $.BB@LABEL@19_2
0000020D                     1030  .BB@LABEL@19_1:	; if_then_bb
0000020D                     1031  	;***      475 :     {
0000020D                     1032  	;***      476 :         r_uart3_callback_error(err_type);
0000020D                     1033  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 476
0000020D 8800                1034  	mov a, [sp+0x00]
0000020F FC000000            1035  	call !!_r_uart3_callback_error@1
00000213                     1036  .BB@LABEL@19_2:	; if_break_bb
00000213                     1037  	;***      477 :     }
00000213                     1038  	;***      478 :     
00000213                     1039  	;***      479 :     rx_data = RXD3;
00000213                     1040  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 479
00000213 8D16                1041  	mov a, 0xFFF16
00000215 9801                1042  	mov [sp+0x01], a
00000217                     1043  	;***      480 : 
00000217                     1044  	;***      481 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1045  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 481
00000217 AF0000              1046  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1047  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1048  	mov a, [sp+0x01]
0000021F 61D300              1049  	bnh $.BB@LABEL@19_6
00000222                     1050  .BB@LABEL@19_3:	; if_then_bb18
00000222                     1051  	;***      482 :     {
00000222                     1052  	;***      483 :         *gp_uart3_rx_address = rx_data;
00000222                     1053  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 483
00000222 EB0000              1054  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1055  	mov [de], a
00000226                     1056  	;***      484 :         gp_uart3_rx_address++;
00000226                     1057  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 484
00000226 A20000              1058  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1059  	;***      485 :         g_uart3_rx_count++;
00000229                     1060  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 485
00000229 A20000              1061  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1062  	;***      486 : 
0000022C                     1063  	;***      487 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1064  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 487
0000022C AF0000              1065  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1066  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1067  	sknz
00000234                     1068  .BB@LABEL@19_4:	; if_then_bb30
00000234                     1069  	;***      488 :         {
00000234                     1070  	;***      489 :             r_uart3_callback_receiveend();
00000234                     1071  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 489
00000234 FC000000            1072  	call !!_r_uart3_callback_receiveend@1
00000238                     1073  .BB@LABEL@19_5:	; return
00000238 C6                  1074  	pop hl
00000239 C0                  1075  	pop ax
0000023A 9EFC                1076  	mov cs, a
0000023C 60                  1077  	mov a, x
0000023D 9EFD                1078  	mov es, a
0000023F C6                  1079  	pop hl
00000240 C4                  1080  	pop de
00000241 C2                  1081  	pop bc
00000242 C0                  1082  	pop ax
00000243                     1083  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 496
00000243 61FC                1084  	reti
00000245                     1085  .BB@LABEL@19_6:	; if_else_bb
00000245                     1086  	;***      490 :         }
00000245                     1087  	;***      491 :     }
00000245                     1088  	;***      492 :     else
00000245                     1089  	;***      493 :     {
00000245                     1090  	;***      494 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1091  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 494
00000245 318E                1092  	shrw ax, 8+0x00000
00000247 FC000000            1093  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1094  	br $.BB@LABEL@19_5
0000024D                     1095  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1096  _r_uart3_interrupt_send@1:
0000024D                     1097  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1098  	;***      495 :     }
0000024D                     1099  	;***      496 : }
0000024D                     1100  	;***      497 : 
0000024D                     1101  	;***      498 : /***********************************************************************************************************************
0000024D                     1102  	;***      499 : * Function Name: r_uart3_interrupt_send
0000024D                     1103  	;***      500 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1104  	;***      501 : * Arguments    : None
0000024D                     1105  	;***      502 : * Return Value : None
0000024D                     1106  	;***      503 : ***********************************************************************************************************************/
0000024D                     1107  	;***      504 : static void __near r_uart3_interrupt_send(void)
0000024D                     1108  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 504
0000024D C1                  1109  	push ax
0000024E C3                  1110  	push bc
0000024F C5                  1111  	push de
00000250 C7                  1112  	push hl
00000251 8EFD                1113  	mov a, es
00000253 70                  1114  	mov x, a
00000254 8EFC                1115  	mov a, cs
00000256 C1                  1116  	push ax
00000257                     1117  	;***      505 : {
00000257                     1118  	;***      506 :     if (g_uart3_tx_count > 0U)
00000257                     1119  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 506
00000257 AF0000              1120  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1121  	clrw bc
0000025B 43                  1122  	cmpw ax, bc
0000025C DF00                1123  	bnz $.BB@LABEL@20_3
0000025E                     1124  .BB@LABEL@20_1:	; if_else_bb
0000025E                     1125  	;***      507 :     {
0000025E                     1126  	;***      508 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1127  	;***      509 :         gp_uart3_tx_address++;
0000025E                     1128  	;***      510 :         g_uart3_tx_count--;
0000025E                     1129  	;***      511 :     }
0000025E                     1130  	;***      512 :     else
0000025E                     1131  	;***      513 :     {
0000025E                     1132  	;***      514 :         r_uart3_callback_sendend();
0000025E                     1133  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 514
0000025E FC000000            1134  	call !!_r_uart3_callback_sendend@1
00000262                     1135  .BB@LABEL@20_2:	; if_else_bb
00000262 C0                  1136  	pop ax
00000263 9EFC                1137  	mov cs, a
00000265 60                  1138  	mov a, x
00000266 9EFD                1139  	mov es, a
00000268 C6                  1140  	pop hl
00000269 C4                  1141  	pop de
0000026A C2                  1142  	pop bc
0000026B C0                  1143  	pop ax
0000026C                     1144  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 516
0000026C 61FC                1145  	reti
0000026E                     1146  .BB@LABEL@20_3:	; if_then_bb
0000026E                     1147  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 508
0000026E EB0000              1148  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1149  	mov a, [de]
00000272 9D14                1150  	mov 0xFFF14, a
00000274                     1151  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 509
00000274 A5                  1152  	incw de
00000275 15                  1153  	movw ax, de
00000276 BF0000              1154  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1155  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 510
00000279 B20000              1156  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1157  	br $.BB@LABEL@20_2
00000033                     1158  	.SECTION .textf,TEXTF
00000033                     1159  _r_uart3_callback_receiveend@1:
00000033                     1160  	.STACK _r_uart3_callback_receiveend@1 = 4
00000033                     1161  	;***      515 :     }
00000033                     1162  	;***      516 : }
00000033                     1163  	;***      517 : 
00000033                     1164  	;***      518 : /***********************************************************************************************************************
00000033                     1165  	;***      519 : * Function Name: r_uart3_callback_receiveend
00000033                     1166  	;***      520 : * Description  : This function is a callback function when UART3 finishes reception.
00000033                     1167  	;***      521 : * Arguments    : None
00000033                     1168  	;***      522 : * Return Value : None
00000033                     1169  	;***      523 : ***********************************************************************************************************************/
00000033                     1170  	;***      524 : static void r_uart3_callback_receiveend(void)
00000033                     1171  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 524
00000033 D7                  1172  	ret
00000034                     1173  _r_uart3_callback_softwareoverrun@1:
00000034                     1174  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000034                     1175  	;***      525 : {
00000034                     1176  	;***      526 :     /* Start user code. Do not edit comment generated here */
00000034                     1177  	;***      527 :     /* End user code. Do not edit comment generated here */
00000034                     1178  	;***      528 : }
00000034                     1179  	;***      529 : 
00000034                     1180  	;***      530 : /***********************************************************************************************************************
00000034                     1181  	;***      531 : * Function Name: r_uart3_callback_softwareoverrun
00000034                     1182  	;***      532 : * Description  : This function is a callback function when UART3 receives an overflow data.
00000034                     1183  	;***      533 : * Arguments    : rx_data -
00000034                     1184  	;***      534 : *                    receive data
00000034                     1185  	;***      535 : * Return Value : None
00000034                     1186  	;***      536 : ***********************************************************************************************************************/
00000034                     1187  	;***      537 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
00000034                     1188  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 537
00000034 D7                  1189  	ret
00000035                     1190  _r_uart3_callback_sendend@1:
00000035                     1191  	.STACK _r_uart3_callback_sendend@1 = 4
00000035                     1192  	;***      538 : {
00000035                     1193  	;***      539 :     /* Start user code. Do not edit comment generated here */
00000035                     1194  	;***      540 :     /* End user code. Do not edit comment generated here */
00000035                     1195  	;***      541 : }
00000035                     1196  	;***      542 : 
00000035                     1197  	;***      543 : /***********************************************************************************************************************
00000035                     1198  	;***      544 : * Function Name: r_uart3_callback_sendend
00000035                     1199  	;***      545 : * Description  : This function is a callback function when UART3 finishes transmission.
00000035                     1200  	;***      546 : * Arguments    : None
00000035                     1201  	;***      547 : * Return Value : None
00000035                     1202  	;***      548 : ***********************************************************************************************************************/
00000035                     1203  	;***      549 : static void r_uart3_callback_sendend(void)
00000035                     1204  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 549
00000035 D7                  1205  	ret
00000036                     1206  _r_uart3_callback_error@1:
00000036                     1207  	.STACK _r_uart3_callback_error@1 = 4
00000036                     1208  	;***      550 : {
00000036                     1209  	;***      551 :     /* Start user code. Do not edit comment generated here */
00000036                     1210  	;***      552 :     /* End user code. Do not edit comment generated here */
00000036                     1211  	;***      553 : }
00000036                     1212  	;***      554 : 
00000036                     1213  	;***      555 : /***********************************************************************************************************************
00000036                     1214  	;***      556 : * Function Name: r_uart3_callback_error
00000036                     1215  	;***      557 : * Description  : This function is a callback function when UART3 reception error occurs.
00000036                     1216  	;***      558 : * Arguments    : err_type -
00000036                     1217  	;***      559 : *                    error type value
00000036                     1218  	;***      560 : * Return Value : None
00000036                     1219  	;***      561 : ***********************************************************************************************************************/
00000036                     1220  	;***      562 : static void r_uart3_callback_error(uint8_t err_type)
00000036                     1221  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 562
00000036 D7                  1222  	ret
00000037                     1223  	;***      563 : {
00000037                     1224  	;***      564 :     /* Start user code. Do not edit comment generated here */
00000037                     1225  	;***      565 :     /* End user code. Do not edit comment generated here */
00000037                     1226  	;***      566 : }
00000037                     1227  	;***      567 : 
00000037                     1228  	;***      568 : /* Start user code for adding. Do not edit comment generated here */
00000037                     1229  	;***      569 : /* End user code. Do not edit comment generated here */
00000000                     1230  	.SECTION .bss,BSS
00000000                     1231  _g_csi_count:
00000000                     1232  	.DS (1)
00000001                     1233  _g_csi_err:
00000001                     1234  	.DS (1)
00000002                     1235  _g_csi_send_end:
00000002                     1236  	.DS (1)
00000003                     1237  _g_csi_rev_end:
00000003                     1238  	.DS (1)
00000004                     1239  _g_uart1_end:
00000004                     1240  	.DS (1)
00000005                     1241  _g_uart2_send:
00000005                     1242  	.DS (1)
00000006                     1243  _g_uart2_receive:
00000006                     1244  	.DS (1)
00000007                     1245  _g_rx_data:
00000007                     1246  	.DS (32)
00000027                     1247  _g_uart2_fault:
00000027                     1248  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF                55 (00000037) .textf
BSS                  40 (00000028) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

