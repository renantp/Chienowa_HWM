RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Tue Dec 07 17:32:39 2021
00000000                       19  
00000000                       20  	.EXTERN _g_timerSetting
00000000                       21  	.EXTERN _rec_buf
00000000                       22  	.EXTERN _gp_uart1_tx_address
00000000                       23  	.EXTERN _g_uart1_tx_count
00000000                       24  	.EXTERN _gp_uart1_rx_address
00000000                       25  	.EXTERN _g_uart1_rx_count
00000000                       26  	.EXTERN _g_uart1_rx_length
00000000                       27  	.EXTERN _gp_csi00_tx_address
00000000                       28  	.EXTERN _g_csi00_tx_count
00000000                       29  	.EXTERN _gp_csi01_rx_address
00000000                       30  	.EXTERN _gp_csi01_tx_address
00000000                       31  	.EXTERN _g_csi01_tx_count
00000000                       32  	.EXTERN _gp_uart2_tx_address
00000000                       33  	.EXTERN _g_uart2_tx_count
00000000                       34  	.EXTERN _gp_uart2_rx_address
00000000                       35  	.EXTERN _g_uart2_rx_count
00000000                       36  	.EXTERN _g_uart2_rx_length
00000000                       37  	.EXTERN _gp_uart3_tx_address
00000000                       38  	.EXTERN _g_uart3_tx_count
00000000                       39  	.EXTERN _gp_uart3_rx_address
00000000                       40  	.EXTERN _g_uart3_rx_count
00000000                       41  	.EXTERN _g_uart3_rx_length
00000000                       42  	.PUBLIC _send_response_flag
00000000                       43  	.PUBLIC _send_response_time_flag
00000000                       44  	.PUBLIC _send_response_number_flag
00000000                       45  	.PUBLIC _g_csi_count
00000000                       46  	.PUBLIC _g_csi_err
00000000                       47  	.PUBLIC _g_csi_send_end
00000000                       48  	.PUBLIC _g_csi_rev_end
00000000                       49  	.PUBLIC _g_uart1_send
00000000                       50  	.PUBLIC _g_uart2_sendend
00000000                       51  	.PUBLIC _g_uart2_receive
00000000                       52  	.PUBLIC _g_rx_data
00000000                       53  	.PUBLIC _g_uart2_fault
00000000                       54  	.PUBLIC _g_uart3_sendend
00000000                       55  	.PUBLIC _sendResponse
00000000                       56  	.EXTERN _R_UART2_Send
00000000                       57  	.PUBLIC _isCommand
00000000                       58  	.EXTERN _R_CSI01_Stop
00000000                       59  	.EXTERN _R_UART2_Receive
00000000                       60  	.EXTERN _R_UART3_Receive
00000000                       61  
00000000                       62  	.SECTION .textf,TEXTF
00000000                       63  _sendResponse:
00000000                       64  	.STACK _sendResponse = 4
00000000                       65  	;***        1 : /***********************************************************************************************************************
00000000                       66  	;***        2 : * DISCLAIMER
00000000                       67  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       68  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       69  	;***        5 : * applicable laws, including copyright laws. 
00000000                       70  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       71  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       72  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       73  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       74  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       75  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       76  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       77  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       78  	;***       14 : * following link:
00000000                       79  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       80  	;***       16 : *
00000000                       81  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       82  	;***       18 : ***********************************************************************************************************************/
00000000                       83  	;***       19 : 
00000000                       84  	;***       20 : /***********************************************************************************************************************
00000000                       85  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       86  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       87  	;***       23 : * Device(s)    : R5F104ML
00000000                       88  	;***       24 : * Tool-Chain   : CCRL
00000000                       89  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       90  	;***       26 : * Creation Date: 30/11/2021
00000000                       91  	;***       27 : ***********************************************************************************************************************/
00000000                       92  	;***       28 : 
00000000                       93  	;***       29 : /***********************************************************************************************************************
00000000                       94  	;***       30 : Includes
00000000                       95  	;***       31 : ***********************************************************************************************************************/
00000000                       96  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       97  	;***       33 : #include "r_cg_serial.h"
00000000                       98  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                       99  	;***       35 : /* End user code. Do not edit comment generated here */
00000000                      100  	;***       36 : #include "r_cg_userdefine.h"
00000000                      101  	;***       37 : 
00000000                      102  	;***       38 : /***********************************************************************************************************************
00000000                      103  	;***       39 : Pragma directive
00000000                      104  	;***       40 : ***********************************************************************************************************************/
00000000                      105  	;***       41 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      106  	;***       42 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      107  	;***       43 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      108  	;***       44 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      109  	;***       45 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      110  	;***       46 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      111  	;***       47 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      112  	;***       48 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      113  	;***       49 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      114  	;***       50 : /* End user code. Do not edit comment generated here */
00000000                      115  	;***       51 : 
00000000                      116  	;***       52 : /***********************************************************************************************************************
00000000                      117  	;***       53 : Global variables and functions
00000000                      118  	;***       54 : ***********************************************************************************************************************/
00000000                      119  	;***       55 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      120  	;***       56 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      121  	;***       57 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      122  	;***       58 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      123  	;***       59 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      124  	;***       60 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      125  	;***       61 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      126  	;***       62 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      127  	;***       63 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      128  	;***       64 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      129  	;***       65 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      130  	;***       66 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      131  	;***       67 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      132  	;***       68 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      133  	;***       69 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      134  	;***       70 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      135  	;***       71 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      136  	;***       72 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      137  	;***       73 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      138  	;***       74 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      139  	;***       75 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      140  	;***       76 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      141  	;***       77 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      142  	;***       78 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      143  	;***       79 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      144  	;***       80 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      145  	;***       81 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      146  	;***       82 : /* Start user code for global. Do not edit comment generated here */
00000000                      147  	;***       83 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag;
00000000                      148  	;***       84 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      149  	;***       85 : uint8_t g_rx_data[32];
00000000                      150  	;***       86 : volatile uint8_t g_uart2_fault;
00000000                      151  	;***       87 : volatile uint8_t g_uart3_sendend;
00000000                      152  	;***       88 : void sendResponse(uint8_t *data){
00000000                      153  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 88
00000000 F50000               154  	clrb !LOWW(_g_uart2_sendend)
00000003                      155  	;***       89 : 	g_uart2_sendend = 0;
00000003                      156  	;***       90 : 	R_UART2_Send(data, 6);
00000003                      157  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 90
00000003 320600               158  	movw bc, #0x0006
00000006 EC000000             159  	br !!_R_UART2_Send
0000000A                      160  _isCommand:
0000000A                      161  	.STACK _isCommand = 4
0000000A                      162  	;***       91 : }
0000000A                      163  	;***       92 : uint8_t isCommand(uint8_t *data){
0000000A                      164  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 92
0000000A 14                   165  	movw de, ax
0000000B                      166  	;***       93 : 	switch ((enum UART_header_e)data[0]) {
0000000B                      167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 93
0000000B 89                   168  	mov a, [de]
0000000C 0CBF                 169  	add a, #0xBF
0000000E DD00                 170  	bz $.BB@LABEL@2_4
00000010                      171  .BB@LABEL@2_1:	; entry
00000010 0CFE                 172  	add a, #0xFE
00000012 DD00                 173  	bz $.BB@LABEL@2_4
00000014                      174  .BB@LABEL@2_2:	; entry
00000014 0CFE                 175  	add a, #0xFE
00000016 DD00                 176  	bz $.BB@LABEL@2_4
00000018                      177  .BB@LABEL@2_3:	; entry
00000018 0CF3                 178  	add a, #0xF3
0000001A 4C02                 179  	cmp a, #0x02
0000001C F1                   180  	clrb a
0000001D DE00                 181  	bnc $.BB@LABEL@2_7
0000001F                      182  .BB@LABEL@2_4:	; bb17.preheader
0000001F 15                   183  	movw ax, de
00000020 FE0000               184  	call $!_sendResponse
00000023                      185  .BB@LABEL@2_5:	; bb17
00000023                      186  	;***       94 : 		case H_ALARM:
00000023                      187  	;***       95 : 			sendResponse(data);
00000023                      188  	;***       96 : 			break;
00000023                      189  	;***       97 : 		case H_CLEAR:
00000023                      190  	;***       98 : 			sendResponse(data);
00000023                      191  	;***       99 : 			break;
00000023                      192  	;***      100 : 		case H_ERROR:
00000023                      193  	;***      101 : 			sendResponse(data);
00000023                      194  	;***      102 : 			break;
00000023                      195  	;***      103 : 		case H_READ:
00000023                      196  	;***      104 : 			sendResponse(data);
00000023                      197  	;***      105 : 			break;
00000023                      198  	;***      106 : 		case H_SET:
00000023                      199  	;***      107 : 			sendResponse(data);
00000023                      200  	;***      108 : 			break;
00000023                      201  	;***      109 : 		default:
00000023                      202  	;***      110 : 			return 0;
00000023                      203  	;***      111 : 	}
00000023                      204  	;***      112 : 	while(g_uart2_sendend == 0);
00000023                      205  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 112
00000023 D50000               206  	cmp0 !LOWW(_g_uart2_sendend)
00000026 DD00                 207  	bz $.BB@LABEL@2_5
00000028                      208  .BB@LABEL@2_6:	; bb17.bb24_crit_edge
00000028 E1                   209  	oneb a
00000029                      210  .BB@LABEL@2_7:	; bb24
00000029                      211  	;***      113 : 	return 1;
00000029                      212  	;***      114 : }
00000029                      213  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 114
00000029 D7                   214  	ret
00000000                      215  	.SECTION .text,TEXT
00000000                      216  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      217  _r_uart1_interrupt_receive@1:
00000000                      218  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      219  	;***      115 : /* End user code. Do not edit comment generated here */
00000000                      220  	;***      116 : 
00000000                      221  	;***      117 : /***********************************************************************************************************************
00000000                      222  	;***      118 : * Function Name: r_uart1_interrupt_receive
00000000                      223  	;***      119 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      224  	;***      120 : * Arguments    : None
00000000                      225  	;***      121 : * Return Value : None
00000000                      226  	;***      122 : ***********************************************************************************************************************/
00000000                      227  	;***      123 : static void __near r_uart1_interrupt_receive(void)
00000000                      228  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 123
00000000 C1                   229  	push ax
00000001 C3                   230  	push bc
00000002 C5                   231  	push de
00000003 C7                   232  	push hl
00000004 8EFD                 233  	mov a, es
00000006 70                   234  	mov x, a
00000007 8EFC                 235  	mov a, cs
00000009 C1                   236  	push ax
0000000A C7                   237  	push hl
0000000B                      238  	;***      124 : {
0000000B                      239  	;***      125 :     volatile uint8_t rx_data;
0000000B                      240  	;***      126 :     volatile uint8_t err_type;
0000000B                      241  	;***      127 :     
0000000B                      242  	;***      128 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      243  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 128
0000000B AF0601               244  	movw ax, !0x0106
0000000E 60                   245  	mov a, x
0000000F 5C07                 246  	and a, #0x07
00000011 9800                 247  	mov [sp+0x00], a
00000013                      248  	;***      129 :     SIR03 = (uint16_t)err_type;
00000013                      249  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 129
00000013 8800                 250  	mov a, [sp+0x00]
00000015 318E                 251  	shrw ax, 8+0x00000
00000017 BF0E01               252  	movw !0x010E, ax
0000001A                      253  	;***      130 : 
0000001A                      254  	;***      131 :     if (err_type != 0U)
0000001A                      255  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
0000001A 8800                 256  	mov a, [sp+0x00]
0000001C D1                   257  	cmp0 a
0000001D DD00                 258  	bz $.BB@LABEL@3_2
0000001F                      259  .BB@LABEL@3_1:	; if_then_bb
0000001F                      260  	;***      132 :     {
0000001F                      261  	;***      133 :         r_uart1_callback_error(err_type);
0000001F                      262  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 133
0000001F 8800                 263  	mov a, [sp+0x00]
00000021 FC000000             264  	call !!_r_uart1_callback_error@1
00000025                      265  .BB@LABEL@3_2:	; if_break_bb
00000025                      266  	;***      134 :     }
00000025                      267  	;***      135 :     
00000025                      268  	;***      136 :     rx_data = RXD1;
00000025                      269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 136
00000025 8E46                 270  	mov a, 0xFFF46
00000027 9801                 271  	mov [sp+0x01], a
00000029                      272  	;***      137 : 
00000029                      273  	;***      138 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      274  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
00000029 AF0000               275  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               276  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 277  	mov a, [sp+0x01]
00000031 61D300               278  	bnh $.BB@LABEL@3_6
00000034                      279  .BB@LABEL@3_3:	; if_then_bb18
00000034                      280  	;***      139 :     {
00000034                      281  	;***      140 :         *gp_uart1_rx_address = rx_data;
00000034                      282  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 140
00000034 EB0000               283  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   284  	mov [de], a
00000038                      285  	;***      141 :         gp_uart1_rx_address++;
00000038                      286  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 141
00000038 A20000               287  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      288  	;***      142 :         g_uart1_rx_count++;
0000003B                      289  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
0000003B A20000               290  	incw !LOWW(_g_uart1_rx_count)
0000003E                      291  	;***      143 : 
0000003E                      292  	;***      144 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      293  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
0000003E AF0000               294  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               295  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 296  	sknz
00000046                      297  .BB@LABEL@3_4:	; if_then_bb30
00000046                      298  	;***      145 :         {
00000046                      299  	;***      146 :             r_uart1_callback_receiveend();
00000046                      300  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
00000046 FC000000             301  	call !!_r_uart1_callback_receiveend@1
0000004A                      302  .BB@LABEL@3_5:	; return
0000004A C6                   303  	pop hl
0000004B C0                   304  	pop ax
0000004C 9EFC                 305  	mov cs, a
0000004E 60                   306  	mov a, x
0000004F 9EFD                 307  	mov es, a
00000051 C6                   308  	pop hl
00000052 C4                   309  	pop de
00000053 C2                   310  	pop bc
00000054 C0                   311  	pop ax
00000055                      312  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 153
00000055 61FC                 313  	reti
00000057                      314  .BB@LABEL@3_6:	; if_else_bb
00000057                      315  	;***      147 :         }
00000057                      316  	;***      148 :     }
00000057                      317  	;***      149 :     else
00000057                      318  	;***      150 :     {
00000057                      319  	;***      151 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      320  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 151
00000057 318E                 321  	shrw ax, 8+0x00000
00000059 FC000000             322  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 323  	br $.BB@LABEL@3_5
0000005F                      324  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      325  _r_uart1_interrupt_send@1:
0000005F                      326  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      327  	;***      152 :     }
0000005F                      328  	;***      153 : }
0000005F                      329  	;***      154 : 
0000005F                      330  	;***      155 : /***********************************************************************************************************************
0000005F                      331  	;***      156 : * Function Name: r_uart1_interrupt_send
0000005F                      332  	;***      157 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      333  	;***      158 : * Arguments    : None
0000005F                      334  	;***      159 : * Return Value : None
0000005F                      335  	;***      160 : ***********************************************************************************************************************/
0000005F                      336  	;***      161 : static void __near r_uart1_interrupt_send(void)
0000005F                      337  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 161
0000005F C1                   338  	push ax
00000060 C3                   339  	push bc
00000061 C5                   340  	push de
00000062 C7                   341  	push hl
00000063 8EFD                 342  	mov a, es
00000065 70                   343  	mov x, a
00000066 8EFC                 344  	mov a, cs
00000068 C1                   345  	push ax
00000069                      346  	;***      162 : {
00000069                      347  	;***      163 :     if (g_uart1_tx_count > 0U)
00000069                      348  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 163
00000069 AF0000               349  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   350  	clrw bc
0000006D 43                   351  	cmpw ax, bc
0000006E DF00                 352  	bnz $.BB@LABEL@4_3
00000070                      353  .BB@LABEL@4_1:	; if_else_bb
00000070                      354  	;***      164 :     {
00000070                      355  	;***      165 :         TXD1 = *gp_uart1_tx_address;
00000070                      356  	;***      166 :         gp_uart1_tx_address++;
00000070                      357  	;***      167 :         g_uart1_tx_count--;
00000070                      358  	;***      168 :     }
00000070                      359  	;***      169 :     else
00000070                      360  	;***      170 :     {
00000070                      361  	;***      171 :         r_uart1_callback_sendend();
00000070                      362  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 171
00000070 FC000000             363  	call !!_r_uart1_callback_sendend@1
00000074                      364  .BB@LABEL@4_2:	; if_else_bb
00000074 C0                   365  	pop ax
00000075 9EFC                 366  	mov cs, a
00000077 60                   367  	mov a, x
00000078 9EFD                 368  	mov es, a
0000007A C6                   369  	pop hl
0000007B C4                   370  	pop de
0000007C C2                   371  	pop bc
0000007D C0                   372  	pop ax
0000007E                      373  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 173
0000007E 61FC                 374  	reti
00000080                      375  .BB@LABEL@4_3:	; if_then_bb
00000080                      376  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000080 EB0000               377  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   378  	mov a, [de]
00000084 9E44                 379  	mov 0xFFF44, a
00000086                      380  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 166
00000086 A5                   381  	incw de
00000087 15                   382  	movw ax, de
00000088 BF0000               383  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      384  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 167
0000008B B20000               385  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 386  	br $.BB@LABEL@4_2
0000002A                      387  	.SECTION .textf,TEXTF
0000002A                      388  _r_uart1_callback_receiveend@1:
0000002A                      389  	.STACK _r_uart1_callback_receiveend@1 = 4
0000002A                      390  	;***      172 :     }
0000002A                      391  	;***      173 : }
0000002A                      392  	;***      174 : 
0000002A                      393  	;***      175 : /***********************************************************************************************************************
0000002A                      394  	;***      176 : * Function Name: r_uart1_callback_receiveend
0000002A                      395  	;***      177 : * Description  : This function is a callback function when UART1 finishes reception.
0000002A                      396  	;***      178 : * Arguments    : None
0000002A                      397  	;***      179 : * Return Value : None
0000002A                      398  	;***      180 : ***********************************************************************************************************************/
0000002A                      399  	;***      181 : static void r_uart1_callback_receiveend(void)
0000002A                      400  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 181
0000002A D7                   401  	ret
0000002B                      402  _r_uart1_callback_softwareoverrun@1:
0000002B                      403  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
0000002B                      404  	;***      182 : {
0000002B                      405  	;***      183 :     /* Start user code. Do not edit comment generated here */
0000002B                      406  	;***      184 :     /* End user code. Do not edit comment generated here */
0000002B                      407  	;***      185 : }
0000002B                      408  	;***      186 : 
0000002B                      409  	;***      187 : /***********************************************************************************************************************
0000002B                      410  	;***      188 : * Function Name: r_uart1_callback_softwareoverrun
0000002B                      411  	;***      189 : * Description  : This function is a callback function when UART1 receives an overflow data.
0000002B                      412  	;***      190 : * Arguments    : rx_data -
0000002B                      413  	;***      191 : *                    receive data
0000002B                      414  	;***      192 : * Return Value : None
0000002B                      415  	;***      193 : ***********************************************************************************************************************/
0000002B                      416  	;***      194 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
0000002B                      417  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 194
0000002B D7                   418  	ret
0000002C                      419  _r_uart1_callback_sendend@1:
0000002C                      420  	.STACK _r_uart1_callback_sendend@1 = 4
0000002C                      421  	;***      195 : {
0000002C                      422  	;***      196 :     /* Start user code. Do not edit comment generated here */
0000002C                      423  	;***      197 :     /* End user code. Do not edit comment generated here */
0000002C                      424  	;***      198 : }
0000002C                      425  	;***      199 : 
0000002C                      426  	;***      200 : /***********************************************************************************************************************
0000002C                      427  	;***      201 : * Function Name: r_uart1_callback_sendend
0000002C                      428  	;***      202 : * Description  : This function is a callback function when UART1 finishes transmission.
0000002C                      429  	;***      203 : * Arguments    : None
0000002C                      430  	;***      204 : * Return Value : None
0000002C                      431  	;***      205 : ***********************************************************************************************************************/
0000002C                      432  	;***      206 : static void r_uart1_callback_sendend(void)
0000002C                      433  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 206
0000002C D7                   434  	ret
0000002D                      435  _r_uart1_callback_error@1:
0000002D                      436  	.STACK _r_uart1_callback_error@1 = 4
0000002D                      437  	;***      207 : {
0000002D                      438  	;***      208 :     /* Start user code. Do not edit comment generated here */
0000002D                      439  	;***      209 :     /* End user code. Do not edit comment generated here */
0000002D                      440  	;***      210 : }
0000002D                      441  	;***      211 : 
0000002D                      442  	;***      212 : /***********************************************************************************************************************
0000002D                      443  	;***      213 : * Function Name: r_uart1_callback_error
0000002D                      444  	;***      214 : * Description  : This function is a callback function when UART1 reception error occurs.
0000002D                      445  	;***      215 : * Arguments    : err_type -
0000002D                      446  	;***      216 : *                    error type value
0000002D                      447  	;***      217 : * Return Value : None
0000002D                      448  	;***      218 : ***********************************************************************************************************************/
0000002D                      449  	;***      219 : static void r_uart1_callback_error(uint8_t err_type)
0000002D                      450  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 219
0000002D D7                   451  	ret
00000090                      452  	.SECTION .text,TEXT
00000090                      453  _r_csi00_interrupt@1	.vector 0x001E
00000090                      454  _r_csi00_interrupt@1:
00000090                      455  	.STACK _r_csi00_interrupt@1 = 16
00000090                      456  	;***      220 : {
00000090                      457  	;***      221 :     /* Start user code. Do not edit comment generated here */
00000090                      458  	;***      222 :     /* End user code. Do not edit comment generated here */
00000090                      459  	;***      223 : }
00000090                      460  	;***      224 : 
00000090                      461  	;***      225 : /***********************************************************************************************************************
00000090                      462  	;***      226 : * Function Name: r_csi00_interrupt
00000090                      463  	;***      227 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      464  	;***      228 : * Arguments    : None
00000090                      465  	;***      229 : * Return Value : None
00000090                      466  	;***      230 : ***********************************************************************************************************************/
00000090                      467  	;***      231 : static void __near r_csi00_interrupt(void)
00000090                      468  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 231
00000090 C1                   469  	push ax
00000091 C3                   470  	push bc
00000092 C5                   471  	push de
00000093 C7                   472  	push hl
00000094 8EFD                 473  	mov a, es
00000096 70                   474  	mov x, a
00000097 8EFC                 475  	mov a, cs
00000099 C1                   476  	push ax
0000009A C7                   477  	push hl
0000009B                      478  	;***      232 : {
0000009B                      479  	;***      233 :     volatile uint8_t err_type;
0000009B                      480  	;***      234 : 
0000009B                      481  	;***      235 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      482  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 235
0000009B AF0001               483  	movw ax, !0x0100
0000009E 60                   484  	mov a, x
0000009F 5C01                 485  	and a, #0x01
000000A1 9800                 486  	mov [sp+0x00], a
000000A3                      487  	;***      236 :     SIR00 = (uint16_t)err_type;
000000A3                      488  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 236
000000A3 8800                 489  	mov a, [sp+0x00]
000000A5 318E                 490  	shrw ax, 8+0x00000
000000A7 BF0801               491  	movw !0x0108, ax
000000AA                      492  	;***      237 : 
000000AA                      493  	;***      238 :     if (err_type != 1U)
000000AA                      494  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 238
000000AA 8800                 495  	mov a, [sp+0x00]
000000AC 91                   496  	dec a
000000AD DF00                 497  	bnz $.BB@LABEL@9_2
000000AF                      498  .BB@LABEL@9_1:	; return
000000AF C6                   499  	pop hl
000000B0 C0                   500  	pop ax
000000B1 9EFC                 501  	mov cs, a
000000B3 60                   502  	mov a, x
000000B4 9EFD                 503  	mov es, a
000000B6 C6                   504  	pop hl
000000B7 C4                   505  	pop de
000000B8 C2                   506  	pop bc
000000B9 C0                   507  	pop ax
000000BA                      508  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 251
000000BA 61FC                 509  	reti
000000BC                      510  .BB@LABEL@9_2:	; if_then_bb
000000BC                      511  	;***      239 :     {
000000BC                      512  	;***      240 :         if (g_csi00_tx_count > 0U)
000000BC                      513  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 240
000000BC AF0000               514  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   515  	clrw bc
000000C0 43                   516  	cmpw ax, bc
000000C1 DF00                 517  	bnz $.BB@LABEL@9_4
000000C3                      518  .BB@LABEL@9_3:	; if_else_bb
000000C3                      519  	;***      241 :         {
000000C3                      520  	;***      242 :             SIO00 = *gp_csi00_tx_address;
000000C3                      521  	;***      243 :             gp_csi00_tx_address++;
000000C3                      522  	;***      244 :             g_csi00_tx_count--;
000000C3                      523  	;***      245 :         }
000000C3                      524  	;***      246 :         else
000000C3                      525  	;***      247 :         {
000000C3                      526  	;***      248 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 248
000000C3 FC000000             528  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 529  	br $.BB@LABEL@9_1
000000C9                      530  .BB@LABEL@9_4:	; if_then_bb14
000000C9                      531  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 242
000000C9 EB0000               532  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   533  	mov a, [de]
000000CD 9D10                 534  	mov 0xFFF10, a
000000CF                      535  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 243
000000CF A5                   536  	incw de
000000D0 15                   537  	movw ax, de
000000D1 BF0000               538  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      539  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 244
000000D4 B20000               540  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 541  	br $.BB@LABEL@9_1
0000002E                      542  	.SECTION .textf,TEXTF
0000002E                      543  _r_csi00_callback_sendend@1:
0000002E                      544  	.STACK _r_csi00_callback_sendend@1 = 4
0000002E                      545  	;***      249 :         }
0000002E                      546  	;***      250 :     }
0000002E                      547  	;***      251 : }
0000002E                      548  	;***      252 : 
0000002E                      549  	;***      253 : /***********************************************************************************************************************
0000002E                      550  	;***      254 : * Function Name: r_csi00_callback_sendend
0000002E                      551  	;***      255 : * Description  : This function is a callback function when CSI00 finishes transmission.
0000002E                      552  	;***      256 : * Arguments    : None
0000002E                      553  	;***      257 : * Return Value : None
0000002E                      554  	;***      258 : ***********************************************************************************************************************/
0000002E                      555  	;***      259 : static void r_csi00_callback_sendend(void)
0000002E                      556  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 259
0000002E D7                   557  	ret
000000D9                      558  	.SECTION .text,TEXT
000000D9                      559  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      560  _r_csi01_interrupt@1:
000000D9                      561  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      562  	;***      260 : {
000000D9                      563  	;***      261 :     /* Start user code. Do not edit comment generated here */
000000D9                      564  	;***      262 :     /* End user code. Do not edit comment generated here */
000000D9                      565  	;***      263 : }
000000D9                      566  	;***      264 : 
000000D9                      567  	;***      265 : /***********************************************************************************************************************
000000D9                      568  	;***      266 : * Function Name: r_csi01_interrupt
000000D9                      569  	;***      267 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      570  	;***      268 : * Arguments    : None
000000D9                      571  	;***      269 : * Return Value : None
000000D9                      572  	;***      270 : ***********************************************************************************************************************/
000000D9                      573  	;***      271 : static void __near r_csi01_interrupt(void)
000000D9                      574  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 271
000000D9 C1                   575  	push ax
000000DA C3                   576  	push bc
000000DB C5                   577  	push de
000000DC C7                   578  	push hl
000000DD 8EFD                 579  	mov a, es
000000DF 70                   580  	mov x, a
000000E0 8EFC                 581  	mov a, cs
000000E2 C1                   582  	push ax
000000E3 C7                   583  	push hl
000000E4                      584  	;***      272 : {
000000E4                      585  	;***      273 :     volatile uint8_t err_type;
000000E4                      586  	;***      274 :     volatile uint8_t sio_dummy;
000000E4                      587  	;***      275 : 
000000E4                      588  	;***      276 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      589  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 276
000000E4 AF0201               590  	movw ax, !0x0102
000000E7 60                   591  	mov a, x
000000E8 5C01                 592  	and a, #0x01
000000EA 9800                 593  	mov [sp+0x00], a
000000EC                      594  	;***      277 :     SIR01 = (uint16_t)err_type;
000000EC                      595  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 277
000000EC 8800                 596  	mov a, [sp+0x00]
000000EE 318E                 597  	shrw ax, 8+0x00000
000000F0 BF0A01               598  	movw !0x010A, ax
000000F3                      599  	;***      278 : 
000000F3                      600  	;***      279 :     if (1U == err_type)
000000F3                      601  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 279
000000F3 8800                 602  	mov a, [sp+0x00]
000000F5 91                   603  	dec a
000000F6 DF00                 604  	bnz $.BB@LABEL@11_2
000000F8                      605  .BB@LABEL@11_1:	; if_then_bb
000000F8                      606  	;***      280 :     {
000000F8                      607  	;***      281 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      608  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 281
000000F8 8800                 609  	mov a, [sp+0x00]
000000FA FC000000             610  	call !!_r_csi01_callback_error@1
000000FE EF00                 611  	br $.BB@LABEL@11_15
00000100                      612  .BB@LABEL@11_2:	; if_else_bb
00000100                      613  	;***      282 :     }
00000100                      614  	;***      283 :     else
00000100                      615  	;***      284 :     {
00000100                      616  	;***      285 :         if (g_csi01_tx_count > 0U)
00000100                      617  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 285
00000100 AF0000               618  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   619  	clrw bc
00000104 43                   620  	cmpw ax, bc
00000105 DF00                 621  	bnz $.BB@LABEL@11_8
00000107                      622  .BB@LABEL@11_3:	; if_else_bb42
00000107                      623  	;***      286 :         {
00000107                      624  	;***      287 :             if (0U != gp_csi01_rx_address)
00000107                      625  	;***      288 :             {
00000107                      626  	;***      289 :                 *gp_csi01_rx_address = SIO01;
00000107                      627  	;***      290 :                 gp_csi01_rx_address++;
00000107                      628  	;***      291 :             }
00000107                      629  	;***      292 :             else
00000107                      630  	;***      293 :             {
00000107                      631  	;***      294 :                 sio_dummy = SIO01;
00000107                      632  	;***      295 :             }
00000107                      633  	;***      296 : 
00000107                      634  	;***      297 :             if (0U != gp_csi01_tx_address)
00000107                      635  	;***      298 :             {
00000107                      636  	;***      299 :                 SIO01 = *gp_csi01_tx_address;
00000107                      637  	;***      300 :                 gp_csi01_tx_address++;
00000107                      638  	;***      301 :             }
00000107                      639  	;***      302 :             else
00000107                      640  	;***      303 :             {
00000107                      641  	;***      304 :                 SIO01 = 0xFFU;
00000107                      642  	;***      305 :             }
00000107                      643  	;***      306 : 
00000107                      644  	;***      307 :             g_csi01_tx_count--;
00000107                      645  	;***      308 :         }
00000107                      646  	;***      309 :         else 
00000107                      647  	;***      310 :         {
00000107                      648  	;***      311 :             if (0U == g_csi01_tx_count)
00000107                      649  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 311
00000107 AF0000               650  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   651  	cmpw ax, bc
0000010B DF00                 652  	bnz $.BB@LABEL@11_7
0000010D                      653  .BB@LABEL@11_4:	; if_then_bb47
0000010D                      654  	;***      312 :             {
0000010D                      655  	;***      313 :                 if (0U != gp_csi01_rx_address)
0000010D                      656  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 313
0000010D AF0000               657  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   658  	cmpw ax, bc
00000111 DF00                 659  	bnz $.BB@LABEL@11_6
00000113                      660  .BB@LABEL@11_5:	; if_else_bb55
00000113                      661  	;***      314 :                 {
00000113                      662  	;***      315 :                     *gp_csi01_rx_address = SIO01;
00000113                      663  	;***      316 :                 }
00000113                      664  	;***      317 :                 else
00000113                      665  	;***      318 :                 {
00000113                      666  	;***      319 :                     sio_dummy = SIO01;
00000113                      667  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 319
00000113 8D12                 668  	mov a, 0xFFF12
00000115 9801                 669  	mov [sp+0x01], a
00000117 EF00                 670  	br $.BB@LABEL@11_7
00000119                      671  .BB@LABEL@11_6:	; if_then_bb52
00000119 14                   672  	movw de, ax
0000011A                      673  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 315
0000011A 8D12                 674  	mov a, 0xFFF12
0000011C 99                   675  	mov [de], a
0000011D                      676  .BB@LABEL@11_7:	; if_break_bb59
0000011D                      677  	;***      320 :                 }
0000011D                      678  	;***      321 :             }
0000011D                      679  	;***      322 : 
0000011D                      680  	;***      323 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      681  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 323
0000011D FC000000             682  	call !!_r_csi01_callback_sendend@1
00000121                      683  	;***      324 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      684  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 324
00000121 FC000000             685  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 686  	br $.BB@LABEL@11_15
00000127                      687  .BB@LABEL@11_8:	; if_then_bb16
00000127                      688  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 287
00000127 AF0000               689  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   690  	cmpw ax, bc
0000012B DF00                 691  	bnz $.BB@LABEL@11_10
0000012D                      692  .BB@LABEL@11_9:	; if_else_bb26
0000012D                      693  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 294
0000012D 8D12                 694  	mov a, 0xFFF12
0000012F 9801                 695  	mov [sp+0x01], a
00000131 EF00                 696  	br $.BB@LABEL@11_11
00000133                      697  .BB@LABEL@11_10:	; if_then_bb21
00000133 14                   698  	movw de, ax
00000134                      699  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 289
00000134 8D12                 700  	mov a, 0xFFF12
00000136 99                   701  	mov [de], a
00000137                      702  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 290
00000137 A20000               703  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      704  .BB@LABEL@11_11:	; if_break_bb
0000013A                      705  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 297
0000013A AF0000               706  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   707  	cmpw ax, bc
0000013E DF00                 708  	bnz $.BB@LABEL@11_13
00000140                      709  .BB@LABEL@11_12:	; if_else_bb38
00000140                      710  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 304
00000140 CD12FF               711  	mov 0xFFF12, #0xFF
00000143 EF00                 712  	br $.BB@LABEL@11_14
00000145                      713  .BB@LABEL@11_13:	; if_then_bb32
00000145 14                   714  	movw de, ax
00000146                      715  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
00000146 89                   716  	mov a, [de]
00000147 9D12                 717  	mov 0xFFF12, a
00000149                      718  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 300
00000149 A5                   719  	incw de
0000014A 15                   720  	movw ax, de
0000014B BF0000               721  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      722  .BB@LABEL@11_14:	; if_break_bb39
0000014E                      723  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 307
0000014E B20000               724  	decw !LOWW(_g_csi01_tx_count)
00000151                      725  .BB@LABEL@11_15:	; if_break_bb39
00000151 C6                   726  	pop hl
00000152 C0                   727  	pop ax
00000153 9EFC                 728  	mov cs, a
00000155 60                   729  	mov a, x
00000156 9EFD                 730  	mov es, a
00000158 C6                   731  	pop hl
00000159 C4                   732  	pop de
0000015A C2                   733  	pop bc
0000015B C0                   734  	pop ax
0000015C                      735  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 327
0000015C 61FC                 736  	reti
0000002F                      737  	.SECTION .textf,TEXTF
0000002F                      738  _r_csi01_callback_receiveend@1:
0000002F                      739  	.STACK _r_csi01_callback_receiveend@1 = 4
0000002F                      740  	;***      325 :         }
0000002F                      741  	;***      326 :     }
0000002F                      742  	;***      327 : }
0000002F                      743  	;***      328 : 
0000002F                      744  	;***      329 : /***********************************************************************************************************************
0000002F                      745  	;***      330 : * Function Name: r_csi01_callback_receiveend
0000002F                      746  	;***      331 : * Description  : This function is a callback function when CSI01 finishes reception.
0000002F                      747  	;***      332 : * Arguments    : None
0000002F                      748  	;***      333 : * Return Value : None
0000002F                      749  	;***      334 : ***********************************************************************************************************************/
0000002F                      750  	;***      335 : static void r_csi01_callback_receiveend(void)
0000002F                      751  	;***      336 : {
0000002F                      752  	;***      337 :     /* Start user code. Do not edit comment generated here */
0000002F                      753  	;***      338 : 	g_csi_rev_end++;
0000002F                      754  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 338
0000002F A00000               755  	inc !LOWW(_g_csi_rev_end)
00000032                      756  	;***      339 : 	R_CSI01_Stop();
00000032                      757  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 339
00000032 EC000000             758  	br !!_R_CSI01_Stop
00000036                      759  _r_csi01_callback_error@1:
00000036                      760  	.STACK _r_csi01_callback_error@1 = 4
00000036                      761  	;***      340 :     /* End user code. Do not edit comment generated here */
00000036                      762  	;***      341 : }
00000036                      763  	;***      342 : 
00000036                      764  	;***      343 : /***********************************************************************************************************************
00000036                      765  	;***      344 : * Function Name: r_csi01_callback_error
00000036                      766  	;***      345 : * Description  : This function is a callback function when CSI01 reception error occurs.
00000036                      767  	;***      346 : * Arguments    : err_type -
00000036                      768  	;***      347 : *                    error type value
00000036                      769  	;***      348 : * Return Value : None
00000036                      770  	;***      349 : ***********************************************************************************************************************/
00000036                      771  	;***      350 : static void r_csi01_callback_error(uint8_t err_type)
00000036                      772  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 350
00000036 D7                   773  	ret
00000037                      774  _r_csi01_callback_sendend@1:
00000037                      775  	.STACK _r_csi01_callback_sendend@1 = 4
00000037                      776  	;***      351 : {
00000037                      777  	;***      352 :     /* Start user code. Do not edit comment generated here */
00000037                      778  	;***      353 : 
00000037                      779  	;***      354 :     /* End user code. Do not edit comment generated here */
00000037                      780  	;***      355 : }
00000037                      781  	;***      356 : 
00000037                      782  	;***      357 : /***********************************************************************************************************************
00000037                      783  	;***      358 : * Function Name: r_csi01_callback_sendend
00000037                      784  	;***      359 : * Description  : This function is a callback function when CSI01 finishes transmission.
00000037                      785  	;***      360 : * Arguments    : None
00000037                      786  	;***      361 : * Return Value : None
00000037                      787  	;***      362 : ***********************************************************************************************************************/
00000037                      788  	;***      363 : static void r_csi01_callback_sendend(void)
00000037                      789  	;***      364 : {
00000037                      790  	;***      365 :     /* Start user code. Do not edit comment generated here */
00000037                      791  	;***      366 : 	g_csi_send_end++;
00000037                      792  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 366
00000037 A00000               793  	inc !LOWW(_g_csi_send_end)
0000003A D7                   794  	ret
0000015E                      795  	.SECTION .text,TEXT
0000015E                      796  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      797  _r_uart2_interrupt_receive@1:
0000015E                      798  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      799  	;***      367 :     /* End user code. Do not edit comment generated here */
0000015E                      800  	;***      368 : }
0000015E                      801  	;***      369 : 
0000015E                      802  	;***      370 : /***********************************************************************************************************************
0000015E                      803  	;***      371 : * Function Name: r_uart2_interrupt_receive
0000015E                      804  	;***      372 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      805  	;***      373 : * Arguments    : None
0000015E                      806  	;***      374 : * Return Value : None
0000015E                      807  	;***      375 : ***********************************************************************************************************************/
0000015E                      808  	;***      376 : static void __near r_uart2_interrupt_receive(void)
0000015E                      809  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 376
0000015E C1                   810  	push ax
0000015F C3                   811  	push bc
00000160 C5                   812  	push de
00000161 C7                   813  	push hl
00000162 8EFD                 814  	mov a, es
00000164 70                   815  	mov x, a
00000165 8EFC                 816  	mov a, cs
00000167 C1                   817  	push ax
00000168 C7                   818  	push hl
00000169                      819  	;***      377 : {
00000169                      820  	;***      378 :     volatile uint8_t rx_data;
00000169                      821  	;***      379 :     volatile uint8_t err_type;
00000169                      822  	;***      380 :     
00000169                      823  	;***      381 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      824  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 381
00000169 AF4201               825  	movw ax, !0x0142
0000016C 60                   826  	mov a, x
0000016D 5C07                 827  	and a, #0x07
0000016F 9800                 828  	mov [sp+0x00], a
00000171                      829  	;***      382 :     SIR11 = (uint16_t)err_type;
00000171                      830  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 382
00000171 8800                 831  	mov a, [sp+0x00]
00000173 318E                 832  	shrw ax, 8+0x00000
00000175 BF4A01               833  	movw !0x014A, ax
00000178                      834  	;***      383 : 
00000178                      835  	;***      384 :     if (err_type != 0U)
00000178                      836  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 384
00000178 8800                 837  	mov a, [sp+0x00]
0000017A D1                   838  	cmp0 a
0000017B DD00                 839  	bz $.BB@LABEL@15_2
0000017D                      840  .BB@LABEL@15_1:	; if_then_bb
0000017D                      841  	;***      385 :     {
0000017D                      842  	;***      386 :         r_uart2_callback_error(err_type);
0000017D                      843  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 386
0000017D 8800                 844  	mov a, [sp+0x00]
0000017F FC000000             845  	call !!_r_uart2_callback_error@1
00000183                      846  .BB@LABEL@15_2:	; if_break_bb
00000183                      847  	;***      387 :     }
00000183                      848  	;***      388 :     
00000183                      849  	;***      389 :     rx_data = RXD2;
00000183                      850  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 389
00000183 8E4A                 851  	mov a, 0xFFF4A
00000185 9801                 852  	mov [sp+0x01], a
00000187                      853  	;***      390 : 
00000187                      854  	;***      391 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      855  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
00000187 AF0000               856  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               857  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 858  	mov a, [sp+0x01]
0000018F 61D300               859  	bnh $.BB@LABEL@15_6
00000192                      860  .BB@LABEL@15_3:	; if_then_bb18
00000192                      861  	;***      392 :     {
00000192                      862  	;***      393 :         *gp_uart2_rx_address = rx_data;
00000192                      863  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 393
00000192 EB0000               864  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   865  	mov [de], a
00000196                      866  	;***      394 :         gp_uart2_rx_address++;
00000196                      867  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 394
00000196 A20000               868  	incw !LOWW(_gp_uart2_rx_address)
00000199                      869  	;***      395 :         g_uart2_rx_count++;
00000199                      870  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
00000199 A20000               871  	incw !LOWW(_g_uart2_rx_count)
0000019C                      872  	;***      396 : 
0000019C                      873  	;***      397 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      874  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
0000019C AF0000               875  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               876  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 877  	sknz
000001A4                      878  .BB@LABEL@15_4:	; if_then_bb30
000001A4                      879  	;***      398 :         {
000001A4                      880  	;***      399 :             r_uart2_callback_receiveend();
000001A4                      881  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 399
000001A4 FC000000             882  	call !!_r_uart2_callback_receiveend@1
000001A8                      883  .BB@LABEL@15_5:	; return
000001A8 C6                   884  	pop hl
000001A9 C0                   885  	pop ax
000001AA 9EFC                 886  	mov cs, a
000001AC 60                   887  	mov a, x
000001AD 9EFD                 888  	mov es, a
000001AF C6                   889  	pop hl
000001B0 C4                   890  	pop de
000001B1 C2                   891  	pop bc
000001B2 C0                   892  	pop ax
000001B3                      893  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 406
000001B3 61FC                 894  	reti
000001B5                      895  .BB@LABEL@15_6:	; if_else_bb
000001B5                      896  	;***      400 :         }
000001B5                      897  	;***      401 :     }
000001B5                      898  	;***      402 :     else
000001B5                      899  	;***      403 :     {
000001B5                      900  	;***      404 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      901  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 404
000001B5 318E                 902  	shrw ax, 8+0x00000
000001B7 FC000000             903  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 904  	br $.BB@LABEL@15_5
000001BD                      905  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      906  _r_uart2_interrupt_send@1:
000001BD                      907  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      908  	;***      405 :     }
000001BD                      909  	;***      406 : }
000001BD                      910  	;***      407 : 
000001BD                      911  	;***      408 : /***********************************************************************************************************************
000001BD                      912  	;***      409 : * Function Name: r_uart2_interrupt_send
000001BD                      913  	;***      410 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      914  	;***      411 : * Arguments    : None
000001BD                      915  	;***      412 : * Return Value : None
000001BD                      916  	;***      413 : ***********************************************************************************************************************/
000001BD                      917  	;***      414 : static void __near r_uart2_interrupt_send(void)
000001BD                      918  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 414
000001BD C1                   919  	push ax
000001BE C3                   920  	push bc
000001BF C5                   921  	push de
000001C0 C7                   922  	push hl
000001C1 8EFD                 923  	mov a, es
000001C3 70                   924  	mov x, a
000001C4 8EFC                 925  	mov a, cs
000001C6 C1                   926  	push ax
000001C7                      927  	;***      415 : {
000001C7                      928  	;***      416 :     if (g_uart2_tx_count > 0U)
000001C7                      929  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 416
000001C7 AF0000               930  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   931  	clrw bc
000001CB 43                   932  	cmpw ax, bc
000001CC DF00                 933  	bnz $.BB@LABEL@16_3
000001CE                      934  .BB@LABEL@16_1:	; if_else_bb
000001CE                      935  	;***      417 :     {
000001CE                      936  	;***      418 :         TXD2 = *gp_uart2_tx_address;
000001CE                      937  	;***      419 :         gp_uart2_tx_address++;
000001CE                      938  	;***      420 :         g_uart2_tx_count--;
000001CE                      939  	;***      421 :     }
000001CE                      940  	;***      422 :     else
000001CE                      941  	;***      423 :     {
000001CE                      942  	;***      424 :         r_uart2_callback_sendend();
000001CE                      943  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 424
000001CE FC000000             944  	call !!_r_uart2_callback_sendend@1
000001D2                      945  .BB@LABEL@16_2:	; if_else_bb
000001D2 C0                   946  	pop ax
000001D3 9EFC                 947  	mov cs, a
000001D5 60                   948  	mov a, x
000001D6 9EFD                 949  	mov es, a
000001D8 C6                   950  	pop hl
000001D9 C4                   951  	pop de
000001DA C2                   952  	pop bc
000001DB C0                   953  	pop ax
000001DC                      954  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 426
000001DC 61FC                 955  	reti
000001DE                      956  .BB@LABEL@16_3:	; if_then_bb
000001DE                      957  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
000001DE EB0000               958  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   959  	mov a, [de]
000001E2 9E48                 960  	mov 0xFFF48, a
000001E4                      961  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 419
000001E4 A5                   962  	incw de
000001E5 15                   963  	movw ax, de
000001E6 BF0000               964  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      965  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 420
000001E9 B20000               966  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 967  	br $.BB@LABEL@16_2
0000003B                      968  	.SECTION .textf,TEXTF
0000003B                      969  _r_uart2_callback_receiveend@1:
0000003B                      970  	.STACK _r_uart2_callback_receiveend@1 = 4
0000003B                      971  	;***      425 :     }
0000003B                      972  	;***      426 : }
0000003B                      973  	;***      427 : 
0000003B                      974  	;***      428 : /***********************************************************************************************************************
0000003B                      975  	;***      429 : * Function Name: r_uart2_callback_receiveend
0000003B                      976  	;***      430 : * Description  : This function is a callback function when UART2 finishes reception.
0000003B                      977  	;***      431 : * Arguments    : None
0000003B                      978  	;***      432 : * Return Value : None
0000003B                      979  	;***      433 : ***********************************************************************************************************************/
0000003B                      980  	;***      434 : static void r_uart2_callback_receiveend(void)
0000003B                      981  	;***      435 : {
0000003B                      982  	;***      436 :     /* Start user code. Do not edit comment generated here */
0000003B                      983  	;***      437 : //	R_UART2_Receive(g_rx_data, 32);
0000003B                      984  	;***      438 : //	R_UART2_Stop();
0000003B                      985  	;***      439 : //	R_UART2_Start();
0000003B                      986  	;***      440 : 
0000003B                      987  	;***      441 : 	R_UART2_Receive(g_rx_data, 6);
0000003B                      988  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
0000003B 320600               989  	movw bc, #0x0006
0000003E 300000               990  	movw ax, #LOWW(_g_rx_data)
00000041 FC000000             991  	call !!_R_UART2_Receive
00000045                      992  	;***      442 : 	send_response_flag = 1;
00000045                      993  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
00000045 E50000               994  	oneb !LOWW(_send_response_flag)
00000048                      995  	;***      443 : //	isCommand(g_rx_data);
00000048                      996  	;***      444 : 	if(1){
00000048                      997  	;***      445 : 		g_uart2_fault = 0;
00000048                      998  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
00000048 F50000               999  	clrb !LOWW(_g_uart2_fault)
0000004B                     1000  	;***      446 : 		if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
0000004B                     1001  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
0000004B 40000002            1002  	cmp !LOWW(_g_rx_data+0x00001), #0x02
0000004F 8F0000              1003  	mov a, !LOWW(_g_rx_data)
00000052 DF00                1004  	bnz $.BB@LABEL@17_5
00000054                     1005  .BB@LABEL@17_1:	; entry
00000054 4C52                1006  	cmp a, #0x52
00000056 DF00                1007  	bnz $.BB@LABEL@17_5
00000058                     1008  .BB@LABEL@17_2:	; if_then_bb12
00000058                     1009  	;***      447 : 			send_response_time_flag = 1;
00000058                     1010  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 447
00000058 E50000              1011  	oneb !LOWW(_send_response_time_flag)
0000005B E6                  1012  	onew ax
0000005C                     1013  	;***      448 : 			g_timerSetting.t51++;
0000005C                     1014  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 448
0000005C 020000              1015  	addw ax, !LOWW(_g_timerSetting+0x00024)
0000005F BF0000              1016  	movw !LOWW(_g_timerSetting+0x00024), ax
00000062 F6                  1017  	clrw ax
00000063 61D8                1018  	sknc
00000065                     1019  .BB@LABEL@17_3:	; if_then_bb12
00000065 A1                  1020  	incw ax
00000066                     1021  .BB@LABEL@17_4:	; if_then_bb12
00000066 020000              1022  	addw ax, !LOWW(_g_timerSetting+0x00026)
00000069 BF0000              1023  	movw !LOWW(_g_timerSetting+0x00026), ax
0000006C                     1024  .BB@LABEL@17_5:	; if_break_bb16
0000006C                     1025  	;***      449 : 		}
0000006C                     1026  	;***      450 : //		if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_NUMBER)){
0000006C                     1027  	;***      451 : //			R_UART2_Receive(g_rx_data, sizeof(struct Number_Setting_s)-1);
0000006C                     1028  	;***      452 : //		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_TIME)){
0000006C                     1029  	;***      453 : //			R_UART2_Receive(g_rx_data, sizeof(struct Timer_Setting_s)-1);
0000006C                     1030  	;***      454 : //		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
0000006C                     1031  	;***      455 : //			g_timerSetting.crc = crc8_1((uint8_t *)&g_timerSetting, 68);
0000006C                     1032  	;***      456 : //			R_UART2_Send((uint8_t *)&g_timerSetting, 69);
0000006C                     1033  	;***      457 : //			g_timerSetting.t51++;
0000006C                     1034  	;***      458 : //		}
0000006C                     1035  	;***      459 : 	}else{
0000006C                     1036  	;***      460 : 		R_UART2_Receive(g_rx_data, 6);
0000006C                     1037  	;***      461 : 		g_uart2_fault = 1;
0000006C                     1038  	;***      462 : 	}
0000006C                     1039  	;***      463 : ////	if((g_rx_data[0] == H_READ)|(g_rx_data[0] == H_SET)|(g_rx_data[0] == H_ALARM)|(g_rx_data[0] == H_CLEAR)|(g_rx_data[0] == H_ERROR)){
0000006C                     1040  	;***      464 : ////
0000006C                     1041  	;***      465 : ////	}else{
0000006C                     1042  	;***      466 : ////	}
0000006C                     1043  	;***      467 : 	g_uart2_receive++;
0000006C                     1044  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 467
0000006C A00000              1045  	inc !LOWW(_g_uart2_receive)
0000006F D7                  1046  	ret
00000070                     1047  _r_uart2_callback_softwareoverrun@1:
00000070                     1048  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
00000070                     1049  	;***      468 :     /* End user code. Do not edit comment generated here */
00000070                     1050  	;***      469 : }
00000070                     1051  	;***      470 : 
00000070                     1052  	;***      471 : /***********************************************************************************************************************
00000070                     1053  	;***      472 : * Function Name: r_uart2_callback_softwareoverrun
00000070                     1054  	;***      473 : * Description  : This function is a callback function when UART2 receives an overflow data.
00000070                     1055  	;***      474 : * Arguments    : rx_data -
00000070                     1056  	;***      475 : *                    receive data
00000070                     1057  	;***      476 : * Return Value : None
00000070                     1058  	;***      477 : ***********************************************************************************************************************/
00000070                     1059  	;***      478 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
00000070                     1060  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 478
00000070 D7                  1061  	ret
00000071                     1062  _r_uart2_callback_sendend@1:
00000071                     1063  	.STACK _r_uart2_callback_sendend@1 = 4
00000071                     1064  	;***      479 : {
00000071                     1065  	;***      480 :     /* Start user code. Do not edit comment generated here */
00000071                     1066  	;***      481 :     /* End user code. Do not edit comment generated here */
00000071                     1067  	;***      482 : }
00000071                     1068  	;***      483 : 
00000071                     1069  	;***      484 : /***********************************************************************************************************************
00000071                     1070  	;***      485 : * Function Name: r_uart2_callback_sendend
00000071                     1071  	;***      486 : * Description  : This function is a callback function when UART2 finishes transmission.
00000071                     1072  	;***      487 : * Arguments    : None
00000071                     1073  	;***      488 : * Return Value : None
00000071                     1074  	;***      489 : ***********************************************************************************************************************/
00000071                     1075  	;***      490 : static void r_uart2_callback_sendend(void)
00000071                     1076  	;***      491 : {
00000071                     1077  	;***      492 :     /* Start user code. Do not edit comment generated here */
00000071                     1078  	;***      493 : 	g_uart2_sendend++;
00000071                     1079  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 493
00000071 A00000              1080  	inc !LOWW(_g_uart2_sendend)
00000074 D7                  1081  	ret
00000075                     1082  _r_uart2_callback_error@1:
00000075                     1083  	.STACK _r_uart2_callback_error@1 = 4
00000075                     1084  	;***      494 :     /* End user code. Do not edit comment generated here */
00000075                     1085  	;***      495 : }
00000075                     1086  	;***      496 : 
00000075                     1087  	;***      497 : /***********************************************************************************************************************
00000075                     1088  	;***      498 : * Function Name: r_uart2_callback_error
00000075                     1089  	;***      499 : * Description  : This function is a callback function when UART2 reception error occurs.
00000075                     1090  	;***      500 : * Arguments    : err_type -
00000075                     1091  	;***      501 : *                    error type value
00000075                     1092  	;***      502 : * Return Value : None
00000075                     1093  	;***      503 : ***********************************************************************************************************************/
00000075                     1094  	;***      504 : static void r_uart2_callback_error(uint8_t err_type)
00000075                     1095  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 504
00000075 D7                  1096  	ret
000001EE                     1097  	.SECTION .text,TEXT
000001EE                     1098  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1099  _r_uart3_interrupt_receive@1:
000001EE                     1100  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1101  	;***      505 : {
000001EE                     1102  	;***      506 :     /* Start user code. Do not edit comment generated here */
000001EE                     1103  	;***      507 :     /* End user code. Do not edit comment generated here */
000001EE                     1104  	;***      508 : }
000001EE                     1105  	;***      509 : 
000001EE                     1106  	;***      510 : /***********************************************************************************************************************
000001EE                     1107  	;***      511 : * Function Name: r_uart3_interrupt_receive
000001EE                     1108  	;***      512 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1109  	;***      513 : * Arguments    : None
000001EE                     1110  	;***      514 : * Return Value : None
000001EE                     1111  	;***      515 : ***********************************************************************************************************************/
000001EE                     1112  	;***      516 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1113  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 516
000001EE C1                  1114  	push ax
000001EF C3                  1115  	push bc
000001F0 C5                  1116  	push de
000001F1 C7                  1117  	push hl
000001F2 8EFD                1118  	mov a, es
000001F4 70                  1119  	mov x, a
000001F5 8EFC                1120  	mov a, cs
000001F7 C1                  1121  	push ax
000001F8 C7                  1122  	push hl
000001F9                     1123  	;***      517 : {
000001F9                     1124  	;***      518 :     volatile uint8_t rx_data;
000001F9                     1125  	;***      519 :     volatile uint8_t err_type;
000001F9                     1126  	;***      520 :     
000001F9                     1127  	;***      521 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1128  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 521
000001F9 AF4601              1129  	movw ax, !0x0146
000001FC 60                  1130  	mov a, x
000001FD 5C07                1131  	and a, #0x07
000001FF 9800                1132  	mov [sp+0x00], a
00000201                     1133  	;***      522 :     SIR13 = (uint16_t)err_type;
00000201                     1134  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 522
00000201 8800                1135  	mov a, [sp+0x00]
00000203 318E                1136  	shrw ax, 8+0x00000
00000205 BF4E01              1137  	movw !0x014E, ax
00000208                     1138  	;***      523 : 
00000208                     1139  	;***      524 :     if (err_type != 0U)
00000208                     1140  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 524
00000208 8800                1141  	mov a, [sp+0x00]
0000020A D1                  1142  	cmp0 a
0000020B DD00                1143  	bz $.BB@LABEL@21_2
0000020D                     1144  .BB@LABEL@21_1:	; if_then_bb
0000020D                     1145  	;***      525 :     {
0000020D                     1146  	;***      526 :         r_uart3_callback_error(err_type);
0000020D                     1147  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 526
0000020D 8800                1148  	mov a, [sp+0x00]
0000020F FC000000            1149  	call !!_r_uart3_callback_error@1
00000213                     1150  .BB@LABEL@21_2:	; if_break_bb
00000213                     1151  	;***      527 :     }
00000213                     1152  	;***      528 :     
00000213                     1153  	;***      529 :     rx_data = RXD3;
00000213                     1154  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 529
00000213 8D16                1155  	mov a, 0xFFF16
00000215 9801                1156  	mov [sp+0x01], a
00000217                     1157  	;***      530 : 
00000217                     1158  	;***      531 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1159  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 531
00000217 AF0000              1160  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1161  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1162  	mov a, [sp+0x01]
0000021F 61D300              1163  	bnh $.BB@LABEL@21_6
00000222                     1164  .BB@LABEL@21_3:	; if_then_bb18
00000222                     1165  	;***      532 :     {
00000222                     1166  	;***      533 :         *gp_uart3_rx_address = rx_data;
00000222                     1167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 533
00000222 EB0000              1168  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1169  	mov [de], a
00000226                     1170  	;***      534 :         gp_uart3_rx_address++;
00000226                     1171  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 534
00000226 A20000              1172  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1173  	;***      535 :         g_uart3_rx_count++;
00000229                     1174  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 535
00000229 A20000              1175  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1176  	;***      536 : 
0000022C                     1177  	;***      537 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1178  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 537
0000022C AF0000              1179  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1180  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1181  	sknz
00000234                     1182  .BB@LABEL@21_4:	; if_then_bb30
00000234                     1183  	;***      538 :         {
00000234                     1184  	;***      539 :             r_uart3_callback_receiveend();
00000234                     1185  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 539
00000234 FC000000            1186  	call !!_r_uart3_callback_receiveend@1
00000238                     1187  .BB@LABEL@21_5:	; return
00000238 C6                  1188  	pop hl
00000239 C0                  1189  	pop ax
0000023A 9EFC                1190  	mov cs, a
0000023C 60                  1191  	mov a, x
0000023D 9EFD                1192  	mov es, a
0000023F C6                  1193  	pop hl
00000240 C4                  1194  	pop de
00000241 C2                  1195  	pop bc
00000242 C0                  1196  	pop ax
00000243                     1197  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 546
00000243 61FC                1198  	reti
00000245                     1199  .BB@LABEL@21_6:	; if_else_bb
00000245                     1200  	;***      540 :         }
00000245                     1201  	;***      541 :     }
00000245                     1202  	;***      542 :     else
00000245                     1203  	;***      543 :     {
00000245                     1204  	;***      544 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1205  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000245 318E                1206  	shrw ax, 8+0x00000
00000247 FC000000            1207  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1208  	br $.BB@LABEL@21_5
0000024D                     1209  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1210  _r_uart3_interrupt_send@1:
0000024D                     1211  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1212  	;***      545 :     }
0000024D                     1213  	;***      546 : }
0000024D                     1214  	;***      547 : 
0000024D                     1215  	;***      548 : /***********************************************************************************************************************
0000024D                     1216  	;***      549 : * Function Name: r_uart3_interrupt_send
0000024D                     1217  	;***      550 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1218  	;***      551 : * Arguments    : None
0000024D                     1219  	;***      552 : * Return Value : None
0000024D                     1220  	;***      553 : ***********************************************************************************************************************/
0000024D                     1221  	;***      554 : static void __near r_uart3_interrupt_send(void)
0000024D                     1222  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 554
0000024D C1                  1223  	push ax
0000024E C3                  1224  	push bc
0000024F C5                  1225  	push de
00000250 C7                  1226  	push hl
00000251 8EFD                1227  	mov a, es
00000253 70                  1228  	mov x, a
00000254 8EFC                1229  	mov a, cs
00000256 C1                  1230  	push ax
00000257                     1231  	;***      555 : {
00000257                     1232  	;***      556 :     if (g_uart3_tx_count > 0U)
00000257                     1233  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 556
00000257 AF0000              1234  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1235  	clrw bc
0000025B 43                  1236  	cmpw ax, bc
0000025C DF00                1237  	bnz $.BB@LABEL@22_3
0000025E                     1238  .BB@LABEL@22_1:	; if_else_bb
0000025E                     1239  	;***      557 :     {
0000025E                     1240  	;***      558 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1241  	;***      559 :         gp_uart3_tx_address++;
0000025E                     1242  	;***      560 :         g_uart3_tx_count--;
0000025E                     1243  	;***      561 :     }
0000025E                     1244  	;***      562 :     else
0000025E                     1245  	;***      563 :     {
0000025E                     1246  	;***      564 :         r_uart3_callback_sendend();
0000025E                     1247  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 564
0000025E FC000000            1248  	call !!_r_uart3_callback_sendend@1
00000262                     1249  .BB@LABEL@22_2:	; if_else_bb
00000262 C0                  1250  	pop ax
00000263 9EFC                1251  	mov cs, a
00000265 60                  1252  	mov a, x
00000266 9EFD                1253  	mov es, a
00000268 C6                  1254  	pop hl
00000269 C4                  1255  	pop de
0000026A C2                  1256  	pop bc
0000026B C0                  1257  	pop ax
0000026C                     1258  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 566
0000026C 61FC                1259  	reti
0000026E                     1260  .BB@LABEL@22_3:	; if_then_bb
0000026E                     1261  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 558
0000026E EB0000              1262  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1263  	mov a, [de]
00000272 9D14                1264  	mov 0xFFF14, a
00000274                     1265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 559
00000274 A5                  1266  	incw de
00000275 15                  1267  	movw ax, de
00000276 BF0000              1268  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 560
00000279 B20000              1270  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1271  	br $.BB@LABEL@22_2
00000076                     1272  	.SECTION .textf,TEXTF
00000076                     1273  _r_uart3_callback_receiveend@1:
00000076                     1274  	.STACK _r_uart3_callback_receiveend@1 = 4
00000076                     1275  	;***      565 :     }
00000076                     1276  	;***      566 : }
00000076                     1277  	;***      567 : 
00000076                     1278  	;***      568 : /***********************************************************************************************************************
00000076                     1279  	;***      569 : * Function Name: r_uart3_callback_receiveend
00000076                     1280  	;***      570 : * Description  : This function is a callback function when UART3 finishes reception.
00000076                     1281  	;***      571 : * Arguments    : None
00000076                     1282  	;***      572 : * Return Value : None
00000076                     1283  	;***      573 : ***********************************************************************************************************************/
00000076                     1284  	;***      574 : static void r_uart3_callback_receiveend(void)
00000076                     1285  	;***      575 : {
00000076                     1286  	;***      576 :     /* Start user code. Do not edit comment generated here */
00000076                     1287  	;***      577 : 	R_UART3_Receive(rec_buf, 7);
00000076                     1288  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 577
00000076 320700              1289  	movw bc, #0x0007
00000079 300000              1290  	movw ax, #LOWW(_rec_buf)
0000007C EC000000            1291  	br !!_R_UART3_Receive
00000080                     1292  _r_uart3_callback_softwareoverrun@1:
00000080                     1293  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000080                     1294  	;***      578 :     /* End user code. Do not edit comment generated here */
00000080                     1295  	;***      579 : }
00000080                     1296  	;***      580 : 
00000080                     1297  	;***      581 : /***********************************************************************************************************************
00000080                     1298  	;***      582 : * Function Name: r_uart3_callback_softwareoverrun
00000080                     1299  	;***      583 : * Description  : This function is a callback function when UART3 receives an overflow data.
00000080                     1300  	;***      584 : * Arguments    : rx_data -
00000080                     1301  	;***      585 : *                    receive data
00000080                     1302  	;***      586 : * Return Value : None
00000080                     1303  	;***      587 : ***********************************************************************************************************************/
00000080                     1304  	;***      588 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
00000080                     1305  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 588
00000080 D7                  1306  	ret
00000081                     1307  _r_uart3_callback_sendend@1:
00000081                     1308  	.STACK _r_uart3_callback_sendend@1 = 4
00000081                     1309  	;***      589 : {
00000081                     1310  	;***      590 :     /* Start user code. Do not edit comment generated here */
00000081                     1311  	;***      591 :     /* End user code. Do not edit comment generated here */
00000081                     1312  	;***      592 : }
00000081                     1313  	;***      593 : 
00000081                     1314  	;***      594 : /***********************************************************************************************************************
00000081                     1315  	;***      595 : * Function Name: r_uart3_callback_sendend
00000081                     1316  	;***      596 : * Description  : This function is a callback function when UART3 finishes transmission.
00000081                     1317  	;***      597 : * Arguments    : None
00000081                     1318  	;***      598 : * Return Value : None
00000081                     1319  	;***      599 : ***********************************************************************************************************************/
00000081                     1320  	;***      600 : static void r_uart3_callback_sendend(void)
00000081                     1321  	;***      601 : {
00000081                     1322  	;***      602 :     /* Start user code. Do not edit comment generated here */
00000081                     1323  	;***      603 : 	g_uart3_sendend++;
00000081                     1324  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
00000081 A00000              1325  	inc !LOWW(_g_uart3_sendend)
00000084 D7                  1326  	ret
00000085                     1327  _r_uart3_callback_error@1:
00000085                     1328  	.STACK _r_uart3_callback_error@1 = 4
00000085                     1329  	;***      604 :     /* End user code. Do not edit comment generated here */
00000085                     1330  	;***      605 : }
00000085                     1331  	;***      606 : 
00000085                     1332  	;***      607 : /***********************************************************************************************************************
00000085                     1333  	;***      608 : * Function Name: r_uart3_callback_error
00000085                     1334  	;***      609 : * Description  : This function is a callback function when UART3 reception error occurs.
00000085                     1335  	;***      610 : * Arguments    : err_type -
00000085                     1336  	;***      611 : *                    error type value
00000085                     1337  	;***      612 : * Return Value : None
00000085                     1338  	;***      613 : ***********************************************************************************************************************/
00000085                     1339  	;***      614 : static void r_uart3_callback_error(uint8_t err_type)
00000085                     1340  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 614
00000085 D7                  1341  	ret
00000086                     1342  	;***      615 : {
00000086                     1343  	;***      616 :     /* Start user code. Do not edit comment generated here */
00000086                     1344  	;***      617 :     /* End user code. Do not edit comment generated here */
00000086                     1345  	;***      618 : }
00000086                     1346  	;***      619 : 
00000086                     1347  	;***      620 : /* Start user code for adding. Do not edit comment generated here */
00000086                     1348  	;***      621 : /* End user code. Do not edit comment generated here */
00000000                     1349  	.SECTION .bss,BSS
00000000                     1350  _send_response_flag:
00000000                     1351  	.DS (1)
00000001                     1352  _send_response_time_flag:
00000001                     1353  	.DS (1)
00000002                     1354  _send_response_number_flag:
00000002                     1355  	.DS (1)
00000003                     1356  _g_csi_count:
00000003                     1357  	.DS (1)
00000004                     1358  _g_csi_err:
00000004                     1359  	.DS (1)
00000005                     1360  _g_csi_send_end:
00000005                     1361  	.DS (1)
00000006                     1362  _g_csi_rev_end:
00000006                     1363  	.DS (1)
00000007                     1364  _g_uart1_send:
00000007                     1365  	.DS (1)
00000008                     1366  _g_uart2_sendend:
00000008                     1367  	.DS (1)
00000009                     1368  _g_uart2_receive:
00000009                     1369  	.DS (1)
0000000A                     1370  _g_rx_data:
0000000A                     1371  	.DS (32)
0000002A                     1372  _g_uart2_fault:
0000002A                     1373  	.DS (1)
0000002B                     1374  _g_uart3_sendend:
0000002B                     1375  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               134 (00000086) .textf
BSS                  44 (0000002C) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl000\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

