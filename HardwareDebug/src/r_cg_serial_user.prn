RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Tue Dec 07 09:51:55 2021
00000000                       19  
00000000                       20  	.EXTERN _rec_buf
00000000                       21  	.EXTERN _gp_uart1_tx_address
00000000                       22  	.EXTERN _g_uart1_tx_count
00000000                       23  	.EXTERN _gp_uart1_rx_address
00000000                       24  	.EXTERN _g_uart1_rx_count
00000000                       25  	.EXTERN _g_uart1_rx_length
00000000                       26  	.EXTERN _gp_csi00_tx_address
00000000                       27  	.EXTERN _g_csi00_tx_count
00000000                       28  	.EXTERN _gp_csi01_rx_address
00000000                       29  	.EXTERN _gp_csi01_tx_address
00000000                       30  	.EXTERN _g_csi01_tx_count
00000000                       31  	.EXTERN _gp_uart2_tx_address
00000000                       32  	.EXTERN _g_uart2_tx_count
00000000                       33  	.EXTERN _gp_uart2_rx_address
00000000                       34  	.EXTERN _g_uart2_rx_count
00000000                       35  	.EXTERN _g_uart2_rx_length
00000000                       36  	.EXTERN _gp_uart3_tx_address
00000000                       37  	.EXTERN _g_uart3_tx_count
00000000                       38  	.EXTERN _gp_uart3_rx_address
00000000                       39  	.EXTERN _g_uart3_rx_count
00000000                       40  	.EXTERN _g_uart3_rx_length
00000000                       41  	.PUBLIC _g_csi_count
00000000                       42  	.PUBLIC _g_csi_err
00000000                       43  	.PUBLIC _g_csi_send_end
00000000                       44  	.PUBLIC _g_csi_rev_end
00000000                       45  	.PUBLIC _g_uart1_end
00000000                       46  	.PUBLIC _g_uart2_send
00000000                       47  	.PUBLIC _g_uart2_receive
00000000                       48  	.PUBLIC _g_rx_data
00000000                       49  	.PUBLIC _g_uart2_fault
00000000                       50  	.PUBLIC _g_uart3_sendend
00000000                       51  	.EXTERN _R_CSI01_Stop
00000000                       52  	.EXTERN _R_UART2_Receive
00000000                       53  	.EXTERN _R_UART3_Receive
00000000                       54  
00000000                       55  	.SECTION .text,TEXT
00000000                       56  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                       57  _r_uart1_interrupt_receive@1:
00000000                       58  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                       59  	;***        1 : /***********************************************************************************************************************
00000000                       60  	;***        2 : * DISCLAIMER
00000000                       61  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       62  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       63  	;***        5 : * applicable laws, including copyright laws. 
00000000                       64  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       65  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       66  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       67  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       68  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       69  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       70  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       71  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       72  	;***       14 : * following link:
00000000                       73  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       74  	;***       16 : *
00000000                       75  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       76  	;***       18 : ***********************************************************************************************************************/
00000000                       77  	;***       19 : 
00000000                       78  	;***       20 : /***********************************************************************************************************************
00000000                       79  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       80  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       81  	;***       23 : * Device(s)    : R5F104ML
00000000                       82  	;***       24 : * Tool-Chain   : CCRL
00000000                       83  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       84  	;***       26 : * Creation Date: 30/11/2021
00000000                       85  	;***       27 : ***********************************************************************************************************************/
00000000                       86  	;***       28 : 
00000000                       87  	;***       29 : /***********************************************************************************************************************
00000000                       88  	;***       30 : Includes
00000000                       89  	;***       31 : ***********************************************************************************************************************/
00000000                       90  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       91  	;***       33 : #include "r_cg_serial.h"
00000000                       92  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                       93  	;***       35 : /* End user code. Do not edit comment generated here */
00000000                       94  	;***       36 : #include "r_cg_userdefine.h"
00000000                       95  	;***       37 : 
00000000                       96  	;***       38 : /***********************************************************************************************************************
00000000                       97  	;***       39 : Pragma directive
00000000                       98  	;***       40 : ***********************************************************************************************************************/
00000000                       99  	;***       41 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      100  	;***       42 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      101  	;***       43 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      102  	;***       44 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      103  	;***       45 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      104  	;***       46 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      105  	;***       47 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      106  	;***       48 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      107  	;***       49 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      108  	;***       50 : /* End user code. Do not edit comment generated here */
00000000                      109  	;***       51 : 
00000000                      110  	;***       52 : /***********************************************************************************************************************
00000000                      111  	;***       53 : Global variables and functions
00000000                      112  	;***       54 : ***********************************************************************************************************************/
00000000                      113  	;***       55 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      114  	;***       56 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      115  	;***       57 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      116  	;***       58 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      117  	;***       59 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      118  	;***       60 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      119  	;***       61 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      120  	;***       62 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      121  	;***       63 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      122  	;***       64 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      123  	;***       65 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      124  	;***       66 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      125  	;***       67 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      126  	;***       68 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      127  	;***       69 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      128  	;***       70 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      129  	;***       71 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      130  	;***       72 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      131  	;***       73 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      132  	;***       74 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      133  	;***       75 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      134  	;***       76 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      135  	;***       77 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      136  	;***       78 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      137  	;***       79 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      138  	;***       80 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      139  	;***       81 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      140  	;***       82 : /* Start user code for global. Do not edit comment generated here */
00000000                      141  	;***       83 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_end, g_uart2_send, g_uart2_receive;
00000000                      142  	;***       84 : uint8_t g_rx_data[32];
00000000                      143  	;***       85 : volatile uint8_t g_uart2_fault;
00000000                      144  	;***       86 : volatile uint8_t g_uart3_sendend;
00000000                      145  	;***       87 : /* End user code. Do not edit comment generated here */
00000000                      146  	;***       88 : 
00000000                      147  	;***       89 : /***********************************************************************************************************************
00000000                      148  	;***       90 : * Function Name: r_uart1_interrupt_receive
00000000                      149  	;***       91 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      150  	;***       92 : * Arguments    : None
00000000                      151  	;***       93 : * Return Value : None
00000000                      152  	;***       94 : ***********************************************************************************************************************/
00000000                      153  	;***       95 : static void __near r_uart1_interrupt_receive(void)
00000000                      154  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 95
00000000 C1                   155  	push ax
00000001 C3                   156  	push bc
00000002 C5                   157  	push de
00000003 C7                   158  	push hl
00000004 8EFD                 159  	mov a, es
00000006 70                   160  	mov x, a
00000007 8EFC                 161  	mov a, cs
00000009 C1                   162  	push ax
0000000A C7                   163  	push hl
0000000B                      164  	;***       96 : {
0000000B                      165  	;***       97 :     volatile uint8_t rx_data;
0000000B                      166  	;***       98 :     volatile uint8_t err_type;
0000000B                      167  	;***       99 :     
0000000B                      168  	;***      100 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      169  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 100
0000000B AF0601               170  	movw ax, !0x0106
0000000E 60                   171  	mov a, x
0000000F 5C07                 172  	and a, #0x07
00000011 9800                 173  	mov [sp+0x00], a
00000013                      174  	;***      101 :     SIR03 = (uint16_t)err_type;
00000013                      175  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 101
00000013 8800                 176  	mov a, [sp+0x00]
00000015 318E                 177  	shrw ax, 8+0x00000
00000017 BF0E01               178  	movw !0x010E, ax
0000001A                      179  	;***      102 : 
0000001A                      180  	;***      103 :     if (err_type != 0U)
0000001A                      181  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 103
0000001A 8800                 182  	mov a, [sp+0x00]
0000001C D1                   183  	cmp0 a
0000001D DD00                 184  	bz $.BB@LABEL@1_2
0000001F                      185  .BB@LABEL@1_1:	; if_then_bb
0000001F                      186  	;***      104 :     {
0000001F                      187  	;***      105 :         r_uart1_callback_error(err_type);
0000001F                      188  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 105
0000001F 8800                 189  	mov a, [sp+0x00]
00000021 FC000000             190  	call !!_r_uart1_callback_error@1
00000025                      191  .BB@LABEL@1_2:	; if_break_bb
00000025                      192  	;***      106 :     }
00000025                      193  	;***      107 :     
00000025                      194  	;***      108 :     rx_data = RXD1;
00000025                      195  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 108
00000025 8E46                 196  	mov a, 0xFFF46
00000027 9801                 197  	mov [sp+0x01], a
00000029                      198  	;***      109 : 
00000029                      199  	;***      110 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      200  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 110
00000029 AF0000               201  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               202  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 203  	mov a, [sp+0x01]
00000031 61D300               204  	bnh $.BB@LABEL@1_6
00000034                      205  .BB@LABEL@1_3:	; if_then_bb18
00000034                      206  	;***      111 :     {
00000034                      207  	;***      112 :         *gp_uart1_rx_address = rx_data;
00000034                      208  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 112
00000034 EB0000               209  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   210  	mov [de], a
00000038                      211  	;***      113 :         gp_uart1_rx_address++;
00000038                      212  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 113
00000038 A20000               213  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      214  	;***      114 :         g_uart1_rx_count++;
0000003B                      215  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 114
0000003B A20000               216  	incw !LOWW(_g_uart1_rx_count)
0000003E                      217  	;***      115 : 
0000003E                      218  	;***      116 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      219  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 116
0000003E AF0000               220  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               221  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 222  	sknz
00000046                      223  .BB@LABEL@1_4:	; if_then_bb30
00000046                      224  	;***      117 :         {
00000046                      225  	;***      118 :             r_uart1_callback_receiveend();
00000046                      226  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 118
00000046 FC000000             227  	call !!_r_uart1_callback_receiveend@1
0000004A                      228  .BB@LABEL@1_5:	; return
0000004A C6                   229  	pop hl
0000004B C0                   230  	pop ax
0000004C 9EFC                 231  	mov cs, a
0000004E 60                   232  	mov a, x
0000004F 9EFD                 233  	mov es, a
00000051 C6                   234  	pop hl
00000052 C4                   235  	pop de
00000053 C2                   236  	pop bc
00000054 C0                   237  	pop ax
00000055                      238  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 125
00000055 61FC                 239  	reti
00000057                      240  .BB@LABEL@1_6:	; if_else_bb
00000057                      241  	;***      119 :         }
00000057                      242  	;***      120 :     }
00000057                      243  	;***      121 :     else
00000057                      244  	;***      122 :     {
00000057                      245  	;***      123 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      246  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 123
00000057 318E                 247  	shrw ax, 8+0x00000
00000059 FC000000             248  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 249  	br $.BB@LABEL@1_5
0000005F                      250  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      251  _r_uart1_interrupt_send@1:
0000005F                      252  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      253  	;***      124 :     }
0000005F                      254  	;***      125 : }
0000005F                      255  	;***      126 : 
0000005F                      256  	;***      127 : /***********************************************************************************************************************
0000005F                      257  	;***      128 : * Function Name: r_uart1_interrupt_send
0000005F                      258  	;***      129 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      259  	;***      130 : * Arguments    : None
0000005F                      260  	;***      131 : * Return Value : None
0000005F                      261  	;***      132 : ***********************************************************************************************************************/
0000005F                      262  	;***      133 : static void __near r_uart1_interrupt_send(void)
0000005F                      263  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 133
0000005F C1                   264  	push ax
00000060 C3                   265  	push bc
00000061 C5                   266  	push de
00000062 C7                   267  	push hl
00000063 8EFD                 268  	mov a, es
00000065 70                   269  	mov x, a
00000066 8EFC                 270  	mov a, cs
00000068 C1                   271  	push ax
00000069                      272  	;***      134 : {
00000069                      273  	;***      135 :     if (g_uart1_tx_count > 0U)
00000069                      274  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
00000069 AF0000               275  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   276  	clrw bc
0000006D 43                   277  	cmpw ax, bc
0000006E DF00                 278  	bnz $.BB@LABEL@2_3
00000070                      279  .BB@LABEL@2_1:	; if_else_bb
00000070                      280  	;***      136 :     {
00000070                      281  	;***      137 :         TXD1 = *gp_uart1_tx_address;
00000070                      282  	;***      138 :         gp_uart1_tx_address++;
00000070                      283  	;***      139 :         g_uart1_tx_count--;
00000070                      284  	;***      140 :     }
00000070                      285  	;***      141 :     else
00000070                      286  	;***      142 :     {
00000070                      287  	;***      143 :         r_uart1_callback_sendend();
00000070                      288  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
00000070 FC000000             289  	call !!_r_uart1_callback_sendend@1
00000074                      290  .BB@LABEL@2_2:	; if_else_bb
00000074 C0                   291  	pop ax
00000075 9EFC                 292  	mov cs, a
00000077 60                   293  	mov a, x
00000078 9EFD                 294  	mov es, a
0000007A C6                   295  	pop hl
0000007B C4                   296  	pop de
0000007C C2                   297  	pop bc
0000007D C0                   298  	pop ax
0000007E                      299  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 145
0000007E 61FC                 300  	reti
00000080                      301  .BB@LABEL@2_3:	; if_then_bb
00000080                      302  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 137
00000080 EB0000               303  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   304  	mov a, [de]
00000084 9E44                 305  	mov 0xFFF44, a
00000086                      306  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
00000086 A5                   307  	incw de
00000087 15                   308  	movw ax, de
00000088 BF0000               309  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      310  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 139
0000008B B20000               311  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 312  	br $.BB@LABEL@2_2
00000000                      313  	.SECTION .textf,TEXTF
00000000                      314  _r_uart1_callback_receiveend@1:
00000000                      315  	.STACK _r_uart1_callback_receiveend@1 = 4
00000000                      316  	;***      144 :     }
00000000                      317  	;***      145 : }
00000000                      318  	;***      146 : 
00000000                      319  	;***      147 : /***********************************************************************************************************************
00000000                      320  	;***      148 : * Function Name: r_uart1_callback_receiveend
00000000                      321  	;***      149 : * Description  : This function is a callback function when UART1 finishes reception.
00000000                      322  	;***      150 : * Arguments    : None
00000000                      323  	;***      151 : * Return Value : None
00000000                      324  	;***      152 : ***********************************************************************************************************************/
00000000                      325  	;***      153 : static void r_uart1_callback_receiveend(void)
00000000                      326  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 153
00000000 D7                   327  	ret
00000001                      328  _r_uart1_callback_softwareoverrun@1:
00000001                      329  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000001                      330  	;***      154 : {
00000001                      331  	;***      155 :     /* Start user code. Do not edit comment generated here */
00000001                      332  	;***      156 :     /* End user code. Do not edit comment generated here */
00000001                      333  	;***      157 : }
00000001                      334  	;***      158 : 
00000001                      335  	;***      159 : /***********************************************************************************************************************
00000001                      336  	;***      160 : * Function Name: r_uart1_callback_softwareoverrun
00000001                      337  	;***      161 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000001                      338  	;***      162 : * Arguments    : rx_data -
00000001                      339  	;***      163 : *                    receive data
00000001                      340  	;***      164 : * Return Value : None
00000001                      341  	;***      165 : ***********************************************************************************************************************/
00000001                      342  	;***      166 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000001                      343  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 166
00000001 D7                   344  	ret
00000002                      345  _r_uart1_callback_sendend@1:
00000002                      346  	.STACK _r_uart1_callback_sendend@1 = 4
00000002                      347  	;***      167 : {
00000002                      348  	;***      168 :     /* Start user code. Do not edit comment generated here */
00000002                      349  	;***      169 :     /* End user code. Do not edit comment generated here */
00000002                      350  	;***      170 : }
00000002                      351  	;***      171 : 
00000002                      352  	;***      172 : /***********************************************************************************************************************
00000002                      353  	;***      173 : * Function Name: r_uart1_callback_sendend
00000002                      354  	;***      174 : * Description  : This function is a callback function when UART1 finishes transmission.
00000002                      355  	;***      175 : * Arguments    : None
00000002                      356  	;***      176 : * Return Value : None
00000002                      357  	;***      177 : ***********************************************************************************************************************/
00000002                      358  	;***      178 : static void r_uart1_callback_sendend(void)
00000002                      359  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 178
00000002 D7                   360  	ret
00000003                      361  _r_uart1_callback_error@1:
00000003                      362  	.STACK _r_uart1_callback_error@1 = 4
00000003                      363  	;***      179 : {
00000003                      364  	;***      180 :     /* Start user code. Do not edit comment generated here */
00000003                      365  	;***      181 :     /* End user code. Do not edit comment generated here */
00000003                      366  	;***      182 : }
00000003                      367  	;***      183 : 
00000003                      368  	;***      184 : /***********************************************************************************************************************
00000003                      369  	;***      185 : * Function Name: r_uart1_callback_error
00000003                      370  	;***      186 : * Description  : This function is a callback function when UART1 reception error occurs.
00000003                      371  	;***      187 : * Arguments    : err_type -
00000003                      372  	;***      188 : *                    error type value
00000003                      373  	;***      189 : * Return Value : None
00000003                      374  	;***      190 : ***********************************************************************************************************************/
00000003                      375  	;***      191 : static void r_uart1_callback_error(uint8_t err_type)
00000003                      376  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 191
00000003 D7                   377  	ret
00000090                      378  	.SECTION .text,TEXT
00000090                      379  _r_csi00_interrupt@1	.vector 0x001E
00000090                      380  _r_csi00_interrupt@1:
00000090                      381  	.STACK _r_csi00_interrupt@1 = 16
00000090                      382  	;***      192 : {
00000090                      383  	;***      193 :     /* Start user code. Do not edit comment generated here */
00000090                      384  	;***      194 :     /* End user code. Do not edit comment generated here */
00000090                      385  	;***      195 : }
00000090                      386  	;***      196 : 
00000090                      387  	;***      197 : /***********************************************************************************************************************
00000090                      388  	;***      198 : * Function Name: r_csi00_interrupt
00000090                      389  	;***      199 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      390  	;***      200 : * Arguments    : None
00000090                      391  	;***      201 : * Return Value : None
00000090                      392  	;***      202 : ***********************************************************************************************************************/
00000090                      393  	;***      203 : static void __near r_csi00_interrupt(void)
00000090                      394  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 203
00000090 C1                   395  	push ax
00000091 C3                   396  	push bc
00000092 C5                   397  	push de
00000093 C7                   398  	push hl
00000094 8EFD                 399  	mov a, es
00000096 70                   400  	mov x, a
00000097 8EFC                 401  	mov a, cs
00000099 C1                   402  	push ax
0000009A C7                   403  	push hl
0000009B                      404  	;***      204 : {
0000009B                      405  	;***      205 :     volatile uint8_t err_type;
0000009B                      406  	;***      206 : 
0000009B                      407  	;***      207 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      408  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 207
0000009B AF0001               409  	movw ax, !0x0100
0000009E 60                   410  	mov a, x
0000009F 5C01                 411  	and a, #0x01
000000A1 9800                 412  	mov [sp+0x00], a
000000A3                      413  	;***      208 :     SIR00 = (uint16_t)err_type;
000000A3                      414  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 208
000000A3 8800                 415  	mov a, [sp+0x00]
000000A5 318E                 416  	shrw ax, 8+0x00000
000000A7 BF0801               417  	movw !0x0108, ax
000000AA                      418  	;***      209 : 
000000AA                      419  	;***      210 :     if (err_type != 1U)
000000AA                      420  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 210
000000AA 8800                 421  	mov a, [sp+0x00]
000000AC 91                   422  	dec a
000000AD DF00                 423  	bnz $.BB@LABEL@7_2
000000AF                      424  .BB@LABEL@7_1:	; return
000000AF C6                   425  	pop hl
000000B0 C0                   426  	pop ax
000000B1 9EFC                 427  	mov cs, a
000000B3 60                   428  	mov a, x
000000B4 9EFD                 429  	mov es, a
000000B6 C6                   430  	pop hl
000000B7 C4                   431  	pop de
000000B8 C2                   432  	pop bc
000000B9 C0                   433  	pop ax
000000BA                      434  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 223
000000BA 61FC                 435  	reti
000000BC                      436  .BB@LABEL@7_2:	; if_then_bb
000000BC                      437  	;***      211 :     {
000000BC                      438  	;***      212 :         if (g_csi00_tx_count > 0U)
000000BC                      439  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 212
000000BC AF0000               440  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   441  	clrw bc
000000C0 43                   442  	cmpw ax, bc
000000C1 DF00                 443  	bnz $.BB@LABEL@7_4
000000C3                      444  .BB@LABEL@7_3:	; if_else_bb
000000C3                      445  	;***      213 :         {
000000C3                      446  	;***      214 :             SIO00 = *gp_csi00_tx_address;
000000C3                      447  	;***      215 :             gp_csi00_tx_address++;
000000C3                      448  	;***      216 :             g_csi00_tx_count--;
000000C3                      449  	;***      217 :         }
000000C3                      450  	;***      218 :         else
000000C3                      451  	;***      219 :         {
000000C3                      452  	;***      220 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      453  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 220
000000C3 FC000000             454  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 455  	br $.BB@LABEL@7_1
000000C9                      456  .BB@LABEL@7_4:	; if_then_bb14
000000C9                      457  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 214
000000C9 EB0000               458  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   459  	mov a, [de]
000000CD 9D10                 460  	mov 0xFFF10, a
000000CF                      461  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 215
000000CF A5                   462  	incw de
000000D0 15                   463  	movw ax, de
000000D1 BF0000               464  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      465  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 216
000000D4 B20000               466  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 467  	br $.BB@LABEL@7_1
00000004                      468  	.SECTION .textf,TEXTF
00000004                      469  _r_csi00_callback_sendend@1:
00000004                      470  	.STACK _r_csi00_callback_sendend@1 = 4
00000004                      471  	;***      221 :         }
00000004                      472  	;***      222 :     }
00000004                      473  	;***      223 : }
00000004                      474  	;***      224 : 
00000004                      475  	;***      225 : /***********************************************************************************************************************
00000004                      476  	;***      226 : * Function Name: r_csi00_callback_sendend
00000004                      477  	;***      227 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000004                      478  	;***      228 : * Arguments    : None
00000004                      479  	;***      229 : * Return Value : None
00000004                      480  	;***      230 : ***********************************************************************************************************************/
00000004                      481  	;***      231 : static void r_csi00_callback_sendend(void)
00000004                      482  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 231
00000004 D7                   483  	ret
000000D9                      484  	.SECTION .text,TEXT
000000D9                      485  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      486  _r_csi01_interrupt@1:
000000D9                      487  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      488  	;***      232 : {
000000D9                      489  	;***      233 :     /* Start user code. Do not edit comment generated here */
000000D9                      490  	;***      234 :     /* End user code. Do not edit comment generated here */
000000D9                      491  	;***      235 : }
000000D9                      492  	;***      236 : 
000000D9                      493  	;***      237 : /***********************************************************************************************************************
000000D9                      494  	;***      238 : * Function Name: r_csi01_interrupt
000000D9                      495  	;***      239 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      496  	;***      240 : * Arguments    : None
000000D9                      497  	;***      241 : * Return Value : None
000000D9                      498  	;***      242 : ***********************************************************************************************************************/
000000D9                      499  	;***      243 : static void __near r_csi01_interrupt(void)
000000D9                      500  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 243
000000D9 C1                   501  	push ax
000000DA C3                   502  	push bc
000000DB C5                   503  	push de
000000DC C7                   504  	push hl
000000DD 8EFD                 505  	mov a, es
000000DF 70                   506  	mov x, a
000000E0 8EFC                 507  	mov a, cs
000000E2 C1                   508  	push ax
000000E3 C7                   509  	push hl
000000E4                      510  	;***      244 : {
000000E4                      511  	;***      245 :     volatile uint8_t err_type;
000000E4                      512  	;***      246 :     volatile uint8_t sio_dummy;
000000E4                      513  	;***      247 : 
000000E4                      514  	;***      248 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      515  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 248
000000E4 AF0201               516  	movw ax, !0x0102
000000E7 60                   517  	mov a, x
000000E8 5C01                 518  	and a, #0x01
000000EA 9800                 519  	mov [sp+0x00], a
000000EC                      520  	;***      249 :     SIR01 = (uint16_t)err_type;
000000EC                      521  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 249
000000EC 8800                 522  	mov a, [sp+0x00]
000000EE 318E                 523  	shrw ax, 8+0x00000
000000F0 BF0A01               524  	movw !0x010A, ax
000000F3                      525  	;***      250 : 
000000F3                      526  	;***      251 :     if (1U == err_type)
000000F3                      527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 251
000000F3 8800                 528  	mov a, [sp+0x00]
000000F5 91                   529  	dec a
000000F6 DF00                 530  	bnz $.BB@LABEL@9_2
000000F8                      531  .BB@LABEL@9_1:	; if_then_bb
000000F8                      532  	;***      252 :     {
000000F8                      533  	;***      253 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      534  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 253
000000F8 8800                 535  	mov a, [sp+0x00]
000000FA FC000000             536  	call !!_r_csi01_callback_error@1
000000FE EF00                 537  	br $.BB@LABEL@9_15
00000100                      538  .BB@LABEL@9_2:	; if_else_bb
00000100                      539  	;***      254 :     }
00000100                      540  	;***      255 :     else
00000100                      541  	;***      256 :     {
00000100                      542  	;***      257 :         if (g_csi01_tx_count > 0U)
00000100                      543  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 257
00000100 AF0000               544  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   545  	clrw bc
00000104 43                   546  	cmpw ax, bc
00000105 DF00                 547  	bnz $.BB@LABEL@9_8
00000107                      548  .BB@LABEL@9_3:	; if_else_bb42
00000107                      549  	;***      258 :         {
00000107                      550  	;***      259 :             if (0U != gp_csi01_rx_address)
00000107                      551  	;***      260 :             {
00000107                      552  	;***      261 :                 *gp_csi01_rx_address = SIO01;
00000107                      553  	;***      262 :                 gp_csi01_rx_address++;
00000107                      554  	;***      263 :             }
00000107                      555  	;***      264 :             else
00000107                      556  	;***      265 :             {
00000107                      557  	;***      266 :                 sio_dummy = SIO01;
00000107                      558  	;***      267 :             }
00000107                      559  	;***      268 : 
00000107                      560  	;***      269 :             if (0U != gp_csi01_tx_address)
00000107                      561  	;***      270 :             {
00000107                      562  	;***      271 :                 SIO01 = *gp_csi01_tx_address;
00000107                      563  	;***      272 :                 gp_csi01_tx_address++;
00000107                      564  	;***      273 :             }
00000107                      565  	;***      274 :             else
00000107                      566  	;***      275 :             {
00000107                      567  	;***      276 :                 SIO01 = 0xFFU;
00000107                      568  	;***      277 :             }
00000107                      569  	;***      278 : 
00000107                      570  	;***      279 :             g_csi01_tx_count--;
00000107                      571  	;***      280 :         }
00000107                      572  	;***      281 :         else 
00000107                      573  	;***      282 :         {
00000107                      574  	;***      283 :             if (0U == g_csi01_tx_count)
00000107                      575  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 283
00000107 AF0000               576  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   577  	cmpw ax, bc
0000010B DF00                 578  	bnz $.BB@LABEL@9_7
0000010D                      579  .BB@LABEL@9_4:	; if_then_bb47
0000010D                      580  	;***      284 :             {
0000010D                      581  	;***      285 :                 if (0U != gp_csi01_rx_address)
0000010D                      582  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 285
0000010D AF0000               583  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   584  	cmpw ax, bc
00000111 DF00                 585  	bnz $.BB@LABEL@9_6
00000113                      586  .BB@LABEL@9_5:	; if_else_bb55
00000113                      587  	;***      286 :                 {
00000113                      588  	;***      287 :                     *gp_csi01_rx_address = SIO01;
00000113                      589  	;***      288 :                 }
00000113                      590  	;***      289 :                 else
00000113                      591  	;***      290 :                 {
00000113                      592  	;***      291 :                     sio_dummy = SIO01;
00000113                      593  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 291
00000113 8D12                 594  	mov a, 0xFFF12
00000115 9801                 595  	mov [sp+0x01], a
00000117 EF00                 596  	br $.BB@LABEL@9_7
00000119                      597  .BB@LABEL@9_6:	; if_then_bb52
00000119 14                   598  	movw de, ax
0000011A                      599  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 287
0000011A 8D12                 600  	mov a, 0xFFF12
0000011C 99                   601  	mov [de], a
0000011D                      602  .BB@LABEL@9_7:	; if_break_bb59
0000011D                      603  	;***      292 :                 }
0000011D                      604  	;***      293 :             }
0000011D                      605  	;***      294 : 
0000011D                      606  	;***      295 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      607  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 295
0000011D FC000000             608  	call !!_r_csi01_callback_sendend@1
00000121                      609  	;***      296 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      610  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 296
00000121 FC000000             611  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 612  	br $.BB@LABEL@9_15
00000127                      613  .BB@LABEL@9_8:	; if_then_bb16
00000127                      614  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 259
00000127 AF0000               615  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   616  	cmpw ax, bc
0000012B DF00                 617  	bnz $.BB@LABEL@9_10
0000012D                      618  .BB@LABEL@9_9:	; if_else_bb26
0000012D                      619  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 266
0000012D 8D12                 620  	mov a, 0xFFF12
0000012F 9801                 621  	mov [sp+0x01], a
00000131 EF00                 622  	br $.BB@LABEL@9_11
00000133                      623  .BB@LABEL@9_10:	; if_then_bb21
00000133 14                   624  	movw de, ax
00000134                      625  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 261
00000134 8D12                 626  	mov a, 0xFFF12
00000136 99                   627  	mov [de], a
00000137                      628  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 262
00000137 A20000               629  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      630  .BB@LABEL@9_11:	; if_break_bb
0000013A                      631  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 269
0000013A AF0000               632  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   633  	cmpw ax, bc
0000013E DF00                 634  	bnz $.BB@LABEL@9_13
00000140                      635  .BB@LABEL@9_12:	; if_else_bb38
00000140                      636  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 276
00000140 CD12FF               637  	mov 0xFFF12, #0xFF
00000143 EF00                 638  	br $.BB@LABEL@9_14
00000145                      639  .BB@LABEL@9_13:	; if_then_bb32
00000145 14                   640  	movw de, ax
00000146                      641  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 271
00000146 89                   642  	mov a, [de]
00000147 9D12                 643  	mov 0xFFF12, a
00000149                      644  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 272
00000149 A5                   645  	incw de
0000014A 15                   646  	movw ax, de
0000014B BF0000               647  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      648  .BB@LABEL@9_14:	; if_break_bb39
0000014E                      649  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 279
0000014E B20000               650  	decw !LOWW(_g_csi01_tx_count)
00000151                      651  .BB@LABEL@9_15:	; if_break_bb39
00000151 C6                   652  	pop hl
00000152 C0                   653  	pop ax
00000153 9EFC                 654  	mov cs, a
00000155 60                   655  	mov a, x
00000156 9EFD                 656  	mov es, a
00000158 C6                   657  	pop hl
00000159 C4                   658  	pop de
0000015A C2                   659  	pop bc
0000015B C0                   660  	pop ax
0000015C                      661  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
0000015C 61FC                 662  	reti
00000005                      663  	.SECTION .textf,TEXTF
00000005                      664  _r_csi01_callback_receiveend@1:
00000005                      665  	.STACK _r_csi01_callback_receiveend@1 = 4
00000005                      666  	;***      297 :         }
00000005                      667  	;***      298 :     }
00000005                      668  	;***      299 : }
00000005                      669  	;***      300 : 
00000005                      670  	;***      301 : /***********************************************************************************************************************
00000005                      671  	;***      302 : * Function Name: r_csi01_callback_receiveend
00000005                      672  	;***      303 : * Description  : This function is a callback function when CSI01 finishes reception.
00000005                      673  	;***      304 : * Arguments    : None
00000005                      674  	;***      305 : * Return Value : None
00000005                      675  	;***      306 : ***********************************************************************************************************************/
00000005                      676  	;***      307 : static void r_csi01_callback_receiveend(void)
00000005                      677  	;***      308 : {
00000005                      678  	;***      309 :     /* Start user code. Do not edit comment generated here */
00000005                      679  	;***      310 : 	g_csi_rev_end++;
00000005                      680  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 310
00000005 A00000               681  	inc !LOWW(_g_csi_rev_end)
00000008                      682  	;***      311 : 	R_CSI01_Stop();
00000008                      683  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 311
00000008 EC000000             684  	br !!_R_CSI01_Stop
0000000C                      685  _r_csi01_callback_error@1:
0000000C                      686  	.STACK _r_csi01_callback_error@1 = 4
0000000C                      687  	;***      312 :     /* End user code. Do not edit comment generated here */
0000000C                      688  	;***      313 : }
0000000C                      689  	;***      314 : 
0000000C                      690  	;***      315 : /***********************************************************************************************************************
0000000C                      691  	;***      316 : * Function Name: r_csi01_callback_error
0000000C                      692  	;***      317 : * Description  : This function is a callback function when CSI01 reception error occurs.
0000000C                      693  	;***      318 : * Arguments    : err_type -
0000000C                      694  	;***      319 : *                    error type value
0000000C                      695  	;***      320 : * Return Value : None
0000000C                      696  	;***      321 : ***********************************************************************************************************************/
0000000C                      697  	;***      322 : static void r_csi01_callback_error(uint8_t err_type)
0000000C                      698  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 322
0000000C D7                   699  	ret
0000000D                      700  _r_csi01_callback_sendend@1:
0000000D                      701  	.STACK _r_csi01_callback_sendend@1 = 4
0000000D                      702  	;***      323 : {
0000000D                      703  	;***      324 :     /* Start user code. Do not edit comment generated here */
0000000D                      704  	;***      325 : 
0000000D                      705  	;***      326 :     /* End user code. Do not edit comment generated here */
0000000D                      706  	;***      327 : }
0000000D                      707  	;***      328 : 
0000000D                      708  	;***      329 : /***********************************************************************************************************************
0000000D                      709  	;***      330 : * Function Name: r_csi01_callback_sendend
0000000D                      710  	;***      331 : * Description  : This function is a callback function when CSI01 finishes transmission.
0000000D                      711  	;***      332 : * Arguments    : None
0000000D                      712  	;***      333 : * Return Value : None
0000000D                      713  	;***      334 : ***********************************************************************************************************************/
0000000D                      714  	;***      335 : static void r_csi01_callback_sendend(void)
0000000D                      715  	;***      336 : {
0000000D                      716  	;***      337 :     /* Start user code. Do not edit comment generated here */
0000000D                      717  	;***      338 : 	g_csi_send_end++;
0000000D                      718  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 338
0000000D A00000               719  	inc !LOWW(_g_csi_send_end)
00000010 D7                   720  	ret
0000015E                      721  	.SECTION .text,TEXT
0000015E                      722  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      723  _r_uart2_interrupt_receive@1:
0000015E                      724  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      725  	;***      339 :     /* End user code. Do not edit comment generated here */
0000015E                      726  	;***      340 : }
0000015E                      727  	;***      341 : 
0000015E                      728  	;***      342 : /***********************************************************************************************************************
0000015E                      729  	;***      343 : * Function Name: r_uart2_interrupt_receive
0000015E                      730  	;***      344 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      731  	;***      345 : * Arguments    : None
0000015E                      732  	;***      346 : * Return Value : None
0000015E                      733  	;***      347 : ***********************************************************************************************************************/
0000015E                      734  	;***      348 : static void __near r_uart2_interrupt_receive(void)
0000015E                      735  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 348
0000015E C1                   736  	push ax
0000015F C3                   737  	push bc
00000160 C5                   738  	push de
00000161 C7                   739  	push hl
00000162 8EFD                 740  	mov a, es
00000164 70                   741  	mov x, a
00000165 8EFC                 742  	mov a, cs
00000167 C1                   743  	push ax
00000168 C7                   744  	push hl
00000169                      745  	;***      349 : {
00000169                      746  	;***      350 :     volatile uint8_t rx_data;
00000169                      747  	;***      351 :     volatile uint8_t err_type;
00000169                      748  	;***      352 :     
00000169                      749  	;***      353 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      750  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 353
00000169 AF4201               751  	movw ax, !0x0142
0000016C 60                   752  	mov a, x
0000016D 5C07                 753  	and a, #0x07
0000016F 9800                 754  	mov [sp+0x00], a
00000171                      755  	;***      354 :     SIR11 = (uint16_t)err_type;
00000171                      756  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 354
00000171 8800                 757  	mov a, [sp+0x00]
00000173 318E                 758  	shrw ax, 8+0x00000
00000175 BF4A01               759  	movw !0x014A, ax
00000178                      760  	;***      355 : 
00000178                      761  	;***      356 :     if (err_type != 0U)
00000178                      762  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 356
00000178 8800                 763  	mov a, [sp+0x00]
0000017A D1                   764  	cmp0 a
0000017B DD00                 765  	bz $.BB@LABEL@13_2
0000017D                      766  .BB@LABEL@13_1:	; if_then_bb
0000017D                      767  	;***      357 :     {
0000017D                      768  	;***      358 :         r_uart2_callback_error(err_type);
0000017D                      769  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 358
0000017D 8800                 770  	mov a, [sp+0x00]
0000017F FC000000             771  	call !!_r_uart2_callback_error@1
00000183                      772  .BB@LABEL@13_2:	; if_break_bb
00000183                      773  	;***      359 :     }
00000183                      774  	;***      360 :     
00000183                      775  	;***      361 :     rx_data = RXD2;
00000183                      776  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 361
00000183 8E4A                 777  	mov a, 0xFFF4A
00000185 9801                 778  	mov [sp+0x01], a
00000187                      779  	;***      362 : 
00000187                      780  	;***      363 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      781  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 363
00000187 AF0000               782  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               783  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 784  	mov a, [sp+0x01]
0000018F 61D300               785  	bnh $.BB@LABEL@13_6
00000192                      786  .BB@LABEL@13_3:	; if_then_bb18
00000192                      787  	;***      364 :     {
00000192                      788  	;***      365 :         *gp_uart2_rx_address = rx_data;
00000192                      789  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 365
00000192 EB0000               790  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   791  	mov [de], a
00000196                      792  	;***      366 :         gp_uart2_rx_address++;
00000196                      793  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 366
00000196 A20000               794  	incw !LOWW(_gp_uart2_rx_address)
00000199                      795  	;***      367 :         g_uart2_rx_count++;
00000199                      796  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 367
00000199 A20000               797  	incw !LOWW(_g_uart2_rx_count)
0000019C                      798  	;***      368 : 
0000019C                      799  	;***      369 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      800  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 369
0000019C AF0000               801  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               802  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 803  	sknz
000001A4                      804  .BB@LABEL@13_4:	; if_then_bb30
000001A4                      805  	;***      370 :         {
000001A4                      806  	;***      371 :             r_uart2_callback_receiveend();
000001A4                      807  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 371
000001A4 FC000000             808  	call !!_r_uart2_callback_receiveend@1
000001A8                      809  .BB@LABEL@13_5:	; return
000001A8 C6                   810  	pop hl
000001A9 C0                   811  	pop ax
000001AA 9EFC                 812  	mov cs, a
000001AC 60                   813  	mov a, x
000001AD 9EFD                 814  	mov es, a
000001AF C6                   815  	pop hl
000001B0 C4                   816  	pop de
000001B1 C2                   817  	pop bc
000001B2 C0                   818  	pop ax
000001B3                      819  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 378
000001B3 61FC                 820  	reti
000001B5                      821  .BB@LABEL@13_6:	; if_else_bb
000001B5                      822  	;***      372 :         }
000001B5                      823  	;***      373 :     }
000001B5                      824  	;***      374 :     else
000001B5                      825  	;***      375 :     {
000001B5                      826  	;***      376 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      827  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 376
000001B5 318E                 828  	shrw ax, 8+0x00000
000001B7 FC000000             829  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 830  	br $.BB@LABEL@13_5
000001BD                      831  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      832  _r_uart2_interrupt_send@1:
000001BD                      833  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      834  	;***      377 :     }
000001BD                      835  	;***      378 : }
000001BD                      836  	;***      379 : 
000001BD                      837  	;***      380 : /***********************************************************************************************************************
000001BD                      838  	;***      381 : * Function Name: r_uart2_interrupt_send
000001BD                      839  	;***      382 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      840  	;***      383 : * Arguments    : None
000001BD                      841  	;***      384 : * Return Value : None
000001BD                      842  	;***      385 : ***********************************************************************************************************************/
000001BD                      843  	;***      386 : static void __near r_uart2_interrupt_send(void)
000001BD                      844  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 386
000001BD C1                   845  	push ax
000001BE C3                   846  	push bc
000001BF C5                   847  	push de
000001C0 C7                   848  	push hl
000001C1 8EFD                 849  	mov a, es
000001C3 70                   850  	mov x, a
000001C4 8EFC                 851  	mov a, cs
000001C6 C1                   852  	push ax
000001C7                      853  	;***      387 : {
000001C7                      854  	;***      388 :     if (g_uart2_tx_count > 0U)
000001C7                      855  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 388
000001C7 AF0000               856  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   857  	clrw bc
000001CB 43                   858  	cmpw ax, bc
000001CC DF00                 859  	bnz $.BB@LABEL@14_3
000001CE                      860  .BB@LABEL@14_1:	; if_else_bb
000001CE                      861  	;***      389 :     {
000001CE                      862  	;***      390 :         TXD2 = *gp_uart2_tx_address;
000001CE                      863  	;***      391 :         gp_uart2_tx_address++;
000001CE                      864  	;***      392 :         g_uart2_tx_count--;
000001CE                      865  	;***      393 :     }
000001CE                      866  	;***      394 :     else
000001CE                      867  	;***      395 :     {
000001CE                      868  	;***      396 :         r_uart2_callback_sendend();
000001CE                      869  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 396
000001CE FC000000             870  	call !!_r_uart2_callback_sendend@1
000001D2                      871  .BB@LABEL@14_2:	; if_else_bb
000001D2 C0                   872  	pop ax
000001D3 9EFC                 873  	mov cs, a
000001D5 60                   874  	mov a, x
000001D6 9EFD                 875  	mov es, a
000001D8 C6                   876  	pop hl
000001D9 C4                   877  	pop de
000001DA C2                   878  	pop bc
000001DB C0                   879  	pop ax
000001DC                      880  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 398
000001DC 61FC                 881  	reti
000001DE                      882  .BB@LABEL@14_3:	; if_then_bb
000001DE                      883  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 390
000001DE EB0000               884  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   885  	mov a, [de]
000001E2 9E48                 886  	mov 0xFFF48, a
000001E4                      887  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
000001E4 A5                   888  	incw de
000001E5 15                   889  	movw ax, de
000001E6 BF0000               890  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      891  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 392
000001E9 B20000               892  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 893  	br $.BB@LABEL@14_2
00000011                      894  	.SECTION .textf,TEXTF
00000011                      895  _r_uart2_callback_receiveend@1:
00000011                      896  	.STACK _r_uart2_callback_receiveend@1 = 4
00000011                      897  	;***      397 :     }
00000011                      898  	;***      398 : }
00000011                      899  	;***      399 : 
00000011                      900  	;***      400 : /***********************************************************************************************************************
00000011                      901  	;***      401 : * Function Name: r_uart2_callback_receiveend
00000011                      902  	;***      402 : * Description  : This function is a callback function when UART2 finishes reception.
00000011                      903  	;***      403 : * Arguments    : None
00000011                      904  	;***      404 : * Return Value : None
00000011                      905  	;***      405 : ***********************************************************************************************************************/
00000011                      906  	;***      406 : static void r_uart2_callback_receiveend(void)
00000011                      907  	;***      407 : {
00000011                      908  	;***      408 :     /* Start user code. Do not edit comment generated here */
00000011                      909  	;***      409 : //	R_UART2_Receive(g_rx_data, 32);
00000011                      910  	;***      410 : //	R_UART2_Stop();
00000011                      911  	;***      411 : //	R_UART2_Start();
00000011                      912  	;***      412 : 	R_UART2_Receive(g_rx_data, sizeof(struct UART_Buffer_s));
00000011                      913  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 412
00000011 320600               914  	movw bc, #0x0006
00000014 300000               915  	movw ax, #LOWW(_g_rx_data)
00000017 FC000000             916  	call !!_R_UART2_Receive
0000001B                      917  	;***      413 : 	if((g_rx_data[0] == H_READ)|(g_rx_data[0] == H_SET)|(g_rx_data[0] == H_ALARM)|(g_rx_data[0] == H_CLEAR)|(g_rx_data[0] == H_ERROR)){
0000001B                      918  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 413
0000001B 8F0000               919  	mov a, !LOWW(_g_rx_data)
0000001E 72                   920  	mov c, a
0000001F 4C52                 921  	cmp a, #0x52
00000021 E0                   922  	oneb x
00000022 61E8                 923  	skz
00000024                      924  .BB@LABEL@15_1:	; entry
00000024 F0                   925  	clrb x
00000025                      926  .BB@LABEL@15_2:	; entry
00000025 4C53                 927  	cmp a, #0x53
00000027 E1                   928  	oneb a
00000028 61E8                 929  	skz
0000002A                      930  .BB@LABEL@15_3:	; entry
0000002A F1                   931  	clrb a
0000002B                      932  .BB@LABEL@15_4:	; entry
0000002B 6168                 933  	or a, x
0000002D 73                   934  	mov b, a
0000002E 62                   935  	mov a, c
0000002F 4C41                 936  	cmp a, #0x41
00000031 E0                   937  	oneb x
00000032 61E8                 938  	skz
00000034                      939  .BB@LABEL@15_5:	; entry
00000034 F0                   940  	clrb x
00000035                      941  .BB@LABEL@15_6:	; entry
00000035 60                   942  	mov a, x
00000036 616B                 943  	or a, b
00000038 73                   944  	mov b, a
00000039 62                   945  	mov a, c
0000003A 4C43                 946  	cmp a, #0x43
0000003C E0                   947  	oneb x
0000003D 61E8                 948  	skz
0000003F                      949  .BB@LABEL@15_7:	; entry
0000003F F0                   950  	clrb x
00000040                      951  .BB@LABEL@15_8:	; entry
00000040 60                   952  	mov a, x
00000041 616B                 953  	or a, b
00000043 73                   954  	mov b, a
00000044 62                   955  	mov a, c
00000045 4C45                 956  	cmp a, #0x45
00000047 E0                   957  	oneb x
00000048 61E8                 958  	skz
0000004A                      959  .BB@LABEL@15_9:	; entry
0000004A F0                   960  	clrb x
0000004B                      961  .BB@LABEL@15_10:	; entry
0000004B 60                   962  	mov a, x
0000004C 616B                 963  	or a, b
0000004E DF00                 964  	bnz $.BB@LABEL@15_12
00000050                      965  .BB@LABEL@15_11:	; if_else_bb57
00000050                      966  	;***      414 : 		g_uart2_fault = 0;
00000050                      967  	;***      415 : 		if((g_rx_data[0] == H_READ)&(g_rx_data[1] == 1U)){
00000050                      968  	;***      416 : 			R_UART2_Receive(g_rx_data, sizeof(struct Number_Setting_s));
00000050                      969  	;***      417 : 		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == 2U)){
00000050                      970  	;***      418 : 			R_UART2_Receive(g_rx_data, sizeof(struct Timer_Setting_s));
00000050                      971  	;***      419 : 		}
00000050                      972  	;***      420 : 	}else{
00000050                      973  	;***      421 : 		g_uart2_fault = 1;
00000050                      974  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
00000050 E50000               975  	oneb !LOWW(_g_uart2_fault)
00000053 EF00                 976  	br $.BB@LABEL@15_19
00000055                      977  .BB@LABEL@15_12:	; if_then_bb
00000055                      978  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 414
00000055 F50000               979  	clrb !LOWW(_g_uart2_fault)
00000058                      980  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 415
00000058 8F0000               981  	mov a, !LOWW(_g_rx_data+0x00001)
0000005B 70                   982  	mov x, a
0000005C 91                   983  	dec a
0000005D DF00                 984  	bnz $.BB@LABEL@15_15
0000005F                      985  .BB@LABEL@15_13:	; if_then_bb
0000005F 62                   986  	mov a, c
00000060 4C52                 987  	cmp a, #0x52
00000062 DF00                 988  	bnz $.BB@LABEL@15_15
00000064                      989  .BB@LABEL@15_14:	; if_then_bb40
00000064                      990  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 416
00000064 322200               991  	movw bc, #0x0022
00000067 EF00                 992  	br $.BB@LABEL@15_18
00000069                      993  .BB@LABEL@15_15:	; if_else_bb
00000069 60                   994  	mov a, x
0000006A                      995  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 417
0000006A 4C02                 996  	cmp a, #0x02
0000006C DF00                 997  	bnz $.BB@LABEL@15_19
0000006E                      998  .BB@LABEL@15_16:	; if_else_bb
0000006E 62                   999  	mov a, c
0000006F 4C52                1000  	cmp a, #0x52
00000071 DF00                1001  	bnz $.BB@LABEL@15_19
00000073                     1002  .BB@LABEL@15_17:	; if_then_bb54
00000073                     1003  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
00000073 324600              1004  	movw bc, #0x0046
00000076                     1005  .BB@LABEL@15_18:	; if_then_bb54
00000076 300000              1006  	movw ax, #LOWW(_g_rx_data)
00000079 FC000000            1007  	call !!_R_UART2_Receive
0000007D                     1008  .BB@LABEL@15_19:	; if_break_bb58
0000007D                     1009  	;***      422 : 	}
0000007D                     1010  	;***      423 : 	g_uart2_receive++;
0000007D                     1011  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 423
0000007D A00000              1012  	inc !LOWW(_g_uart2_receive)
00000080 D7                  1013  	ret
00000081                     1014  _r_uart2_callback_softwareoverrun@1:
00000081                     1015  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
00000081                     1016  	;***      424 :     /* End user code. Do not edit comment generated here */
00000081                     1017  	;***      425 : }
00000081                     1018  	;***      426 : 
00000081                     1019  	;***      427 : /***********************************************************************************************************************
00000081                     1020  	;***      428 : * Function Name: r_uart2_callback_softwareoverrun
00000081                     1021  	;***      429 : * Description  : This function is a callback function when UART2 receives an overflow data.
00000081                     1022  	;***      430 : * Arguments    : rx_data -
00000081                     1023  	;***      431 : *                    receive data
00000081                     1024  	;***      432 : * Return Value : None
00000081                     1025  	;***      433 : ***********************************************************************************************************************/
00000081                     1026  	;***      434 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
00000081                     1027  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 434
00000081 D7                  1028  	ret
00000082                     1029  _r_uart2_callback_sendend@1:
00000082                     1030  	.STACK _r_uart2_callback_sendend@1 = 4
00000082                     1031  	;***      435 : {
00000082                     1032  	;***      436 :     /* Start user code. Do not edit comment generated here */
00000082                     1033  	;***      437 :     /* End user code. Do not edit comment generated here */
00000082                     1034  	;***      438 : }
00000082                     1035  	;***      439 : 
00000082                     1036  	;***      440 : /***********************************************************************************************************************
00000082                     1037  	;***      441 : * Function Name: r_uart2_callback_sendend
00000082                     1038  	;***      442 : * Description  : This function is a callback function when UART2 finishes transmission.
00000082                     1039  	;***      443 : * Arguments    : None
00000082                     1040  	;***      444 : * Return Value : None
00000082                     1041  	;***      445 : ***********************************************************************************************************************/
00000082                     1042  	;***      446 : static void r_uart2_callback_sendend(void)
00000082                     1043  	;***      447 : {
00000082                     1044  	;***      448 :     /* Start user code. Do not edit comment generated here */
00000082                     1045  	;***      449 : 	g_uart2_send++;
00000082                     1046  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
00000082 A00000              1047  	inc !LOWW(_g_uart2_send)
00000085 D7                  1048  	ret
00000086                     1049  _r_uart2_callback_error@1:
00000086                     1050  	.STACK _r_uart2_callback_error@1 = 4
00000086                     1051  	;***      450 :     /* End user code. Do not edit comment generated here */
00000086                     1052  	;***      451 : }
00000086                     1053  	;***      452 : 
00000086                     1054  	;***      453 : /***********************************************************************************************************************
00000086                     1055  	;***      454 : * Function Name: r_uart2_callback_error
00000086                     1056  	;***      455 : * Description  : This function is a callback function when UART2 reception error occurs.
00000086                     1057  	;***      456 : * Arguments    : err_type -
00000086                     1058  	;***      457 : *                    error type value
00000086                     1059  	;***      458 : * Return Value : None
00000086                     1060  	;***      459 : ***********************************************************************************************************************/
00000086                     1061  	;***      460 : static void r_uart2_callback_error(uint8_t err_type)
00000086                     1062  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 460
00000086 D7                  1063  	ret
000001EE                     1064  	.SECTION .text,TEXT
000001EE                     1065  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1066  _r_uart3_interrupt_receive@1:
000001EE                     1067  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1068  	;***      461 : {
000001EE                     1069  	;***      462 :     /* Start user code. Do not edit comment generated here */
000001EE                     1070  	;***      463 :     /* End user code. Do not edit comment generated here */
000001EE                     1071  	;***      464 : }
000001EE                     1072  	;***      465 : 
000001EE                     1073  	;***      466 : /***********************************************************************************************************************
000001EE                     1074  	;***      467 : * Function Name: r_uart3_interrupt_receive
000001EE                     1075  	;***      468 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1076  	;***      469 : * Arguments    : None
000001EE                     1077  	;***      470 : * Return Value : None
000001EE                     1078  	;***      471 : ***********************************************************************************************************************/
000001EE                     1079  	;***      472 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1080  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 472
000001EE C1                  1081  	push ax
000001EF C3                  1082  	push bc
000001F0 C5                  1083  	push de
000001F1 C7                  1084  	push hl
000001F2 8EFD                1085  	mov a, es
000001F4 70                  1086  	mov x, a
000001F5 8EFC                1087  	mov a, cs
000001F7 C1                  1088  	push ax
000001F8 C7                  1089  	push hl
000001F9                     1090  	;***      473 : {
000001F9                     1091  	;***      474 :     volatile uint8_t rx_data;
000001F9                     1092  	;***      475 :     volatile uint8_t err_type;
000001F9                     1093  	;***      476 :     
000001F9                     1094  	;***      477 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1095  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 477
000001F9 AF4601              1096  	movw ax, !0x0146
000001FC 60                  1097  	mov a, x
000001FD 5C07                1098  	and a, #0x07
000001FF 9800                1099  	mov [sp+0x00], a
00000201                     1100  	;***      478 :     SIR13 = (uint16_t)err_type;
00000201                     1101  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 478
00000201 8800                1102  	mov a, [sp+0x00]
00000203 318E                1103  	shrw ax, 8+0x00000
00000205 BF4E01              1104  	movw !0x014E, ax
00000208                     1105  	;***      479 : 
00000208                     1106  	;***      480 :     if (err_type != 0U)
00000208                     1107  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 480
00000208 8800                1108  	mov a, [sp+0x00]
0000020A D1                  1109  	cmp0 a
0000020B DD00                1110  	bz $.BB@LABEL@19_2
0000020D                     1111  .BB@LABEL@19_1:	; if_then_bb
0000020D                     1112  	;***      481 :     {
0000020D                     1113  	;***      482 :         r_uart3_callback_error(err_type);
0000020D                     1114  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 482
0000020D 8800                1115  	mov a, [sp+0x00]
0000020F FC000000            1116  	call !!_r_uart3_callback_error@1
00000213                     1117  .BB@LABEL@19_2:	; if_break_bb
00000213                     1118  	;***      483 :     }
00000213                     1119  	;***      484 :     
00000213                     1120  	;***      485 :     rx_data = RXD3;
00000213                     1121  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 485
00000213 8D16                1122  	mov a, 0xFFF16
00000215 9801                1123  	mov [sp+0x01], a
00000217                     1124  	;***      486 : 
00000217                     1125  	;***      487 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1126  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 487
00000217 AF0000              1127  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1128  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1129  	mov a, [sp+0x01]
0000021F 61D300              1130  	bnh $.BB@LABEL@19_6
00000222                     1131  .BB@LABEL@19_3:	; if_then_bb18
00000222                     1132  	;***      488 :     {
00000222                     1133  	;***      489 :         *gp_uart3_rx_address = rx_data;
00000222                     1134  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 489
00000222 EB0000              1135  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1136  	mov [de], a
00000226                     1137  	;***      490 :         gp_uart3_rx_address++;
00000226                     1138  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 490
00000226 A20000              1139  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1140  	;***      491 :         g_uart3_rx_count++;
00000229                     1141  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 491
00000229 A20000              1142  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1143  	;***      492 : 
0000022C                     1144  	;***      493 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1145  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 493
0000022C AF0000              1146  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1147  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1148  	sknz
00000234                     1149  .BB@LABEL@19_4:	; if_then_bb30
00000234                     1150  	;***      494 :         {
00000234                     1151  	;***      495 :             r_uart3_callback_receiveend();
00000234                     1152  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 495
00000234 FC000000            1153  	call !!_r_uart3_callback_receiveend@1
00000238                     1154  .BB@LABEL@19_5:	; return
00000238 C6                  1155  	pop hl
00000239 C0                  1156  	pop ax
0000023A 9EFC                1157  	mov cs, a
0000023C 60                  1158  	mov a, x
0000023D 9EFD                1159  	mov es, a
0000023F C6                  1160  	pop hl
00000240 C4                  1161  	pop de
00000241 C2                  1162  	pop bc
00000242 C0                  1163  	pop ax
00000243                     1164  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 502
00000243 61FC                1165  	reti
00000245                     1166  .BB@LABEL@19_6:	; if_else_bb
00000245                     1167  	;***      496 :         }
00000245                     1168  	;***      497 :     }
00000245                     1169  	;***      498 :     else
00000245                     1170  	;***      499 :     {
00000245                     1171  	;***      500 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1172  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 500
00000245 318E                1173  	shrw ax, 8+0x00000
00000247 FC000000            1174  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1175  	br $.BB@LABEL@19_5
0000024D                     1176  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1177  _r_uart3_interrupt_send@1:
0000024D                     1178  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1179  	;***      501 :     }
0000024D                     1180  	;***      502 : }
0000024D                     1181  	;***      503 : 
0000024D                     1182  	;***      504 : /***********************************************************************************************************************
0000024D                     1183  	;***      505 : * Function Name: r_uart3_interrupt_send
0000024D                     1184  	;***      506 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1185  	;***      507 : * Arguments    : None
0000024D                     1186  	;***      508 : * Return Value : None
0000024D                     1187  	;***      509 : ***********************************************************************************************************************/
0000024D                     1188  	;***      510 : static void __near r_uart3_interrupt_send(void)
0000024D                     1189  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 510
0000024D C1                  1190  	push ax
0000024E C3                  1191  	push bc
0000024F C5                  1192  	push de
00000250 C7                  1193  	push hl
00000251 8EFD                1194  	mov a, es
00000253 70                  1195  	mov x, a
00000254 8EFC                1196  	mov a, cs
00000256 C1                  1197  	push ax
00000257                     1198  	;***      511 : {
00000257                     1199  	;***      512 :     if (g_uart3_tx_count > 0U)
00000257                     1200  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 512
00000257 AF0000              1201  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1202  	clrw bc
0000025B 43                  1203  	cmpw ax, bc
0000025C DF00                1204  	bnz $.BB@LABEL@20_3
0000025E                     1205  .BB@LABEL@20_1:	; if_else_bb
0000025E                     1206  	;***      513 :     {
0000025E                     1207  	;***      514 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1208  	;***      515 :         gp_uart3_tx_address++;
0000025E                     1209  	;***      516 :         g_uart3_tx_count--;
0000025E                     1210  	;***      517 :     }
0000025E                     1211  	;***      518 :     else
0000025E                     1212  	;***      519 :     {
0000025E                     1213  	;***      520 :         r_uart3_callback_sendend();
0000025E                     1214  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 520
0000025E FC000000            1215  	call !!_r_uart3_callback_sendend@1
00000262                     1216  .BB@LABEL@20_2:	; if_else_bb
00000262 C0                  1217  	pop ax
00000263 9EFC                1218  	mov cs, a
00000265 60                  1219  	mov a, x
00000266 9EFD                1220  	mov es, a
00000268 C6                  1221  	pop hl
00000269 C4                  1222  	pop de
0000026A C2                  1223  	pop bc
0000026B C0                  1224  	pop ax
0000026C                     1225  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 522
0000026C 61FC                1226  	reti
0000026E                     1227  .BB@LABEL@20_3:	; if_then_bb
0000026E                     1228  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 514
0000026E EB0000              1229  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1230  	mov a, [de]
00000272 9D14                1231  	mov 0xFFF14, a
00000274                     1232  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 515
00000274 A5                  1233  	incw de
00000275 15                  1234  	movw ax, de
00000276 BF0000              1235  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1236  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 516
00000279 B20000              1237  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1238  	br $.BB@LABEL@20_2
00000087                     1239  	.SECTION .textf,TEXTF
00000087                     1240  _r_uart3_callback_receiveend@1:
00000087                     1241  	.STACK _r_uart3_callback_receiveend@1 = 4
00000087                     1242  	;***      521 :     }
00000087                     1243  	;***      522 : }
00000087                     1244  	;***      523 : 
00000087                     1245  	;***      524 : /***********************************************************************************************************************
00000087                     1246  	;***      525 : * Function Name: r_uart3_callback_receiveend
00000087                     1247  	;***      526 : * Description  : This function is a callback function when UART3 finishes reception.
00000087                     1248  	;***      527 : * Arguments    : None
00000087                     1249  	;***      528 : * Return Value : None
00000087                     1250  	;***      529 : ***********************************************************************************************************************/
00000087                     1251  	;***      530 : static void r_uart3_callback_receiveend(void)
00000087                     1252  	;***      531 : {
00000087                     1253  	;***      532 :     /* Start user code. Do not edit comment generated here */
00000087                     1254  	;***      533 : 	R_UART3_Receive(rec_buf, 7);
00000087                     1255  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 533
00000087 320700              1256  	movw bc, #0x0007
0000008A 300000              1257  	movw ax, #LOWW(_rec_buf)
0000008D EC000000            1258  	br !!_R_UART3_Receive
00000091                     1259  _r_uart3_callback_softwareoverrun@1:
00000091                     1260  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000091                     1261  	;***      534 :     /* End user code. Do not edit comment generated here */
00000091                     1262  	;***      535 : }
00000091                     1263  	;***      536 : 
00000091                     1264  	;***      537 : /***********************************************************************************************************************
00000091                     1265  	;***      538 : * Function Name: r_uart3_callback_softwareoverrun
00000091                     1266  	;***      539 : * Description  : This function is a callback function when UART3 receives an overflow data.
00000091                     1267  	;***      540 : * Arguments    : rx_data -
00000091                     1268  	;***      541 : *                    receive data
00000091                     1269  	;***      542 : * Return Value : None
00000091                     1270  	;***      543 : ***********************************************************************************************************************/
00000091                     1271  	;***      544 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
00000091                     1272  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000091 D7                  1273  	ret
00000092                     1274  _r_uart3_callback_sendend@1:
00000092                     1275  	.STACK _r_uart3_callback_sendend@1 = 4
00000092                     1276  	;***      545 : {
00000092                     1277  	;***      546 :     /* Start user code. Do not edit comment generated here */
00000092                     1278  	;***      547 :     /* End user code. Do not edit comment generated here */
00000092                     1279  	;***      548 : }
00000092                     1280  	;***      549 : 
00000092                     1281  	;***      550 : /***********************************************************************************************************************
00000092                     1282  	;***      551 : * Function Name: r_uart3_callback_sendend
00000092                     1283  	;***      552 : * Description  : This function is a callback function when UART3 finishes transmission.
00000092                     1284  	;***      553 : * Arguments    : None
00000092                     1285  	;***      554 : * Return Value : None
00000092                     1286  	;***      555 : ***********************************************************************************************************************/
00000092                     1287  	;***      556 : static void r_uart3_callback_sendend(void)
00000092                     1288  	;***      557 : {
00000092                     1289  	;***      558 :     /* Start user code. Do not edit comment generated here */
00000092                     1290  	;***      559 : 	g_uart3_sendend++;
00000092                     1291  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 559
00000092 A00000              1292  	inc !LOWW(_g_uart3_sendend)
00000095 D7                  1293  	ret
00000096                     1294  _r_uart3_callback_error@1:
00000096                     1295  	.STACK _r_uart3_callback_error@1 = 4
00000096                     1296  	;***      560 :     /* End user code. Do not edit comment generated here */
00000096                     1297  	;***      561 : }
00000096                     1298  	;***      562 : 
00000096                     1299  	;***      563 : /***********************************************************************************************************************
00000096                     1300  	;***      564 : * Function Name: r_uart3_callback_error
00000096                     1301  	;***      565 : * Description  : This function is a callback function when UART3 reception error occurs.
00000096                     1302  	;***      566 : * Arguments    : err_type -
00000096                     1303  	;***      567 : *                    error type value
00000096                     1304  	;***      568 : * Return Value : None
00000096                     1305  	;***      569 : ***********************************************************************************************************************/
00000096                     1306  	;***      570 : static void r_uart3_callback_error(uint8_t err_type)
00000096                     1307  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 570
00000096 D7                  1308  	ret
00000097                     1309  	;***      571 : {
00000097                     1310  	;***      572 :     /* Start user code. Do not edit comment generated here */
00000097                     1311  	;***      573 :     /* End user code. Do not edit comment generated here */
00000097                     1312  	;***      574 : }
00000097                     1313  	;***      575 : 
00000097                     1314  	;***      576 : /* Start user code for adding. Do not edit comment generated here */
00000097                     1315  	;***      577 : /* End user code. Do not edit comment generated here */
00000000                     1316  	.SECTION .bss,BSS
00000000                     1317  _g_csi_count:
00000000                     1318  	.DS (1)
00000001                     1319  _g_csi_err:
00000001                     1320  	.DS (1)
00000002                     1321  _g_csi_send_end:
00000002                     1322  	.DS (1)
00000003                     1323  _g_csi_rev_end:
00000003                     1324  	.DS (1)
00000004                     1325  _g_uart1_end:
00000004                     1326  	.DS (1)
00000005                     1327  _g_uart2_send:
00000005                     1328  	.DS (1)
00000006                     1329  _g_uart2_receive:
00000006                     1330  	.DS (1)
00000007                     1331  _g_rx_data:
00000007                     1332  	.DS (32)
00000027                     1333  _g_uart2_fault:
00000027                     1334  	.DS (1)
00000028                     1335  _g_uart3_sendend:
00000028                     1336  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               151 (00000097) .textf
BSS                  41 (00000029) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl000\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

