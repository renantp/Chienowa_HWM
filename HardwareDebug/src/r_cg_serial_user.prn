RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Wed Jan 12 13:55:52 2022
00000000                       19  
00000000                       20  	.EXTERN _g_machine_state
00000000                       21  	.EXTERN _g_machine_mode
00000000                       22  	.PUBLIC _g_uart3_rx_data
00000000                       23  	.EXTERN _gp_uart1_tx_address
00000000                       24  	.EXTERN _g_uart1_tx_count
00000000                       25  	.EXTERN _gp_uart1_rx_address
00000000                       26  	.EXTERN _g_uart1_rx_count
00000000                       27  	.EXTERN _g_uart1_rx_length
00000000                       28  	.EXTERN _gp_csi00_tx_address
00000000                       29  	.EXTERN _g_csi00_tx_count
00000000                       30  	.EXTERN _gp_csi01_rx_address
00000000                       31  	.EXTERN _gp_csi01_tx_address
00000000                       32  	.EXTERN _g_csi01_tx_count
00000000                       33  	.EXTERN _gp_uart2_tx_address
00000000                       34  	.EXTERN _g_uart2_tx_count
00000000                       35  	.EXTERN _gp_uart2_rx_address
00000000                       36  	.EXTERN _g_uart2_rx_count
00000000                       37  	.EXTERN _g_uart2_rx_length
00000000                       38  	.EXTERN _gp_uart3_tx_address
00000000                       39  	.EXTERN _g_uart3_tx_count
00000000                       40  	.EXTERN _gp_uart3_rx_address
00000000                       41  	.EXTERN _g_uart3_rx_count
00000000                       42  	.EXTERN _g_uart3_rx_length
00000000                       43  	.PUBLIC _send_response_flag
00000000                       44  	.PUBLIC _send_response_time_flag
00000000                       45  	.PUBLIC _send_response_number_flag
00000000                       46  	.PUBLIC _recived_time_setting_flag
00000000                       47  	.PUBLIC _send_respone_status_flag
00000000                       48  	.PUBLIC _recived_number_setting_flag
00000000                       49  	.PUBLIC _g_commnunication_flag
00000000                       50  	.PUBLIC _g_csi_count
00000000                       51  	.PUBLIC _g_csi_err
00000000                       52  	.PUBLIC _g_csi_send_end
00000000                       53  	.PUBLIC _g_csi_rev_end
00000000                       54  	.PUBLIC _g_uart1_send
00000000                       55  	.PUBLIC _g_uart2_sendend
00000000                       56  	.PUBLIC _g_uart2_receive
00000000                       57  	.PUBLIC _g_rx_data
00000000                       58  	.PUBLIC _g_uart2_fault
00000000                       59  	.PUBLIC _g_uart3_sendend
00000000                       60  	.PUBLIC _isCommandNeedResponse
00000000                       61  	.EXTERN _R_CSI01_Stop
00000000                       62  	.EXTERN _R_UART2_Receive
00000000                       63  	.EXTERN _isThisCommand
00000000                       64  	.EXTERN _R_UART3_Receive
00000000                       65  
00000000                       66  	.SECTION .textf,TEXTF
00000000                       67  _isCommandNeedResponse:
00000000                       68  	.STACK _isCommandNeedResponse = 4
00000000                       69  	;***        1 : /***********************************************************************************************************************
00000000                       70  	;***        2 :  * DISCLAIMER
00000000                       71  	;***        3 :  * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       72  	;***        4 :  * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       73  	;***        5 :  * applicable laws, including copyright laws.
00000000                       74  	;***        6 :  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       75  	;***        7 :  * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       76  	;***        8 :  * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       77  	;***        9 :  * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       78  	;***       10 :  * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       79  	;***       11 :  * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       80  	;***       12 :  * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability
00000000                       81  	;***       13 :  * of this software. By using this software, you agree to the additional terms and conditions found by accessing the
00000000                       82  	;***       14 :  * following link:
00000000                       83  	;***       15 :  * http://www.renesas.com/disclaimer
00000000                       84  	;***       16 :  *
00000000                       85  	;***       17 :  * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       86  	;***       18 :  ***********************************************************************************************************************/
00000000                       87  	;***       19 : 
00000000                       88  	;***       20 : /***********************************************************************************************************************
00000000                       89  	;***       21 :  * File Name    : r_cg_serial_user.c
00000000                       90  	;***       22 :  * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       91  	;***       23 :  * Device(s)    : R5F104ML
00000000                       92  	;***       24 :  * Tool-Chain   : CCRL
00000000                       93  	;***       25 :  * Description  : This file implements device driver for Serial module.
00000000                       94  	;***       26 :  * Creation Date: 30/11/2021
00000000                       95  	;***       27 :  ***********************************************************************************************************************/
00000000                       96  	;***       28 : 
00000000                       97  	;***       29 : /***********************************************************************************************************************
00000000                       98  	;***       30 :  Includes
00000000                       99  	;***       31 :  ***********************************************************************************************************************/
00000000                      100  	;***       32 : #include "hwm/main.h"
00000000                      101  	;***       33 : #include "r_cg_macrodriver.h"
00000000                      102  	;***       34 : #include "r_cg_serial.h"
00000000                      103  	;***       35 : /* Start user code for include. Do not edit comment generated here */
00000000                      104  	;***       36 : #include "r_cg_wdt.h"
00000000                      105  	;***       37 : #include "r_cg_userdefine.h"
00000000                      106  	;***       38 : 
00000000                      107  	;***       39 : /***********************************************************************************************************************
00000000                      108  	;***       40 :  Pragma directive
00000000                      109  	;***       41 :  ***********************************************************************************************************************/
00000000                      110  	;***       42 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      111  	;***       43 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      112  	;***       44 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      113  	;***       45 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      114  	;***       46 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      115  	;***       47 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      116  	;***       48 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      117  	;***       49 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      118  	;***       50 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      119  	;***       51 : /* End user code. Do not edit comment generated here */
00000000                      120  	;***       52 : 
00000000                      121  	;***       53 : /***********************************************************************************************************************
00000000                      122  	;***       54 :  Global variables and functions
00000000                      123  	;***       55 :  ***********************************************************************************************************************/
00000000                      124  	;***       56 : extern volatile uint8_t *gp_uart1_tx_address; /* uart1 send buffer address */
00000000                      125  	;***       57 : extern volatile uint16_t g_uart1_tx_count; /* uart1 send data number */
00000000                      126  	;***       58 : extern volatile uint8_t *gp_uart1_rx_address; /* uart1 receive buffer address */
00000000                      127  	;***       59 : extern volatile uint16_t g_uart1_rx_count; /* uart1 receive data number */
00000000                      128  	;***       60 : extern volatile uint16_t g_uart1_rx_length; /* uart1 receive data length */
00000000                      129  	;***       61 : extern volatile uint8_t *gp_csi00_rx_address; /* csi00 receive buffer address */
00000000                      130  	;***       62 : extern volatile uint16_t g_csi00_rx_length; /* csi00 receive data length */
00000000                      131  	;***       63 : extern volatile uint16_t g_csi00_rx_count; /* csi00 receive data count */
00000000                      132  	;***       64 : extern volatile uint8_t *gp_csi00_tx_address; /* csi00 send buffer address */
00000000                      133  	;***       65 : extern volatile uint16_t g_csi00_send_length; /* csi00 send data length */
00000000                      134  	;***       66 : extern volatile uint16_t g_csi00_tx_count; /* csi00 send data count */
00000000                      135  	;***       67 : extern volatile uint8_t *gp_csi01_rx_address; /* csi01 receive buffer address */
00000000                      136  	;***       68 : extern volatile uint16_t g_csi01_rx_length; /* csi01 receive data length */
00000000                      137  	;***       69 : extern volatile uint16_t g_csi01_rx_count; /* csi01 receive data count */
00000000                      138  	;***       70 : extern volatile uint8_t *gp_csi01_tx_address; /* csi01 send buffer address */
00000000                      139  	;***       71 : extern volatile uint16_t g_csi01_send_length; /* csi01 send data length */
00000000                      140  	;***       72 : extern volatile uint16_t g_csi01_tx_count; /* csi01 send data count */
00000000                      141  	;***       73 : extern volatile uint8_t *gp_uart2_tx_address; /* uart2 send buffer address */
00000000                      142  	;***       74 : extern volatile uint16_t g_uart2_tx_count; /* uart2 send data number */
00000000                      143  	;***       75 : extern volatile uint8_t *gp_uart2_rx_address; /* uart2 receive buffer address */
00000000                      144  	;***       76 : extern volatile uint16_t g_uart2_rx_count; /* uart2 receive data number */
00000000                      145  	;***       77 : extern volatile uint16_t g_uart2_rx_length; /* uart2 receive data length */
00000000                      146  	;***       78 : extern volatile uint8_t *gp_uart3_tx_address; /* uart3 send buffer address */
00000000                      147  	;***       79 : extern volatile uint16_t g_uart3_tx_count; /* uart3 send data number */
00000000                      148  	;***       80 : extern volatile uint8_t *gp_uart3_rx_address; /* uart3 receive buffer address */
00000000                      149  	;***       81 : extern volatile uint16_t g_uart3_rx_count; /* uart3 receive data number */
00000000                      150  	;***       82 : extern volatile uint16_t g_uart3_rx_length; /* uart3 receive data length */
00000000                      151  	;***       83 : /* Start user code for global. Do not edit comment generated here */
00000000                      152  	;***       84 : volatile uint8_t send_response_flag, send_response_time_flag,
00000000                      153  	;***       85 : 		send_response_number_flag, recived_time_setting_flag,
00000000                      154  	;***       86 : 		send_respone_status_flag, recived_number_setting_flag;
00000000                      155  	;***       87 : volatile struct Communicaition_flag_s g_commnunication_flag;
00000000                      156  	;***       88 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end,
00000000                      157  	;***       89 : 		g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      158  	;***       90 : uint8_t g_rx_data[4 * 40];
00000000                      159  	;***       91 : uint8_t g_uart3_rx_data[8];
00000000                      160  	;***       92 : volatile uint8_t g_uart2_fault;
00000000                      161  	;***       93 : volatile uint8_t g_uart3_sendend;
00000000                      162  	;***       94 : uint8_t isCommandNeedResponse(uint8_t *data) {
00000000                      163  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 94
00000000 14                   164  	movw de, ax
00000001                      165  	;***       95 : 	if ((data[0] == H_SET) && (data[1] == NEXT_ANIMATION)) {
00000001                      166  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 95
00000001 89                   167  	mov a, [de]
00000002 70                   168  	mov x, a
00000003 4C53                 169  	cmp a, #0x53
00000005 DF00                 170  	bnz $.BB@LABEL@1_2
00000007                      171  .BB@LABEL@1_1:	; bb
00000007 8A01                 172  	mov a, [de+0x01]
00000009 4C13                 173  	cmp a, #0x13
0000000B DD00                 174  	bz $.BB@LABEL@1_7
0000000D                      175  .BB@LABEL@1_2:	; if_break_bb
0000000D 60                   176  	mov a, x
0000000E                      177  	;***       96 : 		return 0;
0000000E                      178  	;***       97 : 	}
0000000E                      179  	;***       98 : 	switch ((enum UART_header_e) *data) {
0000000E                      180  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 98
0000000E 0CBD                 181  	add a, #0xBD
00000010 DD00                 182  	bz $.BB@LABEL@1_6
00000012                      183  .BB@LABEL@1_3:	; if_break_bb
00000012 0CFE                 184  	add a, #0xFE
00000014 DD00                 185  	bz $.BB@LABEL@1_6
00000016                      186  .BB@LABEL@1_4:	; if_break_bb
00000016 0CF3                 187  	add a, #0xF3
00000018 DD00                 188  	bz $.BB@LABEL@1_6
0000001A                      189  .BB@LABEL@1_5:	; if_break_bb
0000001A 91                   190  	dec a
0000001B DF00                 191  	bnz $.BB@LABEL@1_7
0000001D                      192  .BB@LABEL@1_6:	; switch_clause_bb26
0000001D E50000               193  	oneb !LOWW(_g_commnunication_flag)
00000020 E1                   194  	oneb a
00000021                      195  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 118
00000021 D7                   196  	ret
00000022                      197  .BB@LABEL@1_7:	; bb30
00000022                      198  	;***       99 : //		case H_ALARM:
00000022                      199  	;***      100 : //			commnunication_flag.send_response_flag = 1;
00000022                      200  	;***      101 : //			break;
00000022                      201  	;***      102 : 	case H_CLEAR:
00000022                      202  	;***      103 : 		g_commnunication_flag.send_response_flag = 1;
00000022                      203  	;***      104 : 		break;
00000022                      204  	;***      105 : 	case H_ERROR:
00000022                      205  	;***      106 : 		g_commnunication_flag.send_response_flag = 1;
00000022                      206  	;***      107 : 		break;
00000022                      207  	;***      108 : 	case H_READ:
00000022                      208  	;***      109 : 		g_commnunication_flag.send_response_flag = 1;
00000022                      209  	;***      110 : 		break;
00000022                      210  	;***      111 : 	case H_SET:
00000022                      211  	;***      112 : 		g_commnunication_flag.send_response_flag = 1;
00000022                      212  	;***      113 : 		break;
00000022                      213  	;***      114 : 	default:
00000022                      214  	;***      115 : 		return 0;
00000022                      215  	;***      116 : 	}
00000022                      216  	;***      117 : 	return 1;
00000022                      217  	;***      118 : }
00000022 F1                   218  	clrb a
00000023 D7                   219  	ret
00000000                      220  	.SECTION .text,TEXT
00000000                      221  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      222  _r_uart1_interrupt_receive@1:
00000000                      223  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      224  	;***      119 : /* End user code. Do not edit comment generated here */
00000000                      225  	;***      120 : 
00000000                      226  	;***      121 : /***********************************************************************************************************************
00000000                      227  	;***      122 :  * Function Name: r_uart1_interrupt_receive
00000000                      228  	;***      123 :  * Description  : This function is INTSR1 interrupt service routine.
00000000                      229  	;***      124 :  * Arguments    : None
00000000                      230  	;***      125 :  * Return Value : None
00000000                      231  	;***      126 :  ***********************************************************************************************************************/
00000000                      232  	;***      127 : static void __near r_uart1_interrupt_receive(void) {
00000000                      233  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 127
00000000 C1                   234  	push ax
00000001 C3                   235  	push bc
00000002 C5                   236  	push de
00000003 C7                   237  	push hl
00000004 8EFD                 238  	mov a, es
00000006 70                   239  	mov x, a
00000007 8EFC                 240  	mov a, cs
00000009 C1                   241  	push ax
0000000A C7                   242  	push hl
0000000B                      243  	;***      128 : 	volatile uint8_t rx_data;
0000000B                      244  	;***      129 : 	volatile uint8_t err_type;
0000000B                      245  	;***      130 : 
0000000B                      246  	;***      131 : 	err_type = (uint8_t) (SSR03 & 0x0007U);
0000000B                      247  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
0000000B AF0601               248  	movw ax, !0x0106
0000000E 60                   249  	mov a, x
0000000F 5C07                 250  	and a, #0x07
00000011 9800                 251  	mov [sp+0x00], a
00000013                      252  	;***      132 : 	SIR03 = (uint16_t) err_type;
00000013                      253  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 132
00000013 8800                 254  	mov a, [sp+0x00]
00000015 318E                 255  	shrw ax, 8+0x00000
00000017 BF0E01               256  	movw !0x010E, ax
0000001A                      257  	;***      133 : 
0000001A                      258  	;***      134 : 	if (err_type != 0U) {
0000001A                      259  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 134
0000001A 8800                 260  	mov a, [sp+0x00]
0000001C D1                   261  	cmp0 a
0000001D DD00                 262  	bz $.BB@LABEL@2_2
0000001F                      263  .BB@LABEL@2_1:	; if_then_bb
0000001F                      264  	;***      135 : 		r_uart1_callback_error(err_type);
0000001F                      265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
0000001F 8800                 266  	mov a, [sp+0x00]
00000021 FC000000             267  	call !!_r_uart1_callback_error@1
00000025                      268  .BB@LABEL@2_2:	; if_break_bb
00000025                      269  	;***      136 : 	}
00000025                      270  	;***      137 : 
00000025                      271  	;***      138 : 	rx_data = RXD1;
00000025                      272  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
00000025 8E46                 273  	mov a, 0xFFF46
00000027 9801                 274  	mov [sp+0x01], a
00000029                      275  	;***      139 : 
00000029                      276  	;***      140 : 	if (g_uart1_rx_length > g_uart1_rx_count) {
00000029                      277  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 140
00000029 AF0000               278  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               279  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 280  	mov a, [sp+0x01]
00000031 61D300               281  	bnh $.BB@LABEL@2_6
00000034                      282  .BB@LABEL@2_3:	; if_then_bb18
00000034                      283  	;***      141 : 		*gp_uart1_rx_address = rx_data;
00000034                      284  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 141
00000034 EB0000               285  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   286  	mov [de], a
00000038                      287  	;***      142 : 		gp_uart1_rx_address++;
00000038                      288  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
00000038 A20000               289  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      290  	;***      143 : 		g_uart1_rx_count++;
0000003B                      291  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
0000003B A20000               292  	incw !LOWW(_g_uart1_rx_count)
0000003E                      293  	;***      144 : 
0000003E                      294  	;***      145 : 		if (g_uart1_rx_length == g_uart1_rx_count) {
0000003E                      295  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 145
0000003E AF0000               296  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               297  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 298  	sknz
00000046                      299  .BB@LABEL@2_4:	; if_then_bb30
00000046                      300  	;***      146 : 			r_uart1_callback_receiveend();
00000046                      301  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
00000046 FC000000             302  	call !!_r_uart1_callback_receiveend@1
0000004A                      303  .BB@LABEL@2_5:	; return
0000004A C6                   304  	pop hl
0000004B C0                   305  	pop ax
0000004C 9EFC                 306  	mov cs, a
0000004E 60                   307  	mov a, x
0000004F 9EFD                 308  	mov es, a
00000051 C6                   309  	pop hl
00000052 C4                   310  	pop de
00000053 C2                   311  	pop bc
00000054 C0                   312  	pop ax
00000055                      313  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 151
00000055 61FC                 314  	reti
00000057                      315  .BB@LABEL@2_6:	; if_else_bb
00000057                      316  	;***      147 : 		}
00000057                      317  	;***      148 : 	} else {
00000057                      318  	;***      149 : 		r_uart1_callback_softwareoverrun(rx_data);
00000057                      319  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 149
00000057 318E                 320  	shrw ax, 8+0x00000
00000059 FC000000             321  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 322  	br $.BB@LABEL@2_5
0000005F                      323  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      324  _r_uart1_interrupt_send@1:
0000005F                      325  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      326  	;***      150 : 	}
0000005F                      327  	;***      151 : }
0000005F                      328  	;***      152 : 
0000005F                      329  	;***      153 : /***********************************************************************************************************************
0000005F                      330  	;***      154 :  * Function Name: r_uart1_interrupt_send
0000005F                      331  	;***      155 :  * Description  : This function is INTST1 interrupt service routine.
0000005F                      332  	;***      156 :  * Arguments    : None
0000005F                      333  	;***      157 :  * Return Value : None
0000005F                      334  	;***      158 :  ***********************************************************************************************************************/
0000005F                      335  	;***      159 : static void __near r_uart1_interrupt_send(void) {
0000005F                      336  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 159
0000005F C1                   337  	push ax
00000060 C3                   338  	push bc
00000061 C5                   339  	push de
00000062 C7                   340  	push hl
00000063 8EFD                 341  	mov a, es
00000065 70                   342  	mov x, a
00000066 8EFC                 343  	mov a, cs
00000068 C1                   344  	push ax
00000069                      345  	;***      160 : 	if (g_uart1_tx_count > 0U) {
00000069                      346  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 160
00000069 AF0000               347  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   348  	clrw bc
0000006D 43                   349  	cmpw ax, bc
0000006E DF00                 350  	bnz $.BB@LABEL@3_3
00000070                      351  .BB@LABEL@3_1:	; if_else_bb
00000070                      352  	;***      161 : 		TXD1 = *gp_uart1_tx_address;
00000070                      353  	;***      162 : 		gp_uart1_tx_address++;
00000070                      354  	;***      163 : 		g_uart1_tx_count--;
00000070                      355  	;***      164 : 	} else {
00000070                      356  	;***      165 : 		r_uart1_callback_sendend();
00000070                      357  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000070 FC000000             358  	call !!_r_uart1_callback_sendend@1
00000074                      359  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   360  	pop ax
00000075 9EFC                 361  	mov cs, a
00000077 60                   362  	mov a, x
00000078 9EFD                 363  	mov es, a
0000007A C6                   364  	pop hl
0000007B C4                   365  	pop de
0000007C C2                   366  	pop bc
0000007D C0                   367  	pop ax
0000007E                      368  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 167
0000007E 61FC                 369  	reti
00000080                      370  .BB@LABEL@3_3:	; if_then_bb
00000080                      371  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 161
00000080 EB0000               372  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   373  	mov a, [de]
00000084 9E44                 374  	mov 0xFFF44, a
00000086                      375  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 162
00000086 A5                   376  	incw de
00000087 15                   377  	movw ax, de
00000088 BF0000               378  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      379  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 163
0000008B B20000               380  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 381  	br $.BB@LABEL@3_2
00000024                      382  	.SECTION .textf,TEXTF
00000024                      383  _r_uart1_callback_receiveend@1:
00000024                      384  	.STACK _r_uart1_callback_receiveend@1 = 4
00000024                      385  	;***      166 : 	}
00000024                      386  	;***      167 : }
00000024                      387  	;***      168 : 
00000024                      388  	;***      169 : /***********************************************************************************************************************
00000024                      389  	;***      170 :  * Function Name: r_uart1_callback_receiveend
00000024                      390  	;***      171 :  * Description  : This function is a callback function when UART1 finishes reception.
00000024                      391  	;***      172 :  * Arguments    : None
00000024                      392  	;***      173 :  * Return Value : None
00000024                      393  	;***      174 :  ***********************************************************************************************************************/
00000024                      394  	;***      175 : static void r_uart1_callback_receiveend(void) {
00000024                      395  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 175
00000024 D7                   396  	ret
00000025                      397  _r_uart1_callback_softwareoverrun@1:
00000025                      398  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000025                      399  	;***      176 : 	/* Start user code. Do not edit comment generated here */
00000025                      400  	;***      177 : 	/* End user code. Do not edit comment generated here */
00000025                      401  	;***      178 : }
00000025                      402  	;***      179 : 
00000025                      403  	;***      180 : /***********************************************************************************************************************
00000025                      404  	;***      181 :  * Function Name: r_uart1_callback_softwareoverrun
00000025                      405  	;***      182 :  * Description  : This function is a callback function when UART1 receives an overflow data.
00000025                      406  	;***      183 :  * Arguments    : rx_data -
00000025                      407  	;***      184 :  *                    receive data
00000025                      408  	;***      185 :  * Return Value : None
00000025                      409  	;***      186 :  ***********************************************************************************************************************/
00000025                      410  	;***      187 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data) {
00000025                      411  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 187
00000025 D7                   412  	ret
00000026                      413  _r_uart1_callback_sendend@1:
00000026                      414  	.STACK _r_uart1_callback_sendend@1 = 4
00000026                      415  	;***      188 : 	/* Start user code. Do not edit comment generated here */
00000026                      416  	;***      189 : 	/* End user code. Do not edit comment generated here */
00000026                      417  	;***      190 : }
00000026                      418  	;***      191 : 
00000026                      419  	;***      192 : /***********************************************************************************************************************
00000026                      420  	;***      193 :  * Function Name: r_uart1_callback_sendend
00000026                      421  	;***      194 :  * Description  : This function is a callback function when UART1 finishes transmission.
00000026                      422  	;***      195 :  * Arguments    : None
00000026                      423  	;***      196 :  * Return Value : None
00000026                      424  	;***      197 :  ***********************************************************************************************************************/
00000026                      425  	;***      198 : static void r_uart1_callback_sendend(void) {
00000026                      426  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 198
00000026 D7                   427  	ret
00000027                      428  _r_uart1_callback_error@1:
00000027                      429  	.STACK _r_uart1_callback_error@1 = 4
00000027                      430  	;***      199 : 	/* Start user code. Do not edit comment generated here */
00000027                      431  	;***      200 : 	/* End user code. Do not edit comment generated here */
00000027                      432  	;***      201 : }
00000027                      433  	;***      202 : 
00000027                      434  	;***      203 : /***********************************************************************************************************************
00000027                      435  	;***      204 :  * Function Name: r_uart1_callback_error
00000027                      436  	;***      205 :  * Description  : This function is a callback function when UART1 reception error occurs.
00000027                      437  	;***      206 :  * Arguments    : err_type -
00000027                      438  	;***      207 :  *                    error type value
00000027                      439  	;***      208 :  * Return Value : None
00000027                      440  	;***      209 :  ***********************************************************************************************************************/
00000027                      441  	;***      210 : static void r_uart1_callback_error(uint8_t err_type) {
00000027                      442  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 210
00000027 D7                   443  	ret
00000090                      444  	.SECTION .text,TEXT
00000090                      445  _r_csi00_interrupt@1	.vector 0x001E
00000090                      446  _r_csi00_interrupt@1:
00000090                      447  	.STACK _r_csi00_interrupt@1 = 16
00000090                      448  	;***      211 : 	/* Start user code. Do not edit comment generated here */
00000090                      449  	;***      212 : 	/* End user code. Do not edit comment generated here */
00000090                      450  	;***      213 : }
00000090                      451  	;***      214 : 
00000090                      452  	;***      215 : /***********************************************************************************************************************
00000090                      453  	;***      216 :  * Function Name: r_csi00_interrupt
00000090                      454  	;***      217 :  * Description  : This function is INTCSI00 interrupt service routine.
00000090                      455  	;***      218 :  * Arguments    : None
00000090                      456  	;***      219 :  * Return Value : None
00000090                      457  	;***      220 :  ***********************************************************************************************************************/
00000090                      458  	;***      221 : static void __near r_csi00_interrupt(void) {
00000090                      459  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 221
00000090 C1                   460  	push ax
00000091 C3                   461  	push bc
00000092 C5                   462  	push de
00000093 C7                   463  	push hl
00000094 8EFD                 464  	mov a, es
00000096 70                   465  	mov x, a
00000097 8EFC                 466  	mov a, cs
00000099 C1                   467  	push ax
0000009A C7                   468  	push hl
0000009B                      469  	;***      222 : 	volatile uint8_t err_type;
0000009B                      470  	;***      223 : 
0000009B                      471  	;***      224 : 	err_type = (uint8_t) (SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      472  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 224
0000009B AF0001               473  	movw ax, !0x0100
0000009E 60                   474  	mov a, x
0000009F 5C01                 475  	and a, #0x01
000000A1 9800                 476  	mov [sp+0x00], a
000000A3                      477  	;***      225 : 	SIR00 = (uint16_t) err_type;
000000A3                      478  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 225
000000A3 8800                 479  	mov a, [sp+0x00]
000000A5 318E                 480  	shrw ax, 8+0x00000
000000A7 BF0801               481  	movw !0x0108, ax
000000AA                      482  	;***      226 : 
000000AA                      483  	;***      227 : 	if (err_type != 1U) {
000000AA                      484  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 227
000000AA 8800                 485  	mov a, [sp+0x00]
000000AC 91                   486  	dec a
000000AD DF00                 487  	bnz $.BB@LABEL@8_2
000000AF                      488  .BB@LABEL@8_1:	; return
000000AF C6                   489  	pop hl
000000B0 C0                   490  	pop ax
000000B1 9EFC                 491  	mov cs, a
000000B3 60                   492  	mov a, x
000000B4 9EFD                 493  	mov es, a
000000B6 C6                   494  	pop hl
000000B7 C4                   495  	pop de
000000B8 C2                   496  	pop bc
000000B9 C0                   497  	pop ax
000000BA                      498  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 236
000000BA 61FC                 499  	reti
000000BC                      500  .BB@LABEL@8_2:	; if_then_bb
000000BC                      501  	;***      228 : 		if (g_csi00_tx_count > 0U) {
000000BC                      502  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 228
000000BC AF0000               503  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   504  	clrw bc
000000C0 43                   505  	cmpw ax, bc
000000C1 DF00                 506  	bnz $.BB@LABEL@8_4
000000C3                      507  .BB@LABEL@8_3:	; if_else_bb
000000C3                      508  	;***      229 : 			SIO00 = *gp_csi00_tx_address;
000000C3                      509  	;***      230 : 			gp_csi00_tx_address++;
000000C3                      510  	;***      231 : 			g_csi00_tx_count--;
000000C3                      511  	;***      232 : 		} else {
000000C3                      512  	;***      233 : 			r_csi00_callback_sendend(); /* complete send */
000000C3                      513  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 233
000000C3 FC000000             514  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 515  	br $.BB@LABEL@8_1
000000C9                      516  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      517  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 229
000000C9 EB0000               518  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   519  	mov a, [de]
000000CD 9D10                 520  	mov 0xFFF10, a
000000CF                      521  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 230
000000CF A5                   522  	incw de
000000D0 15                   523  	movw ax, de
000000D1 BF0000               524  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      525  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 231
000000D4 B20000               526  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 527  	br $.BB@LABEL@8_1
00000028                      528  	.SECTION .textf,TEXTF
00000028                      529  _r_csi00_callback_sendend@1:
00000028                      530  	.STACK _r_csi00_callback_sendend@1 = 4
00000028                      531  	;***      234 : 		}
00000028                      532  	;***      235 : 	}
00000028                      533  	;***      236 : }
00000028                      534  	;***      237 : 
00000028                      535  	;***      238 : /***********************************************************************************************************************
00000028                      536  	;***      239 :  * Function Name: r_csi00_callback_sendend
00000028                      537  	;***      240 :  * Description  : This function is a callback function when CSI00 finishes transmission.
00000028                      538  	;***      241 :  * Arguments    : None
00000028                      539  	;***      242 :  * Return Value : None
00000028                      540  	;***      243 :  ***********************************************************************************************************************/
00000028                      541  	;***      244 : static void r_csi00_callback_sendend(void) {
00000028                      542  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 244
00000028 D7                   543  	ret
000000D9                      544  	.SECTION .text,TEXT
000000D9                      545  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      546  _r_csi01_interrupt@1:
000000D9                      547  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      548  	;***      245 : 	/* Start user code. Do not edit comment generated here */
000000D9                      549  	;***      246 : 	/* End user code. Do not edit comment generated here */
000000D9                      550  	;***      247 : }
000000D9                      551  	;***      248 : 
000000D9                      552  	;***      249 : /***********************************************************************************************************************
000000D9                      553  	;***      250 :  * Function Name: r_csi01_interrupt
000000D9                      554  	;***      251 :  * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      555  	;***      252 :  * Arguments    : None
000000D9                      556  	;***      253 :  * Return Value : None
000000D9                      557  	;***      254 :  ***********************************************************************************************************************/
000000D9                      558  	;***      255 : static void __near r_csi01_interrupt(void) {
000000D9                      559  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 255
000000D9 C1                   560  	push ax
000000DA C3                   561  	push bc
000000DB C5                   562  	push de
000000DC C7                   563  	push hl
000000DD 8EFD                 564  	mov a, es
000000DF 70                   565  	mov x, a
000000E0 8EFC                 566  	mov a, cs
000000E2 C1                   567  	push ax
000000E3 C7                   568  	push hl
000000E4                      569  	;***      256 : 	volatile uint8_t err_type;
000000E4                      570  	;***      257 : 	volatile uint8_t sio_dummy;
000000E4                      571  	;***      258 : 
000000E4                      572  	;***      259 : 	err_type = (uint8_t) (SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      573  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 259
000000E4 AF0201               574  	movw ax, !0x0102
000000E7 60                   575  	mov a, x
000000E8 5C01                 576  	and a, #0x01
000000EA 9800                 577  	mov [sp+0x00], a
000000EC                      578  	;***      260 : 	SIR01 = (uint16_t) err_type;
000000EC                      579  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 260
000000EC 8800                 580  	mov a, [sp+0x00]
000000EE 318E                 581  	shrw ax, 8+0x00000
000000F0 BF0A01               582  	movw !0x010A, ax
000000F3                      583  	;***      261 : 
000000F3                      584  	;***      262 : 	if (1U == err_type) {
000000F3                      585  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 262
000000F3 8800                 586  	mov a, [sp+0x00]
000000F5 91                   587  	dec a
000000F6 DF00                 588  	bnz $.BB@LABEL@10_2
000000F8                      589  .BB@LABEL@10_1:	; if_then_bb
000000F8                      590  	;***      263 : 		r_csi01_callback_error(err_type); /* overrun error occurs */
000000F8                      591  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 263
000000F8 8800                 592  	mov a, [sp+0x00]
000000FA FC000000             593  	call !!_r_csi01_callback_error@1
000000FE EF00                 594  	br $.BB@LABEL@10_15
00000100                      595  .BB@LABEL@10_2:	; if_else_bb
00000100                      596  	;***      264 : 	} else {
00000100                      597  	;***      265 : 		if (g_csi01_tx_count > 0U) {
00000100                      598  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 265
00000100 AF0000               599  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   600  	clrw bc
00000104 43                   601  	cmpw ax, bc
00000105 DF00                 602  	bnz $.BB@LABEL@10_8
00000107                      603  .BB@LABEL@10_3:	; if_else_bb42
00000107                      604  	;***      266 : 			if (0U != gp_csi01_rx_address) {
00000107                      605  	;***      267 : 				*gp_csi01_rx_address = SIO01;
00000107                      606  	;***      268 : 				gp_csi01_rx_address++;
00000107                      607  	;***      269 : 			} else {
00000107                      608  	;***      270 : 				sio_dummy = SIO01;
00000107                      609  	;***      271 : 			}
00000107                      610  	;***      272 : 
00000107                      611  	;***      273 : 			if (0U != gp_csi01_tx_address) {
00000107                      612  	;***      274 : 				SIO01 = *gp_csi01_tx_address;
00000107                      613  	;***      275 : 				gp_csi01_tx_address++;
00000107                      614  	;***      276 : 			} else {
00000107                      615  	;***      277 : 				SIO01 = 0xFFU;
00000107                      616  	;***      278 : 			}
00000107                      617  	;***      279 : 
00000107                      618  	;***      280 : 			g_csi01_tx_count--;
00000107                      619  	;***      281 : 		} else {
00000107                      620  	;***      282 : 			if (0U == g_csi01_tx_count) {
00000107                      621  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 282
00000107 AF0000               622  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   623  	cmpw ax, bc
0000010B DF00                 624  	bnz $.BB@LABEL@10_7
0000010D                      625  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      626  	;***      283 : 				if (0U != gp_csi01_rx_address) {
0000010D                      627  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 283
0000010D AF0000               628  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   629  	cmpw ax, bc
00000111 DF00                 630  	bnz $.BB@LABEL@10_6
00000113                      631  .BB@LABEL@10_5:	; if_else_bb55
00000113                      632  	;***      284 : 					*gp_csi01_rx_address = SIO01;
00000113                      633  	;***      285 : 				} else {
00000113                      634  	;***      286 : 					sio_dummy = SIO01;
00000113                      635  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 286
00000113 8D12                 636  	mov a, 0xFFF12
00000115 9801                 637  	mov [sp+0x01], a
00000117 EF00                 638  	br $.BB@LABEL@10_7
00000119                      639  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   640  	movw de, ax
0000011A                      641  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 284
0000011A 8D12                 642  	mov a, 0xFFF12
0000011C 99                   643  	mov [de], a
0000011D                      644  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      645  	;***      287 : 				}
0000011D                      646  	;***      288 : 			}
0000011D                      647  	;***      289 : 
0000011D                      648  	;***      290 : 			r_csi01_callback_sendend(); /* complete send */
0000011D                      649  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 290
0000011D FC000000             650  	call !!_r_csi01_callback_sendend@1
00000121                      651  	;***      291 : 			r_csi01_callback_receiveend(); /* complete receive */
00000121                      652  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 291
00000121 FC000000             653  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 654  	br $.BB@LABEL@10_15
00000127                      655  .BB@LABEL@10_8:	; if_then_bb16
00000127                      656  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 266
00000127 AF0000               657  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   658  	cmpw ax, bc
0000012B DF00                 659  	bnz $.BB@LABEL@10_10
0000012D                      660  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      661  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 270
0000012D 8D12                 662  	mov a, 0xFFF12
0000012F 9801                 663  	mov [sp+0x01], a
00000131 EF00                 664  	br $.BB@LABEL@10_11
00000133                      665  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   666  	movw de, ax
00000134                      667  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 267
00000134 8D12                 668  	mov a, 0xFFF12
00000136 99                   669  	mov [de], a
00000137                      670  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 268
00000137 A20000               671  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      672  .BB@LABEL@10_11:	; if_break_bb
0000013A                      673  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 273
0000013A AF0000               674  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   675  	cmpw ax, bc
0000013E DF00                 676  	bnz $.BB@LABEL@10_13
00000140                      677  .BB@LABEL@10_12:	; if_else_bb38
00000140                      678  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 277
00000140 CD12FF               679  	mov 0xFFF12, #0xFF
00000143 EF00                 680  	br $.BB@LABEL@10_14
00000145                      681  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   682  	movw de, ax
00000146                      683  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 274
00000146 89                   684  	mov a, [de]
00000147 9D12                 685  	mov 0xFFF12, a
00000149                      686  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 275
00000149 A5                   687  	incw de
0000014A 15                   688  	movw ax, de
0000014B BF0000               689  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      690  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      691  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 280
0000014E B20000               692  	decw !LOWW(_g_csi01_tx_count)
00000151                      693  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   694  	pop hl
00000152 C0                   695  	pop ax
00000153 9EFC                 696  	mov cs, a
00000155 60                   697  	mov a, x
00000156 9EFD                 698  	mov es, a
00000158 C6                   699  	pop hl
00000159 C4                   700  	pop de
0000015A C2                   701  	pop bc
0000015B C0                   702  	pop ax
0000015C                      703  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 294
0000015C 61FC                 704  	reti
00000029                      705  	.SECTION .textf,TEXTF
00000029                      706  _r_csi01_callback_receiveend@1:
00000029                      707  	.STACK _r_csi01_callback_receiveend@1 = 4
00000029                      708  	;***      292 : 		}
00000029                      709  	;***      293 : 	}
00000029                      710  	;***      294 : }
00000029                      711  	;***      295 : 
00000029                      712  	;***      296 : /***********************************************************************************************************************
00000029                      713  	;***      297 :  * Function Name: r_csi01_callback_receiveend
00000029                      714  	;***      298 :  * Description  : This function is a callback function when CSI01 finishes reception.
00000029                      715  	;***      299 :  * Arguments    : None
00000029                      716  	;***      300 :  * Return Value : None
00000029                      717  	;***      301 :  ***********************************************************************************************************************/
00000029                      718  	;***      302 : static void r_csi01_callback_receiveend(void) {
00000029                      719  	;***      303 : 	/* Start user code. Do not edit comment generated here */
00000029                      720  	;***      304 : 	g_csi_rev_end++;
00000029                      721  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 304
00000029 A00000               722  	inc !LOWW(_g_csi_rev_end)
0000002C                      723  	;***      305 : 	R_CSI01_Stop();
0000002C                      724  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 305
0000002C EC000000             725  	br !!_R_CSI01_Stop
00000030                      726  _r_csi01_callback_error@1:
00000030                      727  	.STACK _r_csi01_callback_error@1 = 4
00000030                      728  	;***      306 : 	/* End user code. Do not edit comment generated here */
00000030                      729  	;***      307 : }
00000030                      730  	;***      308 : 
00000030                      731  	;***      309 : /***********************************************************************************************************************
00000030                      732  	;***      310 :  * Function Name: r_csi01_callback_error
00000030                      733  	;***      311 :  * Description  : This function is a callback function when CSI01 reception error occurs.
00000030                      734  	;***      312 :  * Arguments    : err_type -
00000030                      735  	;***      313 :  *                    error type value
00000030                      736  	;***      314 :  * Return Value : None
00000030                      737  	;***      315 :  ***********************************************************************************************************************/
00000030                      738  	;***      316 : static void r_csi01_callback_error(uint8_t err_type) {
00000030                      739  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 316
00000030 D7                   740  	ret
00000031                      741  _r_csi01_callback_sendend@1:
00000031                      742  	.STACK _r_csi01_callback_sendend@1 = 4
00000031                      743  	;***      317 : 	/* Start user code. Do not edit comment generated here */
00000031                      744  	;***      318 : 
00000031                      745  	;***      319 : 	/* End user code. Do not edit comment generated here */
00000031                      746  	;***      320 : }
00000031                      747  	;***      321 : 
00000031                      748  	;***      322 : /***********************************************************************************************************************
00000031                      749  	;***      323 :  * Function Name: r_csi01_callback_sendend
00000031                      750  	;***      324 :  * Description  : This function is a callback function when CSI01 finishes transmission.
00000031                      751  	;***      325 :  * Arguments    : None
00000031                      752  	;***      326 :  * Return Value : None
00000031                      753  	;***      327 :  ***********************************************************************************************************************/
00000031                      754  	;***      328 : static void r_csi01_callback_sendend(void) {
00000031                      755  	;***      329 : 	/* Start user code. Do not edit comment generated here */
00000031                      756  	;***      330 : 	g_csi_send_end++;
00000031                      757  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 330
00000031 A00000               758  	inc !LOWW(_g_csi_send_end)
00000034 D7                   759  	ret
0000015E                      760  	.SECTION .text,TEXT
0000015E                      761  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      762  _r_uart2_interrupt_receive@1:
0000015E                      763  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      764  	;***      331 : 	/* End user code. Do not edit comment generated here */
0000015E                      765  	;***      332 : }
0000015E                      766  	;***      333 : 
0000015E                      767  	;***      334 : /***********************************************************************************************************************
0000015E                      768  	;***      335 :  * Function Name: r_uart2_interrupt_receive
0000015E                      769  	;***      336 :  * Description  : This function is INTSR2 interrupt service routine.
0000015E                      770  	;***      337 :  * Arguments    : None
0000015E                      771  	;***      338 :  * Return Value : None
0000015E                      772  	;***      339 :  ***********************************************************************************************************************/
0000015E                      773  	;***      340 : static void __near r_uart2_interrupt_receive(void) {
0000015E                      774  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 340
0000015E C1                   775  	push ax
0000015F C3                   776  	push bc
00000160 C5                   777  	push de
00000161 C7                   778  	push hl
00000162 8EFD                 779  	mov a, es
00000164 70                   780  	mov x, a
00000165 8EFC                 781  	mov a, cs
00000167 C1                   782  	push ax
00000168 C7                   783  	push hl
00000169                      784  	;***      341 : 	volatile uint8_t rx_data;
00000169                      785  	;***      342 : 	volatile uint8_t err_type;
00000169                      786  	;***      343 : 
00000169                      787  	;***      344 : 	err_type = (uint8_t) (SSR11 & 0x0007U);
00000169                      788  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 344
00000169 AF4201               789  	movw ax, !0x0142
0000016C 60                   790  	mov a, x
0000016D 5C07                 791  	and a, #0x07
0000016F 9800                 792  	mov [sp+0x00], a
00000171                      793  	;***      345 : 	SIR11 = (uint16_t) err_type;
00000171                      794  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 345
00000171 8800                 795  	mov a, [sp+0x00]
00000173 318E                 796  	shrw ax, 8+0x00000
00000175 BF4A01               797  	movw !0x014A, ax
00000178                      798  	;***      346 : 
00000178                      799  	;***      347 : 	if (err_type != 0U) {
00000178                      800  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 347
00000178 8800                 801  	mov a, [sp+0x00]
0000017A D1                   802  	cmp0 a
0000017B DD00                 803  	bz $.BB@LABEL@14_2
0000017D                      804  .BB@LABEL@14_1:	; if_then_bb
0000017D                      805  	;***      348 : 		r_uart2_callback_error(err_type);
0000017D                      806  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 348
0000017D 8800                 807  	mov a, [sp+0x00]
0000017F FC000000             808  	call !!_r_uart2_callback_error@1
00000183                      809  .BB@LABEL@14_2:	; if_break_bb
00000183                      810  	;***      349 : 	}
00000183                      811  	;***      350 : 
00000183                      812  	;***      351 : 	rx_data = RXD2;
00000183                      813  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 351
00000183 8E4A                 814  	mov a, 0xFFF4A
00000185 9801                 815  	mov [sp+0x01], a
00000187                      816  	;***      352 : 
00000187                      817  	;***      353 : 	if (g_uart2_rx_length > g_uart2_rx_count) {
00000187                      818  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 353
00000187 AF0000               819  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               820  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 821  	mov a, [sp+0x01]
0000018F 61D300               822  	bnh $.BB@LABEL@14_6
00000192                      823  .BB@LABEL@14_3:	; if_then_bb18
00000192                      824  	;***      354 : 		*gp_uart2_rx_address = rx_data;
00000192                      825  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 354
00000192 EB0000               826  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   827  	mov [de], a
00000196                      828  	;***      355 : 		gp_uart2_rx_address++;
00000196                      829  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 355
00000196 A20000               830  	incw !LOWW(_gp_uart2_rx_address)
00000199                      831  	;***      356 : 		g_uart2_rx_count++;
00000199                      832  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 356
00000199 A20000               833  	incw !LOWW(_g_uart2_rx_count)
0000019C                      834  	;***      357 : 
0000019C                      835  	;***      358 : 		if (g_uart2_rx_length == g_uart2_rx_count) {
0000019C                      836  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 358
0000019C AF0000               837  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               838  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 839  	sknz
000001A4                      840  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      841  	;***      359 : 			r_uart2_callback_receiveend();
000001A4                      842  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 359
000001A4 FC000000             843  	call !!_r_uart2_callback_receiveend@1
000001A8                      844  .BB@LABEL@14_5:	; return
000001A8 C6                   845  	pop hl
000001A9 C0                   846  	pop ax
000001AA 9EFC                 847  	mov cs, a
000001AC 60                   848  	mov a, x
000001AD 9EFD                 849  	mov es, a
000001AF C6                   850  	pop hl
000001B0 C4                   851  	pop de
000001B1 C2                   852  	pop bc
000001B2 C0                   853  	pop ax
000001B3                      854  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 364
000001B3 61FC                 855  	reti
000001B5                      856  .BB@LABEL@14_6:	; if_else_bb
000001B5                      857  	;***      360 : 		}
000001B5                      858  	;***      361 : 	} else {
000001B5                      859  	;***      362 : 		r_uart2_callback_softwareoverrun(rx_data);
000001B5                      860  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 362
000001B5 318E                 861  	shrw ax, 8+0x00000
000001B7 FC000000             862  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 863  	br $.BB@LABEL@14_5
000001BD                      864  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      865  _r_uart2_interrupt_send@1:
000001BD                      866  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      867  	;***      363 : 	}
000001BD                      868  	;***      364 : }
000001BD                      869  	;***      365 : 
000001BD                      870  	;***      366 : /***********************************************************************************************************************
000001BD                      871  	;***      367 :  * Function Name: r_uart2_interrupt_send
000001BD                      872  	;***      368 :  * Description  : This function is INTST2 interrupt service routine.
000001BD                      873  	;***      369 :  * Arguments    : None
000001BD                      874  	;***      370 :  * Return Value : None
000001BD                      875  	;***      371 :  ***********************************************************************************************************************/
000001BD                      876  	;***      372 : static void __near r_uart2_interrupt_send(void) {
000001BD                      877  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 372
000001BD C1                   878  	push ax
000001BE C3                   879  	push bc
000001BF C5                   880  	push de
000001C0 C7                   881  	push hl
000001C1 8EFD                 882  	mov a, es
000001C3 70                   883  	mov x, a
000001C4 8EFC                 884  	mov a, cs
000001C6 C1                   885  	push ax
000001C7                      886  	;***      373 : 	if (g_uart2_tx_count > 0U) {
000001C7                      887  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 373
000001C7 AF0000               888  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   889  	clrw bc
000001CB 43                   890  	cmpw ax, bc
000001CC DF00                 891  	bnz $.BB@LABEL@15_3
000001CE                      892  .BB@LABEL@15_1:	; if_else_bb
000001CE                      893  	;***      374 : 		TXD2 = *gp_uart2_tx_address;
000001CE                      894  	;***      375 : 		gp_uart2_tx_address++;
000001CE                      895  	;***      376 : 		g_uart2_tx_count--;
000001CE                      896  	;***      377 : 	} else {
000001CE                      897  	;***      378 : 		r_uart2_callback_sendend();
000001CE                      898  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 378
000001CE FC000000             899  	call !!_r_uart2_callback_sendend@1
000001D2                      900  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   901  	pop ax
000001D3 9EFC                 902  	mov cs, a
000001D5 60                   903  	mov a, x
000001D6 9EFD                 904  	mov es, a
000001D8 C6                   905  	pop hl
000001D9 C4                   906  	pop de
000001DA C2                   907  	pop bc
000001DB C0                   908  	pop ax
000001DC                      909  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 380
000001DC 61FC                 910  	reti
000001DE                      911  .BB@LABEL@15_3:	; if_then_bb
000001DE                      912  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 374
000001DE EB0000               913  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   914  	mov a, [de]
000001E2 9E48                 915  	mov 0xFFF48, a
000001E4                      916  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 375
000001E4 A5                   917  	incw de
000001E5 15                   918  	movw ax, de
000001E6 BF0000               919  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      920  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 376
000001E9 B20000               921  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 922  	br $.BB@LABEL@15_2
00000035                      923  	.SECTION .textf,TEXTF
00000035                      924  _r_uart2_callback_receiveend@1:
00000035                      925  	.STACK _r_uart2_callback_receiveend@1 = 8
00000035                      926  	;***      379 : 	}
00000035                      927  	;***      380 : }
00000035                      928  	;***      381 : 
00000035                      929  	;***      382 : /***********************************************************************************************************************
00000035                      930  	;***      383 :  * Function Name: r_uart2_callback_receiveend
00000035                      931  	;***      384 :  * Description  : This function is a callback function when UART2 finishes reception.
00000035                      932  	;***      385 :  * Arguments    : None
00000035                      933  	;***      386 :  * Return Value : None
00000035                      934  	;***      387 :  ***********************************************************************************************************************/
00000035                      935  	;***      388 : static void r_uart2_callback_receiveend(void) {
00000035                      936  	;***      389 : 	/* Start user code. Do not edit comment generated here */
00000035                      937  	;***      390 : 
00000035                      938  	;***      391 : 	R_UART2_Receive(g_rx_data, 6);
00000035                      939  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
00000035 320600               940  	movw bc, #0x0006
00000038 300000               941  	movw ax, #LOWW(_g_rx_data)
0000003B FC000000             942  	call !!_R_UART2_Receive
0000003F                      943  	;***      392 : 	g_commnunication_flag.recived_time_setting_flag =
0000003F                      944  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 392
0000003F 40000001             945  	cmp !LOWW(_g_commnunication_flag+0x00004), #0x01
00000043 5102                 946  	mov a, #0x02
00000045 61E8                 947  	skz
00000047                      948  .BB@LABEL@16_1:	; bb5
00000047 8F0000               949  	mov a, !LOWW(_g_commnunication_flag+0x00004)
0000004A                      950  .BB@LABEL@16_2:	; bb8
0000004A 9F0000               951  	mov !LOWW(_g_commnunication_flag+0x00004), a
0000004D                      952  	;***      393 : 			g_commnunication_flag.recived_time_setting_flag == 1 ?
0000004D                      953  	;***      394 : 					2 : g_commnunication_flag.recived_time_setting_flag;
0000004D                      954  	;***      395 : 	g_commnunication_flag.recived_number_setting_flag =
0000004D                      955  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
0000004D 40000001             956  	cmp !LOWW(_g_commnunication_flag+0x00003), #0x01
00000051 5102                 957  	mov a, #0x02
00000053 61E8                 958  	skz
00000055                      959  .BB@LABEL@16_3:	; bb16
00000055 8F0000               960  	mov a, !LOWW(_g_commnunication_flag+0x00003)
00000058                      961  .BB@LABEL@16_4:	; bb20
00000058 9F0000               962  	mov !LOWW(_g_commnunication_flag+0x00003), a
0000005B                      963  	;***      396 : 			g_commnunication_flag.recived_number_setting_flag == 1 ?
0000005B                      964  	;***      397 : 					2 : g_commnunication_flag.recived_number_setting_flag;
0000005B                      965  	;***      398 : 	g_commnunication_flag.recieve_status_flag =
0000005B                      966  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 398
0000005B 40000001             967  	cmp !LOWW(_g_commnunication_flag+0x00008), #0x01
0000005F 5102                 968  	mov a, #0x02
00000061 61E8                 969  	skz
00000063                      970  .BB@LABEL@16_5:	; bb29
00000063 8F0000               971  	mov a, !LOWW(_g_commnunication_flag+0x00008)
00000066                      972  .BB@LABEL@16_6:	; bb33
00000066 9F0000               973  	mov !LOWW(_g_commnunication_flag+0x00008), a
00000069                      974  	;***      399 : 			g_commnunication_flag.recieve_status_flag == 1 ?
00000069                      975  	;***      400 : 					2 : g_commnunication_flag.recieve_status_flag;
00000069                      976  	;***      401 : 	if (isCommandNeedResponse(g_rx_data)
00000069                      977  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 401
00000069 300000               978  	movw ax, #LOWW(_g_rx_data)
0000006C FE0000               979  	call $!_isCommandNeedResponse
0000006F D1                   980  	cmp0 a
00000070                      981  	.bz $!.BB@LABEL@16_59
00000070 61F8                    	 -- Skncond
00000072 EE0000                  	 -- br	**.target1
00000075                      982  .BB@LABEL@16_7:	; bb41
00000075 D50000               983  	cmp0 !LOWW(_g_commnunication_flag+0x00004)
00000078 DF00                 984  	bnz $.BB@LABEL@16_10
0000007A                      985  .BB@LABEL@16_8:	; bb53
0000007A D50000               986  	cmp0 !LOWW(_g_commnunication_flag+0x00003)
0000007D 61F8                 987  	sknz
0000007F                      988  .BB@LABEL@16_9:	; bb65
0000007F D50000               989  	cmp0 !LOWW(_g_commnunication_flag+0x00008)
00000082                      990  .BB@LABEL@16_10:	; bb65
00000082                      991  	.bnz $!.BB@LABEL@16_59
00000082 61E8                    	 -- Skncond
00000084 EE0000                  	 -- br	**.target1
00000087                      992  .BB@LABEL@16_11:	; if_then_bb
00000087                      993  	;***      402 : 			&& g_commnunication_flag.recived_time_setting_flag == 0
00000087                      994  	;***      403 : 			&& g_commnunication_flag.recived_number_setting_flag == 0
00000087                      995  	;***      404 : 			&& g_commnunication_flag.recieve_status_flag == 0) {
00000087                      996  	;***      405 : 		if ((g_rx_data[0] == H_READ) && (g_rx_data[1] == READ_TIME)) {
00000087                      997  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 405
00000087 8F0000               998  	mov a, !LOWW(_g_rx_data)
0000008A 4C52                 999  	cmp a, #0x52
0000008C DF00                1000  	bnz $.BB@LABEL@16_14
0000008E                     1001  .BB@LABEL@16_12:	; bb82
0000008E 40000002            1002  	cmp !LOWW(_g_rx_data+0x00001), #0x02
00000092 DF00                1003  	bnz $.BB@LABEL@16_14
00000094                     1004  .BB@LABEL@16_13:	; if_then_bb95
00000094                     1005  	;***      406 : 			g_commnunication_flag.send_response_time_flag = 1;
00000094                     1006  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 406
00000094 E50000              1007  	oneb !LOWW(_g_commnunication_flag+0x00001)
00000097 EF00                1008  	br $.BB@LABEL@16_28
00000099                     1009  .BB@LABEL@16_14:	; if_else_bb
00000099                     1010  	;***      407 : 		} else if ((g_rx_data[0] == H_SET) && (g_rx_data[1] == SAVE_TIME)) {
00000099                     1011  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 407
00000099 4C53                1012  	cmp a, #0x53
0000009B DF00                1013  	bnz $.BB@LABEL@16_17
0000009D                     1014  .BB@LABEL@16_15:	; bb100
0000009D 40000014            1015  	cmp !LOWW(_g_rx_data+0x00001), #0x14
000000A1 DF00                1016  	bnz $.BB@LABEL@16_17
000000A3                     1017  .BB@LABEL@16_16:	; if_then_bb113
000000A3                     1018  	;***      408 : 			R_UART2_Receive(g_rx_data, timeSettingSize);
000000A3                     1019  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 408
000000A3 329500              1020  	movw bc, #0x0095
000000A6 300000              1021  	movw ax, #LOWW(_g_rx_data)
000000A9 FC000000            1022  	call !!_R_UART2_Receive
000000AD                     1023  	;***      409 : 			g_commnunication_flag.recived_time_setting_flag = 1;
000000AD                     1024  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 409
000000AD E50000              1025  	oneb !LOWW(_g_commnunication_flag+0x00004)
000000B0 EF00                1026  	br $.BB@LABEL@16_31
000000B2                     1027  .BB@LABEL@16_17:	; if_else_bb117
000000B2                     1028  	;***      410 : 		} else if ((g_rx_data[0] == H_READ)
000000B2                     1029  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 410
000000B2 4C52                1030  	cmp a, #0x52
000000B4 DF00                1031  	bnz $.BB@LABEL@16_22
000000B6                     1032  .BB@LABEL@16_18:	; bb122
000000B6 40000017            1033  	cmp !LOWW(_g_rx_data+0x00001), #0x17
000000BA DF00                1034  	bnz $.BB@LABEL@16_20
000000BC                     1035  .BB@LABEL@16_19:	; if_then_bb135
000000BC                     1036  	;***      411 : 				&& (g_rx_data[1] == MACHINE_IO_DATA)) {
000000BC                     1037  	;***      412 : 			g_commnunication_flag.send_response_status_flag = 1;
000000BC                     1038  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 412
000000BC E50000              1039  	oneb !LOWW(_g_commnunication_flag+0x00005)
000000BF EF00                1040  	br $.BB@LABEL@16_37
000000C1                     1041  .BB@LABEL@16_20:	; bb141
000000C1                     1042  	;***      413 : 		} else if ((g_rx_data[0] == H_READ) && (g_rx_data[1] == READ_NUMBER)) {
000000C1                     1043  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 413
000000C1 40000003            1044  	cmp !LOWW(_g_rx_data+0x00001), #0x03
000000C5 DF00                1045  	bnz $.BB@LABEL@16_22
000000C7                     1046  .BB@LABEL@16_21:	; if_then_bb154
000000C7                     1047  	;***      414 : 			g_commnunication_flag.send_response_number_flag = 1;
000000C7                     1048  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 414
000000C7 E50000              1049  	oneb !LOWW(_g_commnunication_flag+0x00002)
000000CA EF00                1050  	br $.BB@LABEL@16_37
000000CC                     1051  .BB@LABEL@16_22:	; if_else_bb155
000000CC                     1052  	;***      415 : 		} else if ((g_rx_data[0] == H_SET) && (g_rx_data[1] == SAVE_NUMBER)) {
000000CC                     1053  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 415
000000CC 4C53                1054  	cmp a, #0x53
000000CE DF00                1055  	bnz $.BB@LABEL@16_25
000000D0                     1056  .BB@LABEL@16_23:	; bb160
000000D0 40000015            1057  	cmp !LOWW(_g_rx_data+0x00001), #0x15
000000D4 DF00                1058  	bnz $.BB@LABEL@16_25
000000D6                     1059  .BB@LABEL@16_24:	; if_then_bb173
000000D6                     1060  	;***      416 : 			R_UART2_Receive(g_rx_data, numberSettingSize);
000000D6                     1061  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 416
000000D6 322500              1062  	movw bc, #0x0025
000000D9 300000              1063  	movw ax, #LOWW(_g_rx_data)
000000DC FC000000            1064  	call !!_R_UART2_Receive
000000E0                     1065  	;***      417 : 			g_commnunication_flag.recived_number_setting_flag = 1;
000000E0                     1066  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 417
000000E0 E50000              1067  	oneb !LOWW(_g_commnunication_flag+0x00003)
000000E3 EF00                1068  	br $.BB@LABEL@16_43
000000E5                     1069  .BB@LABEL@16_25:	; if_else_bb177
000000E5                     1070  	;***      418 : 		} else if ((g_rx_data[0] == H_READ) && (g_rx_data[1] == WASHING_MODE)) {
000000E5                     1071  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
000000E5 4C52                1072  	cmp a, #0x52
000000E7 DF00                1073  	bnz $.BB@LABEL@16_29
000000E9                     1074  .BB@LABEL@16_26:	; bb182
000000E9 40000018            1075  	cmp !LOWW(_g_rx_data+0x00001), #0x18
000000ED DF00                1076  	bnz $.BB@LABEL@16_29
000000EF                     1077  .BB@LABEL@16_27:	; if_then_bb195
000000EF                     1078  	;***      419 : 			g_commnunication_flag.send_response_mode_flag = 1;
000000EF                     1079  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 419
000000EF E50000              1080  	oneb !LOWW(_g_commnunication_flag+0x00006)
000000F2                     1081  .BB@LABEL@16_28:	; if_then_bb195
000000F2 EF00                1082  	br $.BB@LABEL@16_46
000000F4                     1083  .BB@LABEL@16_29:	; if_else_bb196
000000F4                     1084  	;***      420 : //			commnunication_flag.send_response_flag = 0;
000000F4                     1085  	;***      421 : 		} else if ((g_rx_data[0] == H_CLEAR)) {
000000F4                     1086  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
000000F4 4C43                1087  	cmp a, #0x43
000000F6 DF00                1088  	bnz $.BB@LABEL@16_32
000000F8                     1089  .BB@LABEL@16_30:	; if_then_bb202
000000F8                     1090  	;***      422 : 			g_commnunication_flag.alarm_clear_flag = g_rx_data[1];
000000F8                     1091  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 422
000000F8 8F0000              1092  	mov a, !LOWW(_g_rx_data+0x00001)
000000FB 9F0000              1093  	mov !LOWW(_g_commnunication_flag+0x00007), a
000000FE                     1094  .BB@LABEL@16_31:	; if_then_bb202
000000FE EF00                1095  	br $.BB@LABEL@16_49
00000100                     1096  .BB@LABEL@16_32:	; if_else_bb204
00000100                     1097  	;***      423 : 		} else if ((g_rx_data[0] == H_SET)
00000100                     1098  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 423
00000100 4C53                1099  	cmp a, #0x53
00000102 DF00                1100  	bnz $.BB@LABEL@16_34
00000104                     1101  .BB@LABEL@16_33:	; bb209
00000104 40000013            1102  	cmp !LOWW(_g_rx_data+0x00001), #0x13
00000108 DD00                1103  	bz $.BB@LABEL@16_52
0000010A                     1104  .BB@LABEL@16_34:	; if_else_bb223
0000010A                     1105  	;***      424 : 				&& (g_rx_data[1] == NEXT_ANIMATION)) {
0000010A                     1106  	;***      425 : //			g_machine_state.waitAnimationRes = 0;
0000010A                     1107  	;***      426 : 		} else if ((g_rx_data[0] == H_READ) && (g_rx_data[1] == MID_NIGHT)) {
0000010A                     1108  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 426
0000010A 4C52                1109  	cmp a, #0x52
0000010C DF00                1110  	bnz $.BB@LABEL@16_38
0000010E                     1111  .BB@LABEL@16_35:	; bb228
0000010E 4000001D            1112  	cmp !LOWW(_g_rx_data+0x00001), #0x1D
00000112 DF00                1113  	bnz $.BB@LABEL@16_38
00000114                     1114  .BB@LABEL@16_36:	; if_then_bb241
00000114                     1115  	;***      427 : 			g_commnunication_flag.send_response_flag = 0;
00000114                     1116  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 427
00000114 F50000              1117  	clrb !LOWW(_g_commnunication_flag)
00000117                     1118  	;***      428 : 			g_machine_state.isMidNight = g_rx_data[5];
00000117                     1119  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 428
00000117 8F0000              1120  	mov a, !LOWW(_g_rx_data+0x00005)
0000011A 9F0000              1121  	mov !LOWW(_g_machine_state+0x0000A), a
0000011D                     1122  .BB@LABEL@16_37:	; if_then_bb241
0000011D EF00                1123  	br $.BB@LABEL@16_55
0000011F                     1124  .BB@LABEL@16_38:	; if_else_bb243
0000011F                     1125  	;***      429 : 		} else if ((g_rx_data[0] == H_SET)
0000011F                     1126  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 429
0000011F 4C53                1127  	cmp a, #0x53
00000121 DF00                1128  	bnz $.BB@LABEL@16_55
00000123                     1129  .BB@LABEL@16_39:	; bb248
00000123 4000001A            1130  	cmp !LOWW(_g_rx_data+0x00001), #0x1A
00000127 DF00                1131  	bnz $.BB@LABEL@16_41
00000129                     1132  .BB@LABEL@16_40:	; if_then_bb261
00000129                     1133  	;***      430 : 				&& (g_rx_data[1] == TESTING_MODE_START)) {
00000129                     1134  	;***      431 : 			g_commnunication_flag.test_flag = TESTING_MODE_START;
00000129                     1135  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 431
00000129 CF00001A            1136  	mov !LOWW(_g_commnunication_flag+0x00009), #0x1A
0000012D EF00                1137  	br $.BB@LABEL@16_55
0000012F                     1138  .BB@LABEL@16_41:	; bb267
0000012F                     1139  	;***      432 : 		} else if ((g_rx_data[0] == H_SET) && (g_rx_data[1] == TEST_POWER_ON)) {
0000012F                     1140  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 432
0000012F 4000001E            1141  	cmp !LOWW(_g_rx_data+0x00001), #0x1E
00000133 DF00                1142  	bnz $.BB@LABEL@16_44
00000135                     1143  .BB@LABEL@16_42:	; if_then_bb280
00000135                     1144  	;***      433 : 			g_commnunication_flag.test_flag = TEST_POWER_ON;
00000135                     1145  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 433
00000135 CF00001E            1146  	mov !LOWW(_g_commnunication_flag+0x00009), #0x1E
00000139                     1147  .BB@LABEL@16_43:	; if_then_bb280
00000139 EF00                1148  	br $.BB@LABEL@16_55
0000013B                     1149  .BB@LABEL@16_44:	; bb286
0000013B                     1150  	;***      434 : 		} else if ((g_rx_data[0] == H_SET)
0000013B                     1151  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 434
0000013B 4000001F            1152  	cmp !LOWW(_g_rx_data+0x00001), #0x1F
0000013F DF00                1153  	bnz $.BB@LABEL@16_47
00000141                     1154  .BB@LABEL@16_45:	; if_then_bb299
00000141                     1155  	;***      435 : 				&& (g_rx_data[1] == TEST_FLOW_RATE)) {
00000141                     1156  	;***      436 : 			g_commnunication_flag.test_flag = TEST_FLOW_RATE;
00000141                     1157  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 436
00000141 CF00001F            1158  	mov !LOWW(_g_commnunication_flag+0x00009), #0x1F
00000145                     1159  .BB@LABEL@16_46:	; if_then_bb299
00000145 EF00                1160  	br $.BB@LABEL@16_55
00000147                     1161  .BB@LABEL@16_47:	; bb305
00000147                     1162  	;***      437 : 		} else if ((g_rx_data[0] == H_SET) && (g_rx_data[1] == TEST_CURRENT)) {
00000147                     1163  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 437
00000147 40000020            1164  	cmp !LOWW(_g_rx_data+0x00001), #0x20
0000014B DF00                1165  	bnz $.BB@LABEL@16_50
0000014D                     1166  .BB@LABEL@16_48:	; if_then_bb318
0000014D                     1167  	;***      438 : 			g_commnunication_flag.test_flag = TEST_CURRENT;
0000014D                     1168  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 438
0000014D CF000020            1169  	mov !LOWW(_g_commnunication_flag+0x00009), #0x20
00000151                     1170  .BB@LABEL@16_49:	; if_then_bb318
00000151 EF00                1171  	br $.BB@LABEL@16_55
00000153                     1172  .BB@LABEL@16_50:	; bb324
00000153                     1173  	;***      439 : 		} else if ((g_rx_data[0] == H_SET)
00000153                     1174  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 439
00000153 40000021            1175  	cmp !LOWW(_g_rx_data+0x00001), #0x21
00000157 DF00                1176  	bnz $.BB@LABEL@16_53
00000159                     1177  .BB@LABEL@16_51:	; if_then_bb337
00000159                     1178  	;***      440 : 				&& (g_rx_data[1] == TEST_INDIVIDUAL)) {
00000159                     1179  	;***      441 : 			g_commnunication_flag.test_flag = TEST_INDIVIDUAL;
00000159                     1180  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
00000159 CF000021            1181  	mov !LOWW(_g_commnunication_flag+0x00009), #0x21
0000015D                     1182  	;***      442 : 			g_commnunication_flag.recieve_status_flag = 1;
0000015D                     1183  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
0000015D E50000              1184  	oneb !LOWW(_g_commnunication_flag+0x00008)
00000160                     1185  	;***      443 : 			R_UART2_Receive(g_rx_data, 5);
00000160                     1186  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
00000160 320500              1187  	movw bc, #0x0005
00000163 300000              1188  	movw ax, #LOWW(_g_rx_data)
00000166 FC000000            1189  	call !!_R_UART2_Receive
0000016A                     1190  .BB@LABEL@16_52:	; if_then_bb337
0000016A EF00                1191  	br $.BB@LABEL@16_55
0000016C                     1192  .BB@LABEL@16_53:	; bb344
0000016C                     1193  	;***      444 : 		} else if ((g_rx_data[0] == H_SET)
0000016C                     1194  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
0000016C 40000022            1195  	cmp !LOWW(_g_rx_data+0x00001), #0x22
00000170 61F8                1196  	sknz
00000172                     1197  .BB@LABEL@16_54:	; if_then_bb357
00000172                     1198  	;***      445 : 				&& (g_rx_data[1] == TEST_ELECTROLYTIC)) {
00000172                     1199  	;***      446 : 			g_commnunication_flag.test_flag = TEST_ELECTROLYTIC;
00000172                     1200  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
00000172 CF000022            1201  	mov !LOWW(_g_commnunication_flag+0x00009), #0x22
00000176                     1202  .BB@LABEL@16_55:	; if_break_bb371
00000176 F6                  1203  	clrw ax
00000177                     1204  	;***      447 : 		}
00000177                     1205  	;***      448 : 		if (isThisCommand(g_rx_data, H_SET, WASHING_MODE, 0xff) != 0) {
00000177                     1206  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 448
00000177 C1                  1207  	push ax
00000178 50FF                1208  	mov x, #0xFF
0000017A C1                  1209  	push ax
0000017B 325318              1210  	movw bc, #0x1853
0000017E 300000              1211  	movw ax, #LOWW(_g_rx_data)
00000181 FC000000            1212  	call !!_isThisCommand
00000185 1004                1213  	addw sp, #0x04
00000187 D1                  1214  	cmp0 a
00000188 DD00                1215  	bz $.BB@LABEL@16_57
0000018A                     1216  .BB@LABEL@16_56:	; if_then_bb377
0000018A                     1217  	;***      449 : 			g_machine_mode = g_rx_data[5];
0000018A                     1218  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
0000018A 8F0000              1219  	mov a, !LOWW(_g_rx_data+0x00005)
0000018D 9F0000              1220  	mov !LOWW(_g_machine_mode), a
00000190                     1221  .BB@LABEL@16_57:	; if_break_bb379
00000190 F6                  1222  	clrw ax
00000191                     1223  	;***      450 : 		}
00000191                     1224  	;***      451 : 		if (isThisCommand(g_rx_data, H_SET, OK_USER, 0xff) != 0) {
00000191                     1225  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 451
00000191 C1                  1226  	push ax
00000192 50FF                1227  	mov x, #0xFF
00000194 C1                  1228  	push ax
00000195 325301              1229  	movw bc, #0x0153
00000198 300000              1230  	movw ax, #LOWW(_g_rx_data)
0000019B FC000000            1231  	call !!_isThisCommand
0000019F 1004                1232  	addw sp, #0x04
000001A1 D1                  1233  	cmp0 a
000001A2 DD00                1234  	bz $.BB@LABEL@16_63
000001A4                     1235  .BB@LABEL@16_58:	; if_then_bb385
000001A4                     1236  	;***      452 : 			g_machine_state.user = 2;
000001A4                     1237  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 452
000001A4 CF000002            1238  	mov !LOWW(_g_machine_state+0x0000D), #0x02
000001A8 EF00                1239  	br $.BB@LABEL@16_63
000001AA                     1240  .BB@LABEL@16_59:	; if_else_bb387
000001AA                     1241  	;***      453 : 		}
000001AA                     1242  	;***      454 : 
000001AA                     1243  	;***      455 : 	} else if (g_commnunication_flag.recived_time_setting_flag != 0
000001AA                     1244  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
000001AA D50000              1245  	cmp0 !LOWW(_g_commnunication_flag+0x00004)
000001AD DF00                1246  	bnz $.BB@LABEL@16_62
000001AF                     1247  .BB@LABEL@16_60:	; bb392
000001AF D50000              1248  	cmp0 !LOWW(_g_commnunication_flag+0x00003)
000001B2 DF00                1249  	bnz $.BB@LABEL@16_62
000001B4                     1250  .BB@LABEL@16_61:	; if_else_bb407
000001B4                     1251  	;***      456 : 			|| g_commnunication_flag.recived_number_setting_flag != 0) {
000001B4                     1252  	;***      457 : 		R_UART2_Receive(g_rx_data, 6);
000001B4                     1253  	;***      458 : 	} else {
000001B4                     1254  	;***      459 : 		g_uart2_fault = 1;
000001B4                     1255  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 459
000001B4 E50000              1256  	oneb !LOWW(_g_uart2_fault)
000001B7 EF00                1257  	br $.BB@LABEL@16_63
000001B9                     1258  .BB@LABEL@16_62:	; if_then_bb405
000001B9                     1259  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 457
000001B9 320600              1260  	movw bc, #0x0006
000001BC 300000              1261  	movw ax, #LOWW(_g_rx_data)
000001BF FC000000            1262  	call !!_R_UART2_Receive
000001C3                     1263  .BB@LABEL@16_63:	; if_break_bb409
000001C3                     1264  	;***      460 : 	}
000001C3                     1265  	;***      461 : 	g_uart2_receive++;
000001C3                     1266  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 461
000001C3 A00000              1267  	inc !LOWW(_g_uart2_receive)
000001C6 D7                  1268  	ret
000001C7                     1269  _r_uart2_callback_softwareoverrun@1:
000001C7                     1270  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
000001C7                     1271  	;***      462 : 
000001C7                     1272  	;***      463 : 	/* End user code. Do not edit comment generated here */
000001C7                     1273  	;***      464 : }
000001C7                     1274  	;***      465 : 
000001C7                     1275  	;***      466 : /***********************************************************************************************************************
000001C7                     1276  	;***      467 :  * Function Name: r_uart2_callback_softwareoverrun
000001C7                     1277  	;***      468 :  * Description  : This function is a callback function when UART2 receives an overflow data.
000001C7                     1278  	;***      469 :  * Arguments    : rx_data -
000001C7                     1279  	;***      470 :  *                    receive data
000001C7                     1280  	;***      471 :  * Return Value : None
000001C7                     1281  	;***      472 :  ***********************************************************************************************************************/
000001C7                     1282  	;***      473 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data) {
000001C7                     1283  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 473
000001C7 D7                  1284  	ret
000001C8                     1285  _r_uart2_callback_sendend@1:
000001C8                     1286  	.STACK _r_uart2_callback_sendend@1 = 4
000001C8                     1287  	;***      474 : 	/* Start user code. Do not edit comment generated here */
000001C8                     1288  	;***      475 : 	/* End user code. Do not edit comment generated here */
000001C8                     1289  	;***      476 : }
000001C8                     1290  	;***      477 : 
000001C8                     1291  	;***      478 : /***********************************************************************************************************************
000001C8                     1292  	;***      479 :  * Function Name: r_uart2_callback_sendend
000001C8                     1293  	;***      480 :  * Description  : This function is a callback function when UART2 finishes transmission.
000001C8                     1294  	;***      481 :  * Arguments    : None
000001C8                     1295  	;***      482 :  * Return Value : None
000001C8                     1296  	;***      483 :  ***********************************************************************************************************************/
000001C8                     1297  	;***      484 : static void r_uart2_callback_sendend(void) {
000001C8                     1298  	;***      485 : 	/* Start user code. Do not edit comment generated here */
000001C8                     1299  	;***      486 : 	g_uart2_sendend++;
000001C8                     1300  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 486
000001C8 A00000              1301  	inc !LOWW(_g_uart2_sendend)
000001CB D7                  1302  	ret
000001CC                     1303  _r_uart2_callback_error@1:
000001CC                     1304  	.STACK _r_uart2_callback_error@1 = 4
000001CC                     1305  	;***      487 : 	/* End user code. Do not edit comment generated here */
000001CC                     1306  	;***      488 : }
000001CC                     1307  	;***      489 : 
000001CC                     1308  	;***      490 : /***********************************************************************************************************************
000001CC                     1309  	;***      491 :  * Function Name: r_uart2_callback_error
000001CC                     1310  	;***      492 :  * Description  : This function is a callback function when UART2 reception error occurs.
000001CC                     1311  	;***      493 :  * Arguments    : err_type -
000001CC                     1312  	;***      494 :  *                    error type value
000001CC                     1313  	;***      495 :  * Return Value : None
000001CC                     1314  	;***      496 :  ***********************************************************************************************************************/
000001CC                     1315  	;***      497 : static void r_uart2_callback_error(uint8_t err_type) {
000001CC                     1316  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 497
000001CC D7                  1317  	ret
000001EE                     1318  	.SECTION .text,TEXT
000001EE                     1319  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1320  _r_uart3_interrupt_receive@1:
000001EE                     1321  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1322  	;***      498 : 	/* Start user code. Do not edit comment generated here */
000001EE                     1323  	;***      499 : 	/* End user code. Do not edit comment generated here */
000001EE                     1324  	;***      500 : }
000001EE                     1325  	;***      501 : 
000001EE                     1326  	;***      502 : /***********************************************************************************************************************
000001EE                     1327  	;***      503 :  * Function Name: r_uart3_interrupt_receive
000001EE                     1328  	;***      504 :  * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1329  	;***      505 :  * Arguments    : None
000001EE                     1330  	;***      506 :  * Return Value : None
000001EE                     1331  	;***      507 :  ***********************************************************************************************************************/
000001EE                     1332  	;***      508 : static void __near r_uart3_interrupt_receive(void) {
000001EE                     1333  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 508
000001EE C1                  1334  	push ax
000001EF C3                  1335  	push bc
000001F0 C5                  1336  	push de
000001F1 C7                  1337  	push hl
000001F2 8EFD                1338  	mov a, es
000001F4 70                  1339  	mov x, a
000001F5 8EFC                1340  	mov a, cs
000001F7 C1                  1341  	push ax
000001F8 C7                  1342  	push hl
000001F9                     1343  	;***      509 : 	volatile uint8_t rx_data;
000001F9                     1344  	;***      510 : 	volatile uint8_t err_type;
000001F9                     1345  	;***      511 : 
000001F9                     1346  	;***      512 : 	err_type = (uint8_t) (SSR13 & 0x0007U);
000001F9                     1347  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 512
000001F9 AF4601              1348  	movw ax, !0x0146
000001FC 60                  1349  	mov a, x
000001FD 5C07                1350  	and a, #0x07
000001FF 9800                1351  	mov [sp+0x00], a
00000201                     1352  	;***      513 : 	SIR13 = (uint16_t) err_type;
00000201                     1353  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 513
00000201 8800                1354  	mov a, [sp+0x00]
00000203 318E                1355  	shrw ax, 8+0x00000
00000205 BF4E01              1356  	movw !0x014E, ax
00000208                     1357  	;***      514 : 
00000208                     1358  	;***      515 : 	if (err_type != 0U) {
00000208                     1359  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 515
00000208 8800                1360  	mov a, [sp+0x00]
0000020A D1                  1361  	cmp0 a
0000020B DD00                1362  	bz $.BB@LABEL@20_2
0000020D                     1363  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1364  	;***      516 : 		r_uart3_callback_error(err_type);
0000020D                     1365  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 516
0000020D 8800                1366  	mov a, [sp+0x00]
0000020F FC000000            1367  	call !!_r_uart3_callback_error@1
00000213                     1368  .BB@LABEL@20_2:	; if_break_bb
00000213                     1369  	;***      517 : 	}
00000213                     1370  	;***      518 : 
00000213                     1371  	;***      519 : 	rx_data = RXD3;
00000213                     1372  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 519
00000213 8D16                1373  	mov a, 0xFFF16
00000215 9801                1374  	mov [sp+0x01], a
00000217                     1375  	;***      520 : 
00000217                     1376  	;***      521 : 	if (g_uart3_rx_length > g_uart3_rx_count) {
00000217                     1377  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 521
00000217 AF0000              1378  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1379  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1380  	mov a, [sp+0x01]
0000021F 61D300              1381  	bnh $.BB@LABEL@20_6
00000222                     1382  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1383  	;***      522 : 		*gp_uart3_rx_address = rx_data;
00000222                     1384  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 522
00000222 EB0000              1385  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1386  	mov [de], a
00000226                     1387  	;***      523 : 		gp_uart3_rx_address++;
00000226                     1388  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 523
00000226 A20000              1389  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1390  	;***      524 : 		g_uart3_rx_count++;
00000229                     1391  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 524
00000229 A20000              1392  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1393  	;***      525 : 
0000022C                     1394  	;***      526 : 		if (g_uart3_rx_length == g_uart3_rx_count) {
0000022C                     1395  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 526
0000022C AF0000              1396  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1397  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1398  	sknz
00000234                     1399  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1400  	;***      527 : 			r_uart3_callback_receiveend();
00000234                     1401  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 527
00000234 FC000000            1402  	call !!_r_uart3_callback_receiveend@1
00000238                     1403  .BB@LABEL@20_5:	; return
00000238 C6                  1404  	pop hl
00000239 C0                  1405  	pop ax
0000023A 9EFC                1406  	mov cs, a
0000023C 60                  1407  	mov a, x
0000023D 9EFD                1408  	mov es, a
0000023F C6                  1409  	pop hl
00000240 C4                  1410  	pop de
00000241 C2                  1411  	pop bc
00000242 C0                  1412  	pop ax
00000243                     1413  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 532
00000243 61FC                1414  	reti
00000245                     1415  .BB@LABEL@20_6:	; if_else_bb
00000245                     1416  	;***      528 : 		}
00000245                     1417  	;***      529 : 	} else {
00000245                     1418  	;***      530 : 		r_uart3_callback_softwareoverrun(rx_data);
00000245                     1419  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 530
00000245 318E                1420  	shrw ax, 8+0x00000
00000247 FC000000            1421  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1422  	br $.BB@LABEL@20_5
0000024D                     1423  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1424  _r_uart3_interrupt_send@1:
0000024D                     1425  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1426  	;***      531 : 	}
0000024D                     1427  	;***      532 : }
0000024D                     1428  	;***      533 : 
0000024D                     1429  	;***      534 : /***********************************************************************************************************************
0000024D                     1430  	;***      535 :  * Function Name: r_uart3_interrupt_send
0000024D                     1431  	;***      536 :  * Description  : This function is INTST3 interrupt service routine.
0000024D                     1432  	;***      537 :  * Arguments    : None
0000024D                     1433  	;***      538 :  * Return Value : None
0000024D                     1434  	;***      539 :  ***********************************************************************************************************************/
0000024D                     1435  	;***      540 : static void __near r_uart3_interrupt_send(void) {
0000024D                     1436  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 540
0000024D C1                  1437  	push ax
0000024E C3                  1438  	push bc
0000024F C5                  1439  	push de
00000250 C7                  1440  	push hl
00000251 8EFD                1441  	mov a, es
00000253 70                  1442  	mov x, a
00000254 8EFC                1443  	mov a, cs
00000256 C1                  1444  	push ax
00000257                     1445  	;***      541 : 	if (g_uart3_tx_count > 0U) {
00000257                     1446  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 541
00000257 AF0000              1447  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1448  	clrw bc
0000025B 43                  1449  	cmpw ax, bc
0000025C DF00                1450  	bnz $.BB@LABEL@21_3
0000025E                     1451  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1452  	;***      542 : 		TXD3 = *gp_uart3_tx_address;
0000025E                     1453  	;***      543 : 		gp_uart3_tx_address++;
0000025E                     1454  	;***      544 : 		g_uart3_tx_count--;
0000025E                     1455  	;***      545 : 	} else {
0000025E                     1456  	;***      546 : 		r_uart3_callback_sendend();
0000025E                     1457  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 546
0000025E FC000000            1458  	call !!_r_uart3_callback_sendend@1
00000262                     1459  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1460  	pop ax
00000263 9EFC                1461  	mov cs, a
00000265 60                  1462  	mov a, x
00000266 9EFD                1463  	mov es, a
00000268 C6                  1464  	pop hl
00000269 C4                  1465  	pop de
0000026A C2                  1466  	pop bc
0000026B C0                  1467  	pop ax
0000026C                     1468  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 548
0000026C 61FC                1469  	reti
0000026E                     1470  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1471  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 542
0000026E EB0000              1472  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1473  	mov a, [de]
00000272 9D14                1474  	mov 0xFFF14, a
00000274                     1475  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 543
00000274 A5                  1476  	incw de
00000275 15                  1477  	movw ax, de
00000276 BF0000              1478  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1479  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000279 B20000              1480  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1481  	br $.BB@LABEL@21_2
000001CD                     1482  	.SECTION .textf,TEXTF
000001CD                     1483  _r_uart3_callback_receiveend@1:
000001CD                     1484  	.STACK _r_uart3_callback_receiveend@1 = 4
000001CD                     1485  	;***      547 : 	}
000001CD                     1486  	;***      548 : }
000001CD                     1487  	;***      549 : 
000001CD                     1488  	;***      550 : /***********************************************************************************************************************
000001CD                     1489  	;***      551 :  * Function Name: r_uart3_callback_receiveend
000001CD                     1490  	;***      552 :  * Description  : This function is a callback function when UART3 finishes reception.
000001CD                     1491  	;***      553 :  * Arguments    : None
000001CD                     1492  	;***      554 :  * Return Value : None
000001CD                     1493  	;***      555 :  ***********************************************************************************************************************/
000001CD                     1494  	;***      556 : static void r_uart3_callback_receiveend(void) {
000001CD                     1495  	;***      557 : 	/* Start user code. Do not edit comment generated here */
000001CD                     1496  	;***      558 : 	R_UART3_Receive(g_uart3_rx_data, 7);
000001CD                     1497  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 558
000001CD 320700              1498  	movw bc, #0x0007
000001D0 300000              1499  	movw ax, #LOWW(_g_uart3_rx_data)
000001D3 FC000000            1500  	call !!_R_UART3_Receive
000001D7                     1501  	;***      559 : 	if (g_uart3_rx_data[0] == 1) {
000001D7                     1502  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 559
000001D7 8F0000              1503  	mov a, !LOWW(_g_uart3_rx_data)
000001DA 4C01                1504  	cmp a, #0x01
000001DC DF00                1505  	bnz $.BB@LABEL@22_7
000001DE                     1506  .BB@LABEL@22_1:	; if_then_bb
000001DE                     1507  	;***      560 : 		//Read timer setting
000001DE                     1508  	;***      561 : 		if ((rs485_rx_p[0] == H_READ) && (rs485_rx_p[1] == READ_TIME)) {
000001DE                     1509  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 561
000001DE 40000052            1510  	cmp !LOWW(_g_uart3_rx_data+0x00001), #0x52
000001E2 DF00                1511  	bnz $.BB@LABEL@22_6
000001E4                     1512  .BB@LABEL@22_2:	; bb
000001E4 40000002            1513  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x02
000001E8 DF00                1514  	bnz $.BB@LABEL@22_4
000001EA                     1515  .BB@LABEL@22_3:	; if_then_bb25
000001EA                     1516  	;***      562 : 			g_commnunication_flag.rs485_send_to_watersolfner_response_flag = 1;
000001EA                     1517  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 562
000001EA E50000              1518  	oneb !LOWW(_g_commnunication_flag+0x0000A)
000001ED D7                  1519  	ret
000001EE                     1520  .BB@LABEL@22_4:	; bb32
000001EE                     1521  	;***      563 : 		} else if ((rs485_rx_p[0] == 82) && (rs485_rx_p[1] == 24)) {
000001EE                     1522  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 563
000001EE 40000018            1523  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x18
000001F2 61F8                1524  	sknz
000001F4                     1525  .BB@LABEL@22_5:	; if_then_bb47
000001F4                     1526  	;***      564 : 			g_commnunication_flag.rs485_send_to_watersolfner_SV1_flag = 1;
000001F4                     1527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 564
000001F4 E50000              1528  	oneb !LOWW(_g_commnunication_flag+0x0000B)
000001F7                     1529  .BB@LABEL@22_6:	; if_else_bb.if_else_bb48_crit_edge.critedge
000001F7                     1530  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 581
000001F7 D7                  1531  	ret
000001F8                     1532  .BB@LABEL@22_7:	; if_else_bb97
000001F8                     1533  	;***      565 : 		} else if ((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 70)) {
000001F8                     1534  	;***      566 : 			//TODO: Start Water Softener
000001F8                     1535  	;***      567 : 
000001F8                     1536  	;***      568 : 		} else if ((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 80)) {
000001F8                     1537  	;***      569 : 			//TODO: Stop Water Softener + Time of SNP ON (4 bytes)
000001F8                     1538  	;***      570 : 		}
000001F8                     1539  	;***      571 : 	} else if (g_uart3_rx_data[0] == 2) {
000001F8                     1540  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 571
000001F8 4C02                1541  	cmp a, #0x02
000001FA DF00                1542  	bnz $.BB@LABEL@22_12
000001FC                     1543  .BB@LABEL@22_8:	; if_then_bb103
000001FC                     1544  	;***      572 : 		if ((rs485_rx_p[0] == 11)) {
000001FC                     1545  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 572
000001FC 8F0000              1546  	mov a, !LOWW(_g_uart3_rx_data+0x00001)
000001FF 4C0B                1547  	cmp a, #0x0B
00000201 DF00                1548  	bnz $.BB@LABEL@22_10
00000203                     1549  .BB@LABEL@22_9:	; if_then_bb111
00000203                     1550  	;***      573 : 			g_commnunication_flag.rs485_send_to_valve_response_flag = 1;
00000203                     1551  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 573
00000203 E50000              1552  	oneb !LOWW(_g_commnunication_flag+0x0000C)
00000206 D7                  1553  	ret
00000207                     1554  .BB@LABEL@22_10:	; if_else_bb112
00000207                     1555  	;***      574 : 		} else if ((rs485_rx_p[0] == 12)) {
00000207                     1556  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 574
00000207 4C0C                1557  	cmp a, #0x0C
00000209 DF00                1558  	bnz $.BB@LABEL@22_14
0000020B                     1559  .BB@LABEL@22_11:	; if_then_bb120
0000020B                     1560  	;***      575 : 			g_commnunication_flag.rs485_get_valve_gesture_flag = 1;
0000020B                     1561  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 575
0000020B E50000              1562  	oneb !LOWW(_g_commnunication_flag+0x0000D)
0000020E D7                  1563  	ret
0000020F                     1564  .BB@LABEL@22_12:	; if_else_bb123
0000020F                     1565  	;***      576 : 		}
0000020F                     1566  	;***      577 : 	} else if (g_uart3_rx_data[0] != 0xff) {
0000020F                     1567  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 577
0000020F 81                  1568  	inc a
00000210 61E8                1569  	skz
00000212                     1570  .BB@LABEL@22_13:	; if_then_bb129
00000212                     1571  	;***      578 : 		g_commnunication_flag.rs485_fault = 1;
00000212                     1572  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 578
00000212 E50000              1573  	oneb !LOWW(_g_commnunication_flag+0x0000E)
00000215                     1574  .BB@LABEL@22_14:	; return
00000215                     1575  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 581
00000215 D7                  1576  	ret
00000216                     1577  _r_uart3_callback_softwareoverrun@1:
00000216                     1578  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000216                     1579  	;***      579 : 	}
00000216                     1580  	;***      580 : 	/* End user code. Do not edit comment generated here */
00000216                     1581  	;***      581 : }
00000216                     1582  	;***      582 : 
00000216                     1583  	;***      583 : /***********************************************************************************************************************
00000216                     1584  	;***      584 :  * Function Name: r_uart3_callback_softwareoverrun
00000216                     1585  	;***      585 :  * Description  : This function is a callback function when UART3 receives an overflow data.
00000216                     1586  	;***      586 :  * Arguments    : rx_data -
00000216                     1587  	;***      587 :  *                    receive data
00000216                     1588  	;***      588 :  * Return Value : None
00000216                     1589  	;***      589 :  ***********************************************************************************************************************/
00000216                     1590  	;***      590 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data) {
00000216                     1591  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 590
00000216 D7                  1592  	ret
00000217                     1593  _r_uart3_callback_sendend@1:
00000217                     1594  	.STACK _r_uart3_callback_sendend@1 = 4
00000217                     1595  	;***      591 : 	/* Start user code. Do not edit comment generated here */
00000217                     1596  	;***      592 : 	/* End user code. Do not edit comment generated here */
00000217                     1597  	;***      593 : }
00000217                     1598  	;***      594 : 
00000217                     1599  	;***      595 : /***********************************************************************************************************************
00000217                     1600  	;***      596 :  * Function Name: r_uart3_callback_sendend
00000217                     1601  	;***      597 :  * Description  : This function is a callback function when UART3 finishes transmission.
00000217                     1602  	;***      598 :  * Arguments    : None
00000217                     1603  	;***      599 :  * Return Value : None
00000217                     1604  	;***      600 :  ***********************************************************************************************************************/
00000217                     1605  	;***      601 : static void r_uart3_callback_sendend(void) {
00000217                     1606  	;***      602 : 	/* Start user code. Do not edit comment generated here */
00000217                     1607  	;***      603 : 	g_uart3_sendend++;
00000217                     1608  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
00000217 A00000              1609  	inc !LOWW(_g_uart3_sendend)
0000021A                     1610  	;***      604 : 	O_RS485_MODE_PIN = 0U;
0000021A                     1611  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 604
0000021A 710300              1612  	clr1 0xFFF00.0
0000021D D7                  1613  	ret
0000021E                     1614  _r_uart3_callback_error@1:
0000021E                     1615  	.STACK _r_uart3_callback_error@1 = 4
0000021E                     1616  	;***      605 : 	/* End user code. Do not edit comment generated here */
0000021E                     1617  	;***      606 : }
0000021E                     1618  	;***      607 : 
0000021E                     1619  	;***      608 : /***********************************************************************************************************************
0000021E                     1620  	;***      609 :  * Function Name: r_uart3_callback_error
0000021E                     1621  	;***      610 :  * Description  : This function is a callback function when UART3 reception error occurs.
0000021E                     1622  	;***      611 :  * Arguments    : err_type -
0000021E                     1623  	;***      612 :  *                    error type value
0000021E                     1624  	;***      613 :  * Return Value : None
0000021E                     1625  	;***      614 :  ***********************************************************************************************************************/
0000021E                     1626  	;***      615 : static void r_uart3_callback_error(uint8_t err_type) {
0000021E                     1627  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 615
0000021E D7                  1628  	ret
0000021F                     1629  	;***      616 : 	/* Start user code. Do not edit comment generated here */
0000021F                     1630  	;***      617 : 	/* End user code. Do not edit comment generated here */
0000021F                     1631  	;***      618 : }
0000021F                     1632  	;***      619 : 
0000021F                     1633  	;***      620 : /* Start user code for adding. Do not edit comment generated here */
0000021F                     1634  	;***      621 : /* End user code. Do not edit comment generated here */
00000000                     1635  	.SECTION .bss,BSS
00000000                     1636  _g_uart3_rx_data:
00000000                     1637  	.DS (8)
00000008                     1638  _send_response_flag:
00000008                     1639  	.DS (1)
00000009                     1640  _send_response_time_flag:
00000009                     1641  	.DS (1)
0000000A                     1642  _send_response_number_flag:
0000000A                     1643  	.DS (1)
0000000B                     1644  _recived_time_setting_flag:
0000000B                     1645  	.DS (1)
0000000C                     1646  _send_respone_status_flag:
0000000C                     1647  	.DS (1)
0000000D                     1648  _recived_number_setting_flag:
0000000D                     1649  	.DS (1)
0000000E                     1650  _g_commnunication_flag:
0000000E                     1651  	.DS (15)
0000001D                     1652  _g_csi_count:
0000001D                     1653  	.DS (1)
0000001E                     1654  _g_csi_err:
0000001E                     1655  	.DS (1)
0000001F                     1656  _g_csi_send_end:
0000001F                     1657  	.DS (1)
00000020                     1658  _g_csi_rev_end:
00000020                     1659  	.DS (1)
00000021                     1660  _g_uart1_send:
00000021                     1661  	.DS (1)
00000022                     1662  _g_uart2_sendend:
00000022                     1663  	.DS (1)
00000023                     1664  _g_uart2_receive:
00000023                     1665  	.DS (1)
00000024                     1666  _g_rx_data:
00000024                     1667  	.DS (160)
000000C4                     1668  _g_uart2_fault:
000000C4                     1669  	.DS (1)
000000C5                     1670  _g_uart3_sendend:
000000C5                     1671  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               543 (0000021F) .textf
BSS                 198 (000000C6) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl000\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

