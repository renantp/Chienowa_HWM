RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Mon Dec 27 14:01:38 2021
00000000                       19  
00000000                       20  	.PUBLIC _g_uart3_rx_data
00000000                       21  	.EXTERN _gp_uart1_tx_address
00000000                       22  	.EXTERN _g_uart1_tx_count
00000000                       23  	.EXTERN _gp_uart1_rx_address
00000000                       24  	.EXTERN _g_uart1_rx_count
00000000                       25  	.EXTERN _g_uart1_rx_length
00000000                       26  	.EXTERN _gp_csi00_tx_address
00000000                       27  	.EXTERN _g_csi00_tx_count
00000000                       28  	.EXTERN _gp_csi01_rx_address
00000000                       29  	.EXTERN _gp_csi01_tx_address
00000000                       30  	.EXTERN _g_csi01_tx_count
00000000                       31  	.EXTERN _gp_uart2_tx_address
00000000                       32  	.EXTERN _g_uart2_tx_count
00000000                       33  	.EXTERN _gp_uart2_rx_address
00000000                       34  	.EXTERN _g_uart2_rx_count
00000000                       35  	.EXTERN _g_uart2_rx_length
00000000                       36  	.EXTERN _gp_uart3_tx_address
00000000                       37  	.EXTERN _g_uart3_tx_count
00000000                       38  	.EXTERN _gp_uart3_rx_address
00000000                       39  	.EXTERN _g_uart3_rx_count
00000000                       40  	.EXTERN _g_uart3_rx_length
00000000                       41  	.PUBLIC _send_response_flag
00000000                       42  	.PUBLIC _send_response_time_flag
00000000                       43  	.PUBLIC _send_response_number_flag
00000000                       44  	.PUBLIC _recived_time_setting_flag
00000000                       45  	.PUBLIC _send_respone_status_flag
00000000                       46  	.PUBLIC _recived_number_setting_flag
00000000                       47  	.PUBLIC _commnunication_flag
00000000                       48  	.PUBLIC _g_csi_count
00000000                       49  	.PUBLIC _g_csi_err
00000000                       50  	.PUBLIC _g_csi_send_end
00000000                       51  	.PUBLIC _g_csi_rev_end
00000000                       52  	.PUBLIC _g_uart1_send
00000000                       53  	.PUBLIC _g_uart2_sendend
00000000                       54  	.PUBLIC _g_uart2_receive
00000000                       55  	.PUBLIC _g_rx_data
00000000                       56  	.PUBLIC _g_uart2_fault
00000000                       57  	.PUBLIC _g_uart3_sendend
00000000                       58  	.PUBLIC _isCommand
00000000                       59  	.EXTERN _R_CSI01_Stop
00000000                       60  	.EXTERN _R_UART2_Receive
00000000                       61  	.EXTERN _R_UART3_Receive
00000000                       62  
00000000                       63  	.SECTION .textf,TEXTF
00000000                       64  _isCommand:
00000000                       65  	.STACK _isCommand = 4
00000000                       66  	;***        1 : /***********************************************************************************************************************
00000000                       67  	;***        2 : * DISCLAIMER
00000000                       68  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       69  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       70  	;***        5 : * applicable laws, including copyright laws. 
00000000                       71  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       72  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       73  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       74  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       75  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       76  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       77  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       78  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       79  	;***       14 : * following link:
00000000                       80  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       81  	;***       16 : *
00000000                       82  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       83  	;***       18 : ***********************************************************************************************************************/
00000000                       84  	;***       19 : 
00000000                       85  	;***       20 : /***********************************************************************************************************************
00000000                       86  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       87  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       88  	;***       23 : * Device(s)    : R5F104ML
00000000                       89  	;***       24 : * Tool-Chain   : CCRL
00000000                       90  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       91  	;***       26 : * Creation Date: 30/11/2021
00000000                       92  	;***       27 : ***********************************************************************************************************************/
00000000                       93  	;***       28 : 
00000000                       94  	;***       29 : /***********************************************************************************************************************
00000000                       95  	;***       30 : Includes
00000000                       96  	;***       31 : ***********************************************************************************************************************/
00000000                       97  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       98  	;***       33 : #include "r_cg_serial.h"
00000000                       99  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                      100  	;***       35 : #include "r_cg_wdt.h"
00000000                      101  	;***       36 : #include "main.h"
00000000                      102  	;***       37 : /* End user code. Do not edit comment generated here */
00000000                      103  	;***       38 : #include "r_cg_userdefine.h"
00000000                      104  	;***       39 : 
00000000                      105  	;***       40 : /***********************************************************************************************************************
00000000                      106  	;***       41 : Pragma directive
00000000                      107  	;***       42 : ***********************************************************************************************************************/
00000000                      108  	;***       43 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      109  	;***       44 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      110  	;***       45 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      111  	;***       46 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      112  	;***       47 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      113  	;***       48 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      114  	;***       49 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      115  	;***       50 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      116  	;***       51 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      117  	;***       52 : /* End user code. Do not edit comment generated here */
00000000                      118  	;***       53 : 
00000000                      119  	;***       54 : /***********************************************************************************************************************
00000000                      120  	;***       55 : Global variables and functions
00000000                      121  	;***       56 : ***********************************************************************************************************************/
00000000                      122  	;***       57 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      123  	;***       58 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      124  	;***       59 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      125  	;***       60 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      126  	;***       61 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      127  	;***       62 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      128  	;***       63 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      129  	;***       64 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      130  	;***       65 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      131  	;***       66 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      132  	;***       67 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      133  	;***       68 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      134  	;***       69 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      135  	;***       70 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      136  	;***       71 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      137  	;***       72 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      138  	;***       73 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      139  	;***       74 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      140  	;***       75 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      141  	;***       76 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      142  	;***       77 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      143  	;***       78 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      144  	;***       79 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      145  	;***       80 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      146  	;***       81 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      147  	;***       82 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      148  	;***       83 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      149  	;***       84 : /* Start user code for global. Do not edit comment generated here */
00000000                      150  	;***       85 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag, recived_time_setting_flag
00000000                      151  	;***       86 : ,send_respone_status_flag, recived_number_setting_flag;
00000000                      152  	;***       87 : volatile struct Communicaition_flag_s commnunication_flag;
00000000                      153  	;***       88 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      154  	;***       89 : uint8_t g_rx_data[4*40];
00000000                      155  	;***       90 : uint8_t g_uart3_rx_data[8];
00000000                      156  	;***       91 : volatile uint8_t g_uart2_fault;
00000000                      157  	;***       92 : volatile uint8_t g_uart3_sendend;
00000000                      158  	;***       93 : uint8_t isCommand(uint8_t *data){
00000000                      159  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 93
00000000 14                   160  	movw de, ax
00000001                      161  	;***       94 : 	if((data[0] == H_SET)&&(data[1] == NEXT_ANIMATION))
00000001                      162  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 94
00000001 89                   163  	mov a, [de]
00000002 70                   164  	mov x, a
00000003 4C53                 165  	cmp a, #0x53
00000005 DF00                 166  	bnz $.BB@LABEL@1_2
00000007                      167  .BB@LABEL@1_1:	; bb
00000007 8A01                 168  	mov a, [de+0x01]
00000009 4C13                 169  	cmp a, #0x13
0000000B DD00                 170  	bz $.BB@LABEL@1_7
0000000D                      171  .BB@LABEL@1_2:	; if_break_bb
0000000D 60                   172  	mov a, x
0000000E                      173  	;***       95 : 		return 0;
0000000E                      174  	;***       96 : 	switch ((enum UART_header_e)*data) {
0000000E                      175  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 96
0000000E 0CBD                 176  	add a, #0xBD
00000010 DD00                 177  	bz $.BB@LABEL@1_6
00000012                      178  .BB@LABEL@1_3:	; if_break_bb
00000012 0CFE                 179  	add a, #0xFE
00000014 DD00                 180  	bz $.BB@LABEL@1_6
00000016                      181  .BB@LABEL@1_4:	; if_break_bb
00000016 0CF3                 182  	add a, #0xF3
00000018 DD00                 183  	bz $.BB@LABEL@1_6
0000001A                      184  .BB@LABEL@1_5:	; if_break_bb
0000001A 91                   185  	dec a
0000001B DF00                 186  	bnz $.BB@LABEL@1_7
0000001D                      187  .BB@LABEL@1_6:	; switch_clause_bb26
0000001D E50000               188  	oneb !LOWW(_commnunication_flag)
00000020 E1                   189  	oneb a
00000021                      190  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 116
00000021 D7                   191  	ret
00000022                      192  .BB@LABEL@1_7:	; bb30
00000022                      193  	;***       97 : //		case H_ALARM:
00000022                      194  	;***       98 : //			commnunication_flag.send_response_flag = 1;
00000022                      195  	;***       99 : //			break;
00000022                      196  	;***      100 : 		case H_CLEAR:
00000022                      197  	;***      101 : 			commnunication_flag.send_response_flag = 1;
00000022                      198  	;***      102 : 			break;
00000022                      199  	;***      103 : 		case H_ERROR:
00000022                      200  	;***      104 : 			commnunication_flag.send_response_flag = 1;
00000022                      201  	;***      105 : 			break;
00000022                      202  	;***      106 : 		case H_READ:
00000022                      203  	;***      107 : 			commnunication_flag.send_response_flag = 1;
00000022                      204  	;***      108 : 			break;
00000022                      205  	;***      109 : 		case H_SET:
00000022                      206  	;***      110 : 			commnunication_flag.send_response_flag = 1;
00000022                      207  	;***      111 : 			break;
00000022                      208  	;***      112 : 		default:
00000022                      209  	;***      113 : 			return 0;
00000022                      210  	;***      114 : 	}
00000022                      211  	;***      115 : 	return 1;
00000022                      212  	;***      116 : }
00000022 F1                   213  	clrb a
00000023 D7                   214  	ret
00000000                      215  	.SECTION .text,TEXT
00000000                      216  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      217  _r_uart1_interrupt_receive@1:
00000000                      218  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      219  	;***      117 : /* End user code. Do not edit comment generated here */
00000000                      220  	;***      118 : 
00000000                      221  	;***      119 : /***********************************************************************************************************************
00000000                      222  	;***      120 : * Function Name: r_uart1_interrupt_receive
00000000                      223  	;***      121 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      224  	;***      122 : * Arguments    : None
00000000                      225  	;***      123 : * Return Value : None
00000000                      226  	;***      124 : ***********************************************************************************************************************/
00000000                      227  	;***      125 : static void __near r_uart1_interrupt_receive(void)
00000000                      228  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 125
00000000 C1                   229  	push ax
00000001 C3                   230  	push bc
00000002 C5                   231  	push de
00000003 C7                   232  	push hl
00000004 8EFD                 233  	mov a, es
00000006 70                   234  	mov x, a
00000007 8EFC                 235  	mov a, cs
00000009 C1                   236  	push ax
0000000A C7                   237  	push hl
0000000B                      238  	;***      126 : {
0000000B                      239  	;***      127 :     volatile uint8_t rx_data;
0000000B                      240  	;***      128 :     volatile uint8_t err_type;
0000000B                      241  	;***      129 :     
0000000B                      242  	;***      130 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      243  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 130
0000000B AF0601               244  	movw ax, !0x0106
0000000E 60                   245  	mov a, x
0000000F 5C07                 246  	and a, #0x07
00000011 9800                 247  	mov [sp+0x00], a
00000013                      248  	;***      131 :     SIR03 = (uint16_t)err_type;
00000013                      249  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
00000013 8800                 250  	mov a, [sp+0x00]
00000015 318E                 251  	shrw ax, 8+0x00000
00000017 BF0E01               252  	movw !0x010E, ax
0000001A                      253  	;***      132 : 
0000001A                      254  	;***      133 :     if (err_type != 0U)
0000001A                      255  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 133
0000001A 8800                 256  	mov a, [sp+0x00]
0000001C D1                   257  	cmp0 a
0000001D DD00                 258  	bz $.BB@LABEL@2_2
0000001F                      259  .BB@LABEL@2_1:	; if_then_bb
0000001F                      260  	;***      134 :     {
0000001F                      261  	;***      135 :         r_uart1_callback_error(err_type);
0000001F                      262  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
0000001F 8800                 263  	mov a, [sp+0x00]
00000021 FC000000             264  	call !!_r_uart1_callback_error@1
00000025                      265  .BB@LABEL@2_2:	; if_break_bb
00000025                      266  	;***      136 :     }
00000025                      267  	;***      137 :     
00000025                      268  	;***      138 :     rx_data = RXD1;
00000025                      269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
00000025 8E46                 270  	mov a, 0xFFF46
00000027 9801                 271  	mov [sp+0x01], a
00000029                      272  	;***      139 : 
00000029                      273  	;***      140 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      274  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 140
00000029 AF0000               275  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               276  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 277  	mov a, [sp+0x01]
00000031 61D300               278  	bnh $.BB@LABEL@2_6
00000034                      279  .BB@LABEL@2_3:	; if_then_bb18
00000034                      280  	;***      141 :     {
00000034                      281  	;***      142 :         *gp_uart1_rx_address = rx_data;
00000034                      282  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
00000034 EB0000               283  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   284  	mov [de], a
00000038                      285  	;***      143 :         gp_uart1_rx_address++;
00000038                      286  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
00000038 A20000               287  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      288  	;***      144 :         g_uart1_rx_count++;
0000003B                      289  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
0000003B A20000               290  	incw !LOWW(_g_uart1_rx_count)
0000003E                      291  	;***      145 : 
0000003E                      292  	;***      146 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      293  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
0000003E AF0000               294  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               295  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 296  	sknz
00000046                      297  .BB@LABEL@2_4:	; if_then_bb30
00000046                      298  	;***      147 :         {
00000046                      299  	;***      148 :             r_uart1_callback_receiveend();
00000046                      300  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 148
00000046 FC000000             301  	call !!_r_uart1_callback_receiveend@1
0000004A                      302  .BB@LABEL@2_5:	; return
0000004A C6                   303  	pop hl
0000004B C0                   304  	pop ax
0000004C 9EFC                 305  	mov cs, a
0000004E 60                   306  	mov a, x
0000004F 9EFD                 307  	mov es, a
00000051 C6                   308  	pop hl
00000052 C4                   309  	pop de
00000053 C2                   310  	pop bc
00000054 C0                   311  	pop ax
00000055                      312  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 155
00000055 61FC                 313  	reti
00000057                      314  .BB@LABEL@2_6:	; if_else_bb
00000057                      315  	;***      149 :         }
00000057                      316  	;***      150 :     }
00000057                      317  	;***      151 :     else
00000057                      318  	;***      152 :     {
00000057                      319  	;***      153 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      320  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 153
00000057 318E                 321  	shrw ax, 8+0x00000
00000059 FC000000             322  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 323  	br $.BB@LABEL@2_5
0000005F                      324  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      325  _r_uart1_interrupt_send@1:
0000005F                      326  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      327  	;***      154 :     }
0000005F                      328  	;***      155 : }
0000005F                      329  	;***      156 : 
0000005F                      330  	;***      157 : /***********************************************************************************************************************
0000005F                      331  	;***      158 : * Function Name: r_uart1_interrupt_send
0000005F                      332  	;***      159 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      333  	;***      160 : * Arguments    : None
0000005F                      334  	;***      161 : * Return Value : None
0000005F                      335  	;***      162 : ***********************************************************************************************************************/
0000005F                      336  	;***      163 : static void __near r_uart1_interrupt_send(void)
0000005F                      337  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 163
0000005F C1                   338  	push ax
00000060 C3                   339  	push bc
00000061 C5                   340  	push de
00000062 C7                   341  	push hl
00000063 8EFD                 342  	mov a, es
00000065 70                   343  	mov x, a
00000066 8EFC                 344  	mov a, cs
00000068 C1                   345  	push ax
00000069                      346  	;***      164 : {
00000069                      347  	;***      165 :     if (g_uart1_tx_count > 0U)
00000069                      348  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000069 AF0000               349  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   350  	clrw bc
0000006D 43                   351  	cmpw ax, bc
0000006E DF00                 352  	bnz $.BB@LABEL@3_3
00000070                      353  .BB@LABEL@3_1:	; if_else_bb
00000070                      354  	;***      166 :     {
00000070                      355  	;***      167 :         TXD1 = *gp_uart1_tx_address;
00000070                      356  	;***      168 :         gp_uart1_tx_address++;
00000070                      357  	;***      169 :         g_uart1_tx_count--;
00000070                      358  	;***      170 :     }
00000070                      359  	;***      171 :     else
00000070                      360  	;***      172 :     {
00000070                      361  	;***      173 :         r_uart1_callback_sendend();
00000070                      362  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 173
00000070 FC000000             363  	call !!_r_uart1_callback_sendend@1
00000074                      364  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   365  	pop ax
00000075 9EFC                 366  	mov cs, a
00000077 60                   367  	mov a, x
00000078 9EFD                 368  	mov es, a
0000007A C6                   369  	pop hl
0000007B C4                   370  	pop de
0000007C C2                   371  	pop bc
0000007D C0                   372  	pop ax
0000007E                      373  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 175
0000007E 61FC                 374  	reti
00000080                      375  .BB@LABEL@3_3:	; if_then_bb
00000080                      376  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 167
00000080 EB0000               377  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   378  	mov a, [de]
00000084 9E44                 379  	mov 0xFFF44, a
00000086                      380  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 168
00000086 A5                   381  	incw de
00000087 15                   382  	movw ax, de
00000088 BF0000               383  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      384  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 169
0000008B B20000               385  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 386  	br $.BB@LABEL@3_2
00000024                      387  	.SECTION .textf,TEXTF
00000024                      388  _r_uart1_callback_receiveend@1:
00000024                      389  	.STACK _r_uart1_callback_receiveend@1 = 4
00000024                      390  	;***      174 :     }
00000024                      391  	;***      175 : }
00000024                      392  	;***      176 : 
00000024                      393  	;***      177 : /***********************************************************************************************************************
00000024                      394  	;***      178 : * Function Name: r_uart1_callback_receiveend
00000024                      395  	;***      179 : * Description  : This function is a callback function when UART1 finishes reception.
00000024                      396  	;***      180 : * Arguments    : None
00000024                      397  	;***      181 : * Return Value : None
00000024                      398  	;***      182 : ***********************************************************************************************************************/
00000024                      399  	;***      183 : static void r_uart1_callback_receiveend(void)
00000024                      400  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 183
00000024 D7                   401  	ret
00000025                      402  _r_uart1_callback_softwareoverrun@1:
00000025                      403  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000025                      404  	;***      184 : {
00000025                      405  	;***      185 :     /* Start user code. Do not edit comment generated here */
00000025                      406  	;***      186 :     /* End user code. Do not edit comment generated here */
00000025                      407  	;***      187 : }
00000025                      408  	;***      188 : 
00000025                      409  	;***      189 : /***********************************************************************************************************************
00000025                      410  	;***      190 : * Function Name: r_uart1_callback_softwareoverrun
00000025                      411  	;***      191 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000025                      412  	;***      192 : * Arguments    : rx_data -
00000025                      413  	;***      193 : *                    receive data
00000025                      414  	;***      194 : * Return Value : None
00000025                      415  	;***      195 : ***********************************************************************************************************************/
00000025                      416  	;***      196 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000025                      417  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 196
00000025 D7                   418  	ret
00000026                      419  _r_uart1_callback_sendend@1:
00000026                      420  	.STACK _r_uart1_callback_sendend@1 = 4
00000026                      421  	;***      197 : {
00000026                      422  	;***      198 :     /* Start user code. Do not edit comment generated here */
00000026                      423  	;***      199 :     /* End user code. Do not edit comment generated here */
00000026                      424  	;***      200 : }
00000026                      425  	;***      201 : 
00000026                      426  	;***      202 : /***********************************************************************************************************************
00000026                      427  	;***      203 : * Function Name: r_uart1_callback_sendend
00000026                      428  	;***      204 : * Description  : This function is a callback function when UART1 finishes transmission.
00000026                      429  	;***      205 : * Arguments    : None
00000026                      430  	;***      206 : * Return Value : None
00000026                      431  	;***      207 : ***********************************************************************************************************************/
00000026                      432  	;***      208 : static void r_uart1_callback_sendend(void)
00000026                      433  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 208
00000026 D7                   434  	ret
00000027                      435  _r_uart1_callback_error@1:
00000027                      436  	.STACK _r_uart1_callback_error@1 = 4
00000027                      437  	;***      209 : {
00000027                      438  	;***      210 :     /* Start user code. Do not edit comment generated here */
00000027                      439  	;***      211 :     /* End user code. Do not edit comment generated here */
00000027                      440  	;***      212 : }
00000027                      441  	;***      213 : 
00000027                      442  	;***      214 : /***********************************************************************************************************************
00000027                      443  	;***      215 : * Function Name: r_uart1_callback_error
00000027                      444  	;***      216 : * Description  : This function is a callback function when UART1 reception error occurs.
00000027                      445  	;***      217 : * Arguments    : err_type -
00000027                      446  	;***      218 : *                    error type value
00000027                      447  	;***      219 : * Return Value : None
00000027                      448  	;***      220 : ***********************************************************************************************************************/
00000027                      449  	;***      221 : static void r_uart1_callback_error(uint8_t err_type)
00000027                      450  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 221
00000027 D7                   451  	ret
00000090                      452  	.SECTION .text,TEXT
00000090                      453  _r_csi00_interrupt@1	.vector 0x001E
00000090                      454  _r_csi00_interrupt@1:
00000090                      455  	.STACK _r_csi00_interrupt@1 = 16
00000090                      456  	;***      222 : {
00000090                      457  	;***      223 :     /* Start user code. Do not edit comment generated here */
00000090                      458  	;***      224 :     /* End user code. Do not edit comment generated here */
00000090                      459  	;***      225 : }
00000090                      460  	;***      226 : 
00000090                      461  	;***      227 : /***********************************************************************************************************************
00000090                      462  	;***      228 : * Function Name: r_csi00_interrupt
00000090                      463  	;***      229 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      464  	;***      230 : * Arguments    : None
00000090                      465  	;***      231 : * Return Value : None
00000090                      466  	;***      232 : ***********************************************************************************************************************/
00000090                      467  	;***      233 : static void __near r_csi00_interrupt(void)
00000090                      468  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 233
00000090 C1                   469  	push ax
00000091 C3                   470  	push bc
00000092 C5                   471  	push de
00000093 C7                   472  	push hl
00000094 8EFD                 473  	mov a, es
00000096 70                   474  	mov x, a
00000097 8EFC                 475  	mov a, cs
00000099 C1                   476  	push ax
0000009A C7                   477  	push hl
0000009B                      478  	;***      234 : {
0000009B                      479  	;***      235 :     volatile uint8_t err_type;
0000009B                      480  	;***      236 : 
0000009B                      481  	;***      237 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      482  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 237
0000009B AF0001               483  	movw ax, !0x0100
0000009E 60                   484  	mov a, x
0000009F 5C01                 485  	and a, #0x01
000000A1 9800                 486  	mov [sp+0x00], a
000000A3                      487  	;***      238 :     SIR00 = (uint16_t)err_type;
000000A3                      488  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 238
000000A3 8800                 489  	mov a, [sp+0x00]
000000A5 318E                 490  	shrw ax, 8+0x00000
000000A7 BF0801               491  	movw !0x0108, ax
000000AA                      492  	;***      239 : 
000000AA                      493  	;***      240 :     if (err_type != 1U)
000000AA                      494  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 240
000000AA 8800                 495  	mov a, [sp+0x00]
000000AC 91                   496  	dec a
000000AD DF00                 497  	bnz $.BB@LABEL@8_2
000000AF                      498  .BB@LABEL@8_1:	; return
000000AF C6                   499  	pop hl
000000B0 C0                   500  	pop ax
000000B1 9EFC                 501  	mov cs, a
000000B3 60                   502  	mov a, x
000000B4 9EFD                 503  	mov es, a
000000B6 C6                   504  	pop hl
000000B7 C4                   505  	pop de
000000B8 C2                   506  	pop bc
000000B9 C0                   507  	pop ax
000000BA                      508  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 253
000000BA 61FC                 509  	reti
000000BC                      510  .BB@LABEL@8_2:	; if_then_bb
000000BC                      511  	;***      241 :     {
000000BC                      512  	;***      242 :         if (g_csi00_tx_count > 0U)
000000BC                      513  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 242
000000BC AF0000               514  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   515  	clrw bc
000000C0 43                   516  	cmpw ax, bc
000000C1 DF00                 517  	bnz $.BB@LABEL@8_4
000000C3                      518  .BB@LABEL@8_3:	; if_else_bb
000000C3                      519  	;***      243 :         {
000000C3                      520  	;***      244 :             SIO00 = *gp_csi00_tx_address;
000000C3                      521  	;***      245 :             gp_csi00_tx_address++;
000000C3                      522  	;***      246 :             g_csi00_tx_count--;
000000C3                      523  	;***      247 :         }
000000C3                      524  	;***      248 :         else
000000C3                      525  	;***      249 :         {
000000C3                      526  	;***      250 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 250
000000C3 FC000000             528  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 529  	br $.BB@LABEL@8_1
000000C9                      530  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      531  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 244
000000C9 EB0000               532  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   533  	mov a, [de]
000000CD 9D10                 534  	mov 0xFFF10, a
000000CF                      535  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 245
000000CF A5                   536  	incw de
000000D0 15                   537  	movw ax, de
000000D1 BF0000               538  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      539  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 246
000000D4 B20000               540  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 541  	br $.BB@LABEL@8_1
00000028                      542  	.SECTION .textf,TEXTF
00000028                      543  _r_csi00_callback_sendend@1:
00000028                      544  	.STACK _r_csi00_callback_sendend@1 = 4
00000028                      545  	;***      251 :         }
00000028                      546  	;***      252 :     }
00000028                      547  	;***      253 : }
00000028                      548  	;***      254 : 
00000028                      549  	;***      255 : /***********************************************************************************************************************
00000028                      550  	;***      256 : * Function Name: r_csi00_callback_sendend
00000028                      551  	;***      257 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000028                      552  	;***      258 : * Arguments    : None
00000028                      553  	;***      259 : * Return Value : None
00000028                      554  	;***      260 : ***********************************************************************************************************************/
00000028                      555  	;***      261 : static void r_csi00_callback_sendend(void)
00000028                      556  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 261
00000028 D7                   557  	ret
000000D9                      558  	.SECTION .text,TEXT
000000D9                      559  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      560  _r_csi01_interrupt@1:
000000D9                      561  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      562  	;***      262 : {
000000D9                      563  	;***      263 :     /* Start user code. Do not edit comment generated here */
000000D9                      564  	;***      264 :     /* End user code. Do not edit comment generated here */
000000D9                      565  	;***      265 : }
000000D9                      566  	;***      266 : 
000000D9                      567  	;***      267 : /***********************************************************************************************************************
000000D9                      568  	;***      268 : * Function Name: r_csi01_interrupt
000000D9                      569  	;***      269 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      570  	;***      270 : * Arguments    : None
000000D9                      571  	;***      271 : * Return Value : None
000000D9                      572  	;***      272 : ***********************************************************************************************************************/
000000D9                      573  	;***      273 : static void __near r_csi01_interrupt(void)
000000D9                      574  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 273
000000D9 C1                   575  	push ax
000000DA C3                   576  	push bc
000000DB C5                   577  	push de
000000DC C7                   578  	push hl
000000DD 8EFD                 579  	mov a, es
000000DF 70                   580  	mov x, a
000000E0 8EFC                 581  	mov a, cs
000000E2 C1                   582  	push ax
000000E3 C7                   583  	push hl
000000E4                      584  	;***      274 : {
000000E4                      585  	;***      275 :     volatile uint8_t err_type;
000000E4                      586  	;***      276 :     volatile uint8_t sio_dummy;
000000E4                      587  	;***      277 : 
000000E4                      588  	;***      278 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      589  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 278
000000E4 AF0201               590  	movw ax, !0x0102
000000E7 60                   591  	mov a, x
000000E8 5C01                 592  	and a, #0x01
000000EA 9800                 593  	mov [sp+0x00], a
000000EC                      594  	;***      279 :     SIR01 = (uint16_t)err_type;
000000EC                      595  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 279
000000EC 8800                 596  	mov a, [sp+0x00]
000000EE 318E                 597  	shrw ax, 8+0x00000
000000F0 BF0A01               598  	movw !0x010A, ax
000000F3                      599  	;***      280 : 
000000F3                      600  	;***      281 :     if (1U == err_type)
000000F3                      601  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 281
000000F3 8800                 602  	mov a, [sp+0x00]
000000F5 91                   603  	dec a
000000F6 DF00                 604  	bnz $.BB@LABEL@10_2
000000F8                      605  .BB@LABEL@10_1:	; if_then_bb
000000F8                      606  	;***      282 :     {
000000F8                      607  	;***      283 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      608  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 283
000000F8 8800                 609  	mov a, [sp+0x00]
000000FA FC000000             610  	call !!_r_csi01_callback_error@1
000000FE EF00                 611  	br $.BB@LABEL@10_15
00000100                      612  .BB@LABEL@10_2:	; if_else_bb
00000100                      613  	;***      284 :     }
00000100                      614  	;***      285 :     else
00000100                      615  	;***      286 :     {
00000100                      616  	;***      287 :         if (g_csi01_tx_count > 0U)
00000100                      617  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 287
00000100 AF0000               618  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   619  	clrw bc
00000104 43                   620  	cmpw ax, bc
00000105 DF00                 621  	bnz $.BB@LABEL@10_8
00000107                      622  .BB@LABEL@10_3:	; if_else_bb42
00000107                      623  	;***      288 :         {
00000107                      624  	;***      289 :             if (0U != gp_csi01_rx_address)
00000107                      625  	;***      290 :             {
00000107                      626  	;***      291 :                 *gp_csi01_rx_address = SIO01;
00000107                      627  	;***      292 :                 gp_csi01_rx_address++;
00000107                      628  	;***      293 :             }
00000107                      629  	;***      294 :             else
00000107                      630  	;***      295 :             {
00000107                      631  	;***      296 :                 sio_dummy = SIO01;
00000107                      632  	;***      297 :             }
00000107                      633  	;***      298 : 
00000107                      634  	;***      299 :             if (0U != gp_csi01_tx_address)
00000107                      635  	;***      300 :             {
00000107                      636  	;***      301 :                 SIO01 = *gp_csi01_tx_address;
00000107                      637  	;***      302 :                 gp_csi01_tx_address++;
00000107                      638  	;***      303 :             }
00000107                      639  	;***      304 :             else
00000107                      640  	;***      305 :             {
00000107                      641  	;***      306 :                 SIO01 = 0xFFU;
00000107                      642  	;***      307 :             }
00000107                      643  	;***      308 : 
00000107                      644  	;***      309 :             g_csi01_tx_count--;
00000107                      645  	;***      310 :         }
00000107                      646  	;***      311 :         else 
00000107                      647  	;***      312 :         {
00000107                      648  	;***      313 :             if (0U == g_csi01_tx_count)
00000107                      649  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 313
00000107 AF0000               650  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   651  	cmpw ax, bc
0000010B DF00                 652  	bnz $.BB@LABEL@10_7
0000010D                      653  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      654  	;***      314 :             {
0000010D                      655  	;***      315 :                 if (0U != gp_csi01_rx_address)
0000010D                      656  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 315
0000010D AF0000               657  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   658  	cmpw ax, bc
00000111 DF00                 659  	bnz $.BB@LABEL@10_6
00000113                      660  .BB@LABEL@10_5:	; if_else_bb55
00000113                      661  	;***      316 :                 {
00000113                      662  	;***      317 :                     *gp_csi01_rx_address = SIO01;
00000113                      663  	;***      318 :                 }
00000113                      664  	;***      319 :                 else
00000113                      665  	;***      320 :                 {
00000113                      666  	;***      321 :                     sio_dummy = SIO01;
00000113                      667  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 321
00000113 8D12                 668  	mov a, 0xFFF12
00000115 9801                 669  	mov [sp+0x01], a
00000117 EF00                 670  	br $.BB@LABEL@10_7
00000119                      671  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   672  	movw de, ax
0000011A                      673  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 317
0000011A 8D12                 674  	mov a, 0xFFF12
0000011C 99                   675  	mov [de], a
0000011D                      676  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      677  	;***      322 :                 }
0000011D                      678  	;***      323 :             }
0000011D                      679  	;***      324 : 
0000011D                      680  	;***      325 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      681  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 325
0000011D FC000000             682  	call !!_r_csi01_callback_sendend@1
00000121                      683  	;***      326 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      684  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 326
00000121 FC000000             685  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 686  	br $.BB@LABEL@10_15
00000127                      687  .BB@LABEL@10_8:	; if_then_bb16
00000127                      688  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 289
00000127 AF0000               689  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   690  	cmpw ax, bc
0000012B DF00                 691  	bnz $.BB@LABEL@10_10
0000012D                      692  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      693  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 296
0000012D 8D12                 694  	mov a, 0xFFF12
0000012F 9801                 695  	mov [sp+0x01], a
00000131 EF00                 696  	br $.BB@LABEL@10_11
00000133                      697  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   698  	movw de, ax
00000134                      699  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 291
00000134 8D12                 700  	mov a, 0xFFF12
00000136 99                   701  	mov [de], a
00000137                      702  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 292
00000137 A20000               703  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      704  .BB@LABEL@10_11:	; if_break_bb
0000013A                      705  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
0000013A AF0000               706  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   707  	cmpw ax, bc
0000013E DF00                 708  	bnz $.BB@LABEL@10_13
00000140                      709  .BB@LABEL@10_12:	; if_else_bb38
00000140                      710  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 306
00000140 CD12FF               711  	mov 0xFFF12, #0xFF
00000143 EF00                 712  	br $.BB@LABEL@10_14
00000145                      713  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   714  	movw de, ax
00000146                      715  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 301
00000146 89                   716  	mov a, [de]
00000147 9D12                 717  	mov 0xFFF12, a
00000149                      718  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 302
00000149 A5                   719  	incw de
0000014A 15                   720  	movw ax, de
0000014B BF0000               721  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      722  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      723  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 309
0000014E B20000               724  	decw !LOWW(_g_csi01_tx_count)
00000151                      725  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   726  	pop hl
00000152 C0                   727  	pop ax
00000153 9EFC                 728  	mov cs, a
00000155 60                   729  	mov a, x
00000156 9EFD                 730  	mov es, a
00000158 C6                   731  	pop hl
00000159 C4                   732  	pop de
0000015A C2                   733  	pop bc
0000015B C0                   734  	pop ax
0000015C                      735  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 329
0000015C 61FC                 736  	reti
00000029                      737  	.SECTION .textf,TEXTF
00000029                      738  _r_csi01_callback_receiveend@1:
00000029                      739  	.STACK _r_csi01_callback_receiveend@1 = 4
00000029                      740  	;***      327 :         }
00000029                      741  	;***      328 :     }
00000029                      742  	;***      329 : }
00000029                      743  	;***      330 : 
00000029                      744  	;***      331 : /***********************************************************************************************************************
00000029                      745  	;***      332 : * Function Name: r_csi01_callback_receiveend
00000029                      746  	;***      333 : * Description  : This function is a callback function when CSI01 finishes reception.
00000029                      747  	;***      334 : * Arguments    : None
00000029                      748  	;***      335 : * Return Value : None
00000029                      749  	;***      336 : ***********************************************************************************************************************/
00000029                      750  	;***      337 : static void r_csi01_callback_receiveend(void)
00000029                      751  	;***      338 : {
00000029                      752  	;***      339 :     /* Start user code. Do not edit comment generated here */
00000029                      753  	;***      340 : 	g_csi_rev_end++;
00000029                      754  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 340
00000029 A00000               755  	inc !LOWW(_g_csi_rev_end)
0000002C                      756  	;***      341 : 	R_CSI01_Stop();
0000002C                      757  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 341
0000002C EC000000             758  	br !!_R_CSI01_Stop
00000030                      759  _r_csi01_callback_error@1:
00000030                      760  	.STACK _r_csi01_callback_error@1 = 4
00000030                      761  	;***      342 :     /* End user code. Do not edit comment generated here */
00000030                      762  	;***      343 : }
00000030                      763  	;***      344 : 
00000030                      764  	;***      345 : /***********************************************************************************************************************
00000030                      765  	;***      346 : * Function Name: r_csi01_callback_error
00000030                      766  	;***      347 : * Description  : This function is a callback function when CSI01 reception error occurs.
00000030                      767  	;***      348 : * Arguments    : err_type -
00000030                      768  	;***      349 : *                    error type value
00000030                      769  	;***      350 : * Return Value : None
00000030                      770  	;***      351 : ***********************************************************************************************************************/
00000030                      771  	;***      352 : static void r_csi01_callback_error(uint8_t err_type)
00000030                      772  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 352
00000030 D7                   773  	ret
00000031                      774  _r_csi01_callback_sendend@1:
00000031                      775  	.STACK _r_csi01_callback_sendend@1 = 4
00000031                      776  	;***      353 : {
00000031                      777  	;***      354 :     /* Start user code. Do not edit comment generated here */
00000031                      778  	;***      355 : 
00000031                      779  	;***      356 :     /* End user code. Do not edit comment generated here */
00000031                      780  	;***      357 : }
00000031                      781  	;***      358 : 
00000031                      782  	;***      359 : /***********************************************************************************************************************
00000031                      783  	;***      360 : * Function Name: r_csi01_callback_sendend
00000031                      784  	;***      361 : * Description  : This function is a callback function when CSI01 finishes transmission.
00000031                      785  	;***      362 : * Arguments    : None
00000031                      786  	;***      363 : * Return Value : None
00000031                      787  	;***      364 : ***********************************************************************************************************************/
00000031                      788  	;***      365 : static void r_csi01_callback_sendend(void)
00000031                      789  	;***      366 : {
00000031                      790  	;***      367 :     /* Start user code. Do not edit comment generated here */
00000031                      791  	;***      368 : 	g_csi_send_end++;
00000031                      792  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 368
00000031 A00000               793  	inc !LOWW(_g_csi_send_end)
00000034 D7                   794  	ret
0000015E                      795  	.SECTION .text,TEXT
0000015E                      796  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      797  _r_uart2_interrupt_receive@1:
0000015E                      798  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      799  	;***      369 :     /* End user code. Do not edit comment generated here */
0000015E                      800  	;***      370 : }
0000015E                      801  	;***      371 : 
0000015E                      802  	;***      372 : /***********************************************************************************************************************
0000015E                      803  	;***      373 : * Function Name: r_uart2_interrupt_receive
0000015E                      804  	;***      374 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      805  	;***      375 : * Arguments    : None
0000015E                      806  	;***      376 : * Return Value : None
0000015E                      807  	;***      377 : ***********************************************************************************************************************/
0000015E                      808  	;***      378 : static void __near r_uart2_interrupt_receive(void)
0000015E                      809  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 378
0000015E C1                   810  	push ax
0000015F C3                   811  	push bc
00000160 C5                   812  	push de
00000161 C7                   813  	push hl
00000162 8EFD                 814  	mov a, es
00000164 70                   815  	mov x, a
00000165 8EFC                 816  	mov a, cs
00000167 C1                   817  	push ax
00000168 C7                   818  	push hl
00000169                      819  	;***      379 : {
00000169                      820  	;***      380 :     volatile uint8_t rx_data;
00000169                      821  	;***      381 :     volatile uint8_t err_type;
00000169                      822  	;***      382 :     
00000169                      823  	;***      383 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      824  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 383
00000169 AF4201               825  	movw ax, !0x0142
0000016C 60                   826  	mov a, x
0000016D 5C07                 827  	and a, #0x07
0000016F 9800                 828  	mov [sp+0x00], a
00000171                      829  	;***      384 :     SIR11 = (uint16_t)err_type;
00000171                      830  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 384
00000171 8800                 831  	mov a, [sp+0x00]
00000173 318E                 832  	shrw ax, 8+0x00000
00000175 BF4A01               833  	movw !0x014A, ax
00000178                      834  	;***      385 : 
00000178                      835  	;***      386 :     if (err_type != 0U)
00000178                      836  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 386
00000178 8800                 837  	mov a, [sp+0x00]
0000017A D1                   838  	cmp0 a
0000017B DD00                 839  	bz $.BB@LABEL@14_2
0000017D                      840  .BB@LABEL@14_1:	; if_then_bb
0000017D                      841  	;***      387 :     {
0000017D                      842  	;***      388 :         r_uart2_callback_error(err_type);
0000017D                      843  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 388
0000017D 8800                 844  	mov a, [sp+0x00]
0000017F FC000000             845  	call !!_r_uart2_callback_error@1
00000183                      846  .BB@LABEL@14_2:	; if_break_bb
00000183                      847  	;***      389 :     }
00000183                      848  	;***      390 :     
00000183                      849  	;***      391 :     rx_data = RXD2;
00000183                      850  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
00000183 8E4A                 851  	mov a, 0xFFF4A
00000185 9801                 852  	mov [sp+0x01], a
00000187                      853  	;***      392 : 
00000187                      854  	;***      393 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      855  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 393
00000187 AF0000               856  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               857  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 858  	mov a, [sp+0x01]
0000018F 61D300               859  	bnh $.BB@LABEL@14_6
00000192                      860  .BB@LABEL@14_3:	; if_then_bb18
00000192                      861  	;***      394 :     {
00000192                      862  	;***      395 :         *gp_uart2_rx_address = rx_data;
00000192                      863  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
00000192 EB0000               864  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   865  	mov [de], a
00000196                      866  	;***      396 :         gp_uart2_rx_address++;
00000196                      867  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 396
00000196 A20000               868  	incw !LOWW(_gp_uart2_rx_address)
00000199                      869  	;***      397 :         g_uart2_rx_count++;
00000199                      870  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
00000199 A20000               871  	incw !LOWW(_g_uart2_rx_count)
0000019C                      872  	;***      398 : 
0000019C                      873  	;***      399 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      874  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 399
0000019C AF0000               875  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               876  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 877  	sknz
000001A4                      878  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      879  	;***      400 :         {
000001A4                      880  	;***      401 :             r_uart2_callback_receiveend();
000001A4                      881  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 401
000001A4 FC000000             882  	call !!_r_uart2_callback_receiveend@1
000001A8                      883  .BB@LABEL@14_5:	; return
000001A8 C6                   884  	pop hl
000001A9 C0                   885  	pop ax
000001AA 9EFC                 886  	mov cs, a
000001AC 60                   887  	mov a, x
000001AD 9EFD                 888  	mov es, a
000001AF C6                   889  	pop hl
000001B0 C4                   890  	pop de
000001B1 C2                   891  	pop bc
000001B2 C0                   892  	pop ax
000001B3                      893  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 408
000001B3 61FC                 894  	reti
000001B5                      895  .BB@LABEL@14_6:	; if_else_bb
000001B5                      896  	;***      402 :         }
000001B5                      897  	;***      403 :     }
000001B5                      898  	;***      404 :     else
000001B5                      899  	;***      405 :     {
000001B5                      900  	;***      406 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      901  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 406
000001B5 318E                 902  	shrw ax, 8+0x00000
000001B7 FC000000             903  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 904  	br $.BB@LABEL@14_5
000001BD                      905  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      906  _r_uart2_interrupt_send@1:
000001BD                      907  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      908  	;***      407 :     }
000001BD                      909  	;***      408 : }
000001BD                      910  	;***      409 : 
000001BD                      911  	;***      410 : /***********************************************************************************************************************
000001BD                      912  	;***      411 : * Function Name: r_uart2_interrupt_send
000001BD                      913  	;***      412 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      914  	;***      413 : * Arguments    : None
000001BD                      915  	;***      414 : * Return Value : None
000001BD                      916  	;***      415 : ***********************************************************************************************************************/
000001BD                      917  	;***      416 : static void __near r_uart2_interrupt_send(void)
000001BD                      918  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 416
000001BD C1                   919  	push ax
000001BE C3                   920  	push bc
000001BF C5                   921  	push de
000001C0 C7                   922  	push hl
000001C1 8EFD                 923  	mov a, es
000001C3 70                   924  	mov x, a
000001C4 8EFC                 925  	mov a, cs
000001C6 C1                   926  	push ax
000001C7                      927  	;***      417 : {
000001C7                      928  	;***      418 :     if (g_uart2_tx_count > 0U)
000001C7                      929  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
000001C7 AF0000               930  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   931  	clrw bc
000001CB 43                   932  	cmpw ax, bc
000001CC DF00                 933  	bnz $.BB@LABEL@15_3
000001CE                      934  .BB@LABEL@15_1:	; if_else_bb
000001CE                      935  	;***      419 :     {
000001CE                      936  	;***      420 :         TXD2 = *gp_uart2_tx_address;
000001CE                      937  	;***      421 :         gp_uart2_tx_address++;
000001CE                      938  	;***      422 :         g_uart2_tx_count--;
000001CE                      939  	;***      423 :     }
000001CE                      940  	;***      424 :     else
000001CE                      941  	;***      425 :     {
000001CE                      942  	;***      426 :         r_uart2_callback_sendend();
000001CE                      943  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 426
000001CE FC000000             944  	call !!_r_uart2_callback_sendend@1
000001D2                      945  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   946  	pop ax
000001D3 9EFC                 947  	mov cs, a
000001D5 60                   948  	mov a, x
000001D6 9EFD                 949  	mov es, a
000001D8 C6                   950  	pop hl
000001D9 C4                   951  	pop de
000001DA C2                   952  	pop bc
000001DB C0                   953  	pop ax
000001DC                      954  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 428
000001DC 61FC                 955  	reti
000001DE                      956  .BB@LABEL@15_3:	; if_then_bb
000001DE                      957  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 420
000001DE EB0000               958  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   959  	mov a, [de]
000001E2 9E48                 960  	mov 0xFFF48, a
000001E4                      961  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
000001E4 A5                   962  	incw de
000001E5 15                   963  	movw ax, de
000001E6 BF0000               964  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      965  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 422
000001E9 B20000               966  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 967  	br $.BB@LABEL@15_2
00000035                      968  	.SECTION .textf,TEXTF
00000035                      969  _r_uart2_callback_receiveend@1:
00000035                      970  	.STACK _r_uart2_callback_receiveend@1 = 4
00000035                      971  	;***      427 :     }
00000035                      972  	;***      428 : }
00000035                      973  	;***      429 : 
00000035                      974  	;***      430 : /***********************************************************************************************************************
00000035                      975  	;***      431 : * Function Name: r_uart2_callback_receiveend
00000035                      976  	;***      432 : * Description  : This function is a callback function when UART2 finishes reception.
00000035                      977  	;***      433 : * Arguments    : None
00000035                      978  	;***      434 : * Return Value : None
00000035                      979  	;***      435 : ***********************************************************************************************************************/
00000035                      980  	;***      436 : static void r_uart2_callback_receiveend(void)
00000035                      981  	;***      437 : {
00000035                      982  	;***      438 :     /* Start user code. Do not edit comment generated here */
00000035                      983  	;***      439 : //	R_UART2_Receive(g_rx_data, 32);
00000035                      984  	;***      440 : //	R_UART2_Stop();
00000035                      985  	;***      441 : //	R_UART2_Start();
00000035                      986  	;***      442 : 
00000035                      987  	;***      443 : 	R_UART2_Receive(g_rx_data, 6);
00000035                      988  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
00000035 320600               989  	movw bc, #0x0006
00000038 300000               990  	movw ax, #LOWW(_g_rx_data)
0000003B FC000000             991  	call !!_R_UART2_Receive
0000003F                      992  	;***      444 : 	commnunication_flag.recived_time_setting_flag = commnunication_flag.recived_time_setting_flag == 1 ? 2: commnunication_flag.recived_time_setting_flag;
0000003F                      993  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
0000003F 40000001             994  	cmp !LOWW(_commnunication_flag+0x00004), #0x01
00000043 5102                 995  	mov a, #0x02
00000045 61E8                 996  	skz
00000047                      997  .BB@LABEL@16_1:	; bb5
00000047 8F0000               998  	mov a, !LOWW(_commnunication_flag+0x00004)
0000004A                      999  .BB@LABEL@16_2:	; bb8
0000004A 9F0000              1000  	mov !LOWW(_commnunication_flag+0x00004), a
0000004D                     1001  	;***      445 : 	commnunication_flag.recived_number_setting_flag = commnunication_flag.recived_number_setting_flag == 1 ? 2: commnunication_flag.recived_number_setting_flag;
0000004D                     1002  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
0000004D 40000001            1003  	cmp !LOWW(_commnunication_flag+0x00003), #0x01
00000051 5102                1004  	mov a, #0x02
00000053 61E8                1005  	skz
00000055                     1006  .BB@LABEL@16_3:	; bb16
00000055 8F0000              1007  	mov a, !LOWW(_commnunication_flag+0x00003)
00000058                     1008  .BB@LABEL@16_4:	; bb20
00000058 9F0000              1009  	mov !LOWW(_commnunication_flag+0x00003), a
0000005B                     1010  	;***      446 : 	if(isCommand(g_rx_data)){
0000005B                     1011  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
0000005B 300000              1012  	movw ax, #LOWW(_g_rx_data)
0000005E FE0000              1013  	call $!_isCommand
00000061 D1                  1014  	cmp0 a
00000062 DF00                1015  	bnz $.BB@LABEL@16_9
00000064                     1016  .BB@LABEL@16_5:	; if_else_bb162
00000064                     1017  	;***      447 : 		if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_TIME)){
00000064                     1018  	;***      448 : 			commnunication_flag.send_response_time_flag = 1;
00000064                     1019  	;***      449 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_TIME)){
00000064                     1020  	;***      450 : 			R_UART2_Receive(g_rx_data, timeSettingSize);
00000064                     1021  	;***      451 : 			commnunication_flag.recived_time_setting_flag = 1;
00000064                     1022  	;***      452 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_MACHINE_STATUS)){
00000064                     1023  	;***      453 : 			commnunication_flag.send_respone_status_flag = 1;
00000064                     1024  	;***      454 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_NUMBER)){
00000064                     1025  	;***      455 : 			commnunication_flag.send_response_number_flag = 1;
00000064                     1026  	;***      456 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_NUMBER)){
00000064                     1027  	;***      457 : 			R_UART2_Receive(g_rx_data, numberSettingSize);
00000064                     1028  	;***      458 : 			commnunication_flag.recived_number_setting_flag = 1;
00000064                     1029  	;***      459 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == WASHING_MODE)){
00000064                     1030  	;***      460 : 			commnunication_flag.send_response_mode_flag = 1;
00000064                     1031  	;***      461 : //			commnunication_flag.send_response_flag = 0;
00000064                     1032  	;***      462 : 		}else if((g_rx_data[0] == H_CLEAR)){
00000064                     1033  	;***      463 : 			commnunication_flag.alarm_clear_flag = g_rx_data[1];
00000064                     1034  	;***      464 : 		}
00000064                     1035  	;***      465 : 	}else if(commnunication_flag.recived_time_setting_flag != 0 || commnunication_flag.recived_number_setting_flag != 0){
00000064                     1036  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 465
00000064 D50000              1037  	cmp0 !LOWW(_commnunication_flag+0x00004)
00000067 DF00                1038  	bnz $.BB@LABEL@16_8
00000069                     1039  .BB@LABEL@16_6:	; bb167
00000069 D50000              1040  	cmp0 !LOWW(_commnunication_flag+0x00003)
0000006C DF00                1041  	bnz $.BB@LABEL@16_8
0000006E                     1042  .BB@LABEL@16_7:	; if_else_bb182
0000006E                     1043  	;***      466 : 		R_UART2_Receive(g_rx_data, 6);
0000006E                     1044  	;***      467 : 	}else{
0000006E                     1045  	;***      468 : 		g_uart2_fault = 1;
0000006E                     1046  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 468
0000006E E50000              1047  	oneb !LOWW(_g_uart2_fault)
00000071 EF00                1048  	br $.BB@LABEL@16_20
00000073                     1049  .BB@LABEL@16_8:	; if_then_bb180
00000073                     1050  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 466
00000073 320600              1051  	movw bc, #0x0006
00000076 300000              1052  	movw ax, #LOWW(_g_rx_data)
00000079 FC000000            1053  	call !!_R_UART2_Receive
0000007D EF00                1054  	br $.BB@LABEL@16_24
0000007F                     1055  .BB@LABEL@16_9:	; if_then_bb
0000007F                     1056  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 447
0000007F 8F0000              1057  	mov a, !LOWW(_g_rx_data)
00000082 4C52                1058  	cmp a, #0x52
00000084 DF00                1059  	bnz $.BB@LABEL@16_12
00000086                     1060  .BB@LABEL@16_10:	; bb33
00000086 40000002            1061  	cmp !LOWW(_g_rx_data+0x00001), #0x02
0000008A DF00                1062  	bnz $.BB@LABEL@16_12
0000008C                     1063  .BB@LABEL@16_11:	; if_then_bb46
0000008C                     1064  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 448
0000008C E50000              1065  	oneb !LOWW(_commnunication_flag+0x00001)
0000008F EF00                1066  	br $.BB@LABEL@16_28
00000091                     1067  .BB@LABEL@16_12:	; if_else_bb
00000091                     1068  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
00000091 4C53                1069  	cmp a, #0x53
00000093 DF00                1070  	bnz $.BB@LABEL@16_15
00000095                     1071  .BB@LABEL@16_13:	; bb51
00000095 40000014            1072  	cmp !LOWW(_g_rx_data+0x00001), #0x14
00000099 DF00                1073  	bnz $.BB@LABEL@16_15
0000009B                     1074  .BB@LABEL@16_14:	; if_then_bb64
0000009B                     1075  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 450
0000009B 328D00              1076  	movw bc, #0x008D
0000009E 300000              1077  	movw ax, #LOWW(_g_rx_data)
000000A1 FC000000            1078  	call !!_R_UART2_Receive
000000A5                     1079  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 451
000000A5 E50000              1080  	oneb !LOWW(_commnunication_flag+0x00004)
000000A8 EF00                1081  	br $.BB@LABEL@16_31
000000AA                     1082  .BB@LABEL@16_15:	; if_else_bb69
000000AA                     1083  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 452
000000AA 4C52                1084  	cmp a, #0x52
000000AC DF00                1085  	bnz $.BB@LABEL@16_21
000000AE                     1086  .BB@LABEL@16_16:	; bb74
000000AE 40000017            1087  	cmp !LOWW(_g_rx_data+0x00001), #0x17
000000B2 DF00                1088  	bnz $.BB@LABEL@16_18
000000B4                     1089  .BB@LABEL@16_17:	; if_then_bb87
000000B4                     1090  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 453
000000B4 E50000              1091  	oneb !LOWW(_commnunication_flag+0x00005)
000000B7 EF00                1092  	br $.BB@LABEL@16_31
000000B9                     1093  .BB@LABEL@16_18:	; bb93
000000B9                     1094  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 454
000000B9 40000003            1095  	cmp !LOWW(_g_rx_data+0x00001), #0x03
000000BD DF00                1096  	bnz $.BB@LABEL@16_21
000000BF                     1097  .BB@LABEL@16_19:	; if_then_bb106
000000BF                     1098  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
000000BF E50000              1099  	oneb !LOWW(_commnunication_flag+0x00002)
000000C2                     1100  .BB@LABEL@16_20:	; if_then_bb106
000000C2 EF00                1101  	br $.BB@LABEL@16_31
000000C4                     1102  .BB@LABEL@16_21:	; if_else_bb107
000000C4                     1103  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 456
000000C4 4C53                1104  	cmp a, #0x53
000000C6 DF00                1105  	bnz $.BB@LABEL@16_25
000000C8                     1106  .BB@LABEL@16_22:	; bb112
000000C8 40000015            1107  	cmp !LOWW(_g_rx_data+0x00001), #0x15
000000CC DF00                1108  	bnz $.BB@LABEL@16_25
000000CE                     1109  .BB@LABEL@16_23:	; if_then_bb125
000000CE                     1110  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 457
000000CE 322100              1111  	movw bc, #0x0021
000000D1 300000              1112  	movw ax, #LOWW(_g_rx_data)
000000D4 FC000000            1113  	call !!_R_UART2_Receive
000000D8                     1114  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 458
000000D8 E50000              1115  	oneb !LOWW(_commnunication_flag+0x00003)
000000DB                     1116  .BB@LABEL@16_24:	; if_then_bb125
000000DB EF00                1117  	br $.BB@LABEL@16_31
000000DD                     1118  .BB@LABEL@16_25:	; if_else_bb129
000000DD                     1119  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 459
000000DD 4C52                1120  	cmp a, #0x52
000000DF DF00                1121  	bnz $.BB@LABEL@16_29
000000E1                     1122  .BB@LABEL@16_26:	; bb134
000000E1 40000018            1123  	cmp !LOWW(_g_rx_data+0x00001), #0x18
000000E5 DF00                1124  	bnz $.BB@LABEL@16_29
000000E7                     1125  .BB@LABEL@16_27:	; if_then_bb147
000000E7                     1126  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 460
000000E7 E50000              1127  	oneb !LOWW(_commnunication_flag+0x00006)
000000EA                     1128  .BB@LABEL@16_28:	; if_then_bb147
000000EA EF00                1129  	br $.BB@LABEL@16_31
000000EC                     1130  .BB@LABEL@16_29:	; if_else_bb148
000000EC                     1131  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 462
000000EC 4C43                1132  	cmp a, #0x43
000000EE DF00                1133  	bnz $.BB@LABEL@16_31
000000F0                     1134  .BB@LABEL@16_30:	; if_then_bb154
000000F0                     1135  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 463
000000F0 8F0000              1136  	mov a, !LOWW(_g_rx_data+0x00001)
000000F3 9F0000              1137  	mov !LOWW(_commnunication_flag+0x00007), a
000000F6                     1138  .BB@LABEL@16_31:	; if_break_bb184
000000F6                     1139  	;***      469 : 	}
000000F6                     1140  	;***      470 : 	g_uart2_receive++;
000000F6                     1141  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 470
000000F6 A00000              1142  	inc !LOWW(_g_uart2_receive)
000000F9 D7                  1143  	ret
000000FA                     1144  _r_uart2_callback_softwareoverrun@1:
000000FA                     1145  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
000000FA                     1146  	;***      471 :     /* End user code. Do not edit comment generated here */
000000FA                     1147  	;***      472 : }
000000FA                     1148  	;***      473 : 
000000FA                     1149  	;***      474 : /***********************************************************************************************************************
000000FA                     1150  	;***      475 : * Function Name: r_uart2_callback_softwareoverrun
000000FA                     1151  	;***      476 : * Description  : This function is a callback function when UART2 receives an overflow data.
000000FA                     1152  	;***      477 : * Arguments    : rx_data -
000000FA                     1153  	;***      478 : *                    receive data
000000FA                     1154  	;***      479 : * Return Value : None
000000FA                     1155  	;***      480 : ***********************************************************************************************************************/
000000FA                     1156  	;***      481 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
000000FA                     1157  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 481
000000FA D7                  1158  	ret
000000FB                     1159  _r_uart2_callback_sendend@1:
000000FB                     1160  	.STACK _r_uart2_callback_sendend@1 = 4
000000FB                     1161  	;***      482 : {
000000FB                     1162  	;***      483 :     /* Start user code. Do not edit comment generated here */
000000FB                     1163  	;***      484 :     /* End user code. Do not edit comment generated here */
000000FB                     1164  	;***      485 : }
000000FB                     1165  	;***      486 : 
000000FB                     1166  	;***      487 : /***********************************************************************************************************************
000000FB                     1167  	;***      488 : * Function Name: r_uart2_callback_sendend
000000FB                     1168  	;***      489 : * Description  : This function is a callback function when UART2 finishes transmission.
000000FB                     1169  	;***      490 : * Arguments    : None
000000FB                     1170  	;***      491 : * Return Value : None
000000FB                     1171  	;***      492 : ***********************************************************************************************************************/
000000FB                     1172  	;***      493 : static void r_uart2_callback_sendend(void)
000000FB                     1173  	;***      494 : {
000000FB                     1174  	;***      495 :     /* Start user code. Do not edit comment generated here */
000000FB                     1175  	;***      496 : 	g_uart2_sendend++;
000000FB                     1176  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 496
000000FB A00000              1177  	inc !LOWW(_g_uart2_sendend)
000000FE D7                  1178  	ret
000000FF                     1179  _r_uart2_callback_error@1:
000000FF                     1180  	.STACK _r_uart2_callback_error@1 = 4
000000FF                     1181  	;***      497 :     /* End user code. Do not edit comment generated here */
000000FF                     1182  	;***      498 : }
000000FF                     1183  	;***      499 : 
000000FF                     1184  	;***      500 : /***********************************************************************************************************************
000000FF                     1185  	;***      501 : * Function Name: r_uart2_callback_error
000000FF                     1186  	;***      502 : * Description  : This function is a callback function when UART2 reception error occurs.
000000FF                     1187  	;***      503 : * Arguments    : err_type -
000000FF                     1188  	;***      504 : *                    error type value
000000FF                     1189  	;***      505 : * Return Value : None
000000FF                     1190  	;***      506 : ***********************************************************************************************************************/
000000FF                     1191  	;***      507 : static void r_uart2_callback_error(uint8_t err_type)
000000FF                     1192  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 507
000000FF D7                  1193  	ret
000001EE                     1194  	.SECTION .text,TEXT
000001EE                     1195  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1196  _r_uart3_interrupt_receive@1:
000001EE                     1197  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1198  	;***      508 : {
000001EE                     1199  	;***      509 :     /* Start user code. Do not edit comment generated here */
000001EE                     1200  	;***      510 :     /* End user code. Do not edit comment generated here */
000001EE                     1201  	;***      511 : }
000001EE                     1202  	;***      512 : 
000001EE                     1203  	;***      513 : /***********************************************************************************************************************
000001EE                     1204  	;***      514 : * Function Name: r_uart3_interrupt_receive
000001EE                     1205  	;***      515 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1206  	;***      516 : * Arguments    : None
000001EE                     1207  	;***      517 : * Return Value : None
000001EE                     1208  	;***      518 : ***********************************************************************************************************************/
000001EE                     1209  	;***      519 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1210  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 519
000001EE C1                  1211  	push ax
000001EF C3                  1212  	push bc
000001F0 C5                  1213  	push de
000001F1 C7                  1214  	push hl
000001F2 8EFD                1215  	mov a, es
000001F4 70                  1216  	mov x, a
000001F5 8EFC                1217  	mov a, cs
000001F7 C1                  1218  	push ax
000001F8 C7                  1219  	push hl
000001F9                     1220  	;***      520 : {
000001F9                     1221  	;***      521 :     volatile uint8_t rx_data;
000001F9                     1222  	;***      522 :     volatile uint8_t err_type;
000001F9                     1223  	;***      523 :     
000001F9                     1224  	;***      524 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1225  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 524
000001F9 AF4601              1226  	movw ax, !0x0146
000001FC 60                  1227  	mov a, x
000001FD 5C07                1228  	and a, #0x07
000001FF 9800                1229  	mov [sp+0x00], a
00000201                     1230  	;***      525 :     SIR13 = (uint16_t)err_type;
00000201                     1231  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 525
00000201 8800                1232  	mov a, [sp+0x00]
00000203 318E                1233  	shrw ax, 8+0x00000
00000205 BF4E01              1234  	movw !0x014E, ax
00000208                     1235  	;***      526 : 
00000208                     1236  	;***      527 :     if (err_type != 0U)
00000208                     1237  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 527
00000208 8800                1238  	mov a, [sp+0x00]
0000020A D1                  1239  	cmp0 a
0000020B DD00                1240  	bz $.BB@LABEL@20_2
0000020D                     1241  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1242  	;***      528 :     {
0000020D                     1243  	;***      529 :         r_uart3_callback_error(err_type);
0000020D                     1244  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 529
0000020D 8800                1245  	mov a, [sp+0x00]
0000020F FC000000            1246  	call !!_r_uart3_callback_error@1
00000213                     1247  .BB@LABEL@20_2:	; if_break_bb
00000213                     1248  	;***      530 :     }
00000213                     1249  	;***      531 :     
00000213                     1250  	;***      532 :     rx_data = RXD3;
00000213                     1251  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 532
00000213 8D16                1252  	mov a, 0xFFF16
00000215 9801                1253  	mov [sp+0x01], a
00000217                     1254  	;***      533 : 
00000217                     1255  	;***      534 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1256  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 534
00000217 AF0000              1257  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1258  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1259  	mov a, [sp+0x01]
0000021F 61D300              1260  	bnh $.BB@LABEL@20_6
00000222                     1261  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1262  	;***      535 :     {
00000222                     1263  	;***      536 :         *gp_uart3_rx_address = rx_data;
00000222                     1264  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 536
00000222 EB0000              1265  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1266  	mov [de], a
00000226                     1267  	;***      537 :         gp_uart3_rx_address++;
00000226                     1268  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 537
00000226 A20000              1269  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1270  	;***      538 :         g_uart3_rx_count++;
00000229                     1271  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 538
00000229 A20000              1272  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1273  	;***      539 : 
0000022C                     1274  	;***      540 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1275  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 540
0000022C AF0000              1276  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1277  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1278  	sknz
00000234                     1279  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1280  	;***      541 :         {
00000234                     1281  	;***      542 :             r_uart3_callback_receiveend();
00000234                     1282  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 542
00000234 FC000000            1283  	call !!_r_uart3_callback_receiveend@1
00000238                     1284  .BB@LABEL@20_5:	; return
00000238 C6                  1285  	pop hl
00000239 C0                  1286  	pop ax
0000023A 9EFC                1287  	mov cs, a
0000023C 60                  1288  	mov a, x
0000023D 9EFD                1289  	mov es, a
0000023F C6                  1290  	pop hl
00000240 C4                  1291  	pop de
00000241 C2                  1292  	pop bc
00000242 C0                  1293  	pop ax
00000243                     1294  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 549
00000243 61FC                1295  	reti
00000245                     1296  .BB@LABEL@20_6:	; if_else_bb
00000245                     1297  	;***      543 :         }
00000245                     1298  	;***      544 :     }
00000245                     1299  	;***      545 :     else
00000245                     1300  	;***      546 :     {
00000245                     1301  	;***      547 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1302  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 547
00000245 318E                1303  	shrw ax, 8+0x00000
00000247 FC000000            1304  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1305  	br $.BB@LABEL@20_5
0000024D                     1306  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1307  _r_uart3_interrupt_send@1:
0000024D                     1308  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1309  	;***      548 :     }
0000024D                     1310  	;***      549 : }
0000024D                     1311  	;***      550 : 
0000024D                     1312  	;***      551 : /***********************************************************************************************************************
0000024D                     1313  	;***      552 : * Function Name: r_uart3_interrupt_send
0000024D                     1314  	;***      553 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1315  	;***      554 : * Arguments    : None
0000024D                     1316  	;***      555 : * Return Value : None
0000024D                     1317  	;***      556 : ***********************************************************************************************************************/
0000024D                     1318  	;***      557 : static void __near r_uart3_interrupt_send(void)
0000024D                     1319  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 557
0000024D C1                  1320  	push ax
0000024E C3                  1321  	push bc
0000024F C5                  1322  	push de
00000250 C7                  1323  	push hl
00000251 8EFD                1324  	mov a, es
00000253 70                  1325  	mov x, a
00000254 8EFC                1326  	mov a, cs
00000256 C1                  1327  	push ax
00000257                     1328  	;***      558 : {
00000257                     1329  	;***      559 :     if (g_uart3_tx_count > 0U)
00000257                     1330  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 559
00000257 AF0000              1331  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1332  	clrw bc
0000025B 43                  1333  	cmpw ax, bc
0000025C DF00                1334  	bnz $.BB@LABEL@21_3
0000025E                     1335  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1336  	;***      560 :     {
0000025E                     1337  	;***      561 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1338  	;***      562 :         gp_uart3_tx_address++;
0000025E                     1339  	;***      563 :         g_uart3_tx_count--;
0000025E                     1340  	;***      564 :     }
0000025E                     1341  	;***      565 :     else
0000025E                     1342  	;***      566 :     {
0000025E                     1343  	;***      567 :         r_uart3_callback_sendend();
0000025E                     1344  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 567
0000025E FC000000            1345  	call !!_r_uart3_callback_sendend@1
00000262                     1346  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1347  	pop ax
00000263 9EFC                1348  	mov cs, a
00000265 60                  1349  	mov a, x
00000266 9EFD                1350  	mov es, a
00000268 C6                  1351  	pop hl
00000269 C4                  1352  	pop de
0000026A C2                  1353  	pop bc
0000026B C0                  1354  	pop ax
0000026C                     1355  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 569
0000026C 61FC                1356  	reti
0000026E                     1357  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1358  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 561
0000026E EB0000              1359  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1360  	mov a, [de]
00000272 9D14                1361  	mov 0xFFF14, a
00000274                     1362  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 562
00000274 A5                  1363  	incw de
00000275 15                  1364  	movw ax, de
00000276 BF0000              1365  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1366  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 563
00000279 B20000              1367  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1368  	br $.BB@LABEL@21_2
00000100                     1369  	.SECTION .textf,TEXTF
00000100                     1370  _r_uart3_callback_receiveend@1:
00000100                     1371  	.STACK _r_uart3_callback_receiveend@1 = 4
00000100                     1372  	;***      568 :     }
00000100                     1373  	;***      569 : }
00000100                     1374  	;***      570 : 
00000100                     1375  	;***      571 : /***********************************************************************************************************************
00000100                     1376  	;***      572 : * Function Name: r_uart3_callback_receiveend
00000100                     1377  	;***      573 : * Description  : This function is a callback function when UART3 finishes reception.
00000100                     1378  	;***      574 : * Arguments    : None
00000100                     1379  	;***      575 : * Return Value : None
00000100                     1380  	;***      576 : ***********************************************************************************************************************/
00000100                     1381  	;***      577 : static void r_uart3_callback_receiveend(void)
00000100                     1382  	;***      578 : {
00000100                     1383  	;***      579 :     /* Start user code. Do not edit comment generated here */
00000100                     1384  	;***      580 : 	R_UART3_Receive(g_uart3_rx_data, 7);
00000100                     1385  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 580
00000100 320700              1386  	movw bc, #0x0007
00000103 300000              1387  	movw ax, #LOWW(_g_uart3_rx_data)
00000106 FC000000            1388  	call !!_R_UART3_Receive
0000010A                     1389  	;***      581 : 	if(g_uart3_rx_data[0] == 1){
0000010A                     1390  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 581
0000010A 8F0000              1391  	mov a, !LOWW(_g_uart3_rx_data)
0000010D 4C01                1392  	cmp a, #0x01
0000010F DF00                1393  	bnz $.BB@LABEL@22_7
00000111                     1394  .BB@LABEL@22_1:	; if_then_bb
00000111                     1395  	;***      582 : 		//Read timer setting
00000111                     1396  	;***      583 : 		if((rs485_rx_p[0] == H_READ) && (rs485_rx_p[1] == READ_TIME)){
00000111                     1397  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 583
00000111 40000052            1398  	cmp !LOWW(_g_uart3_rx_data+0x00001), #0x52
00000115 DF00                1399  	bnz $.BB@LABEL@22_6
00000117                     1400  .BB@LABEL@22_2:	; bb
00000117 40000002            1401  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x02
0000011B DF00                1402  	bnz $.BB@LABEL@22_4
0000011D                     1403  .BB@LABEL@22_3:	; if_then_bb25
0000011D                     1404  	;***      584 : 			commnunication_flag.rs485_send_to_watersolfner_response_flag = 1;
0000011D                     1405  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 584
0000011D E50000              1406  	oneb !LOWW(_commnunication_flag+0x00008)
00000120 D7                  1407  	ret
00000121                     1408  .BB@LABEL@22_4:	; bb32
00000121                     1409  	;***      585 : 		}else if((rs485_rx_p[0] == 82) && (rs485_rx_p[1] == 24)){
00000121                     1410  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 585
00000121 40000018            1411  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x18
00000125 61F8                1412  	sknz
00000127                     1413  .BB@LABEL@22_5:	; if_then_bb47
00000127                     1414  	;***      586 : 			commnunication_flag.rs485_send_to_watersolfner_SV1_flag = 1;
00000127                     1415  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 586
00000127 E50000              1416  	oneb !LOWW(_commnunication_flag+0x00009)
0000012A                     1417  .BB@LABEL@22_6:	; if_else_bb.if_else_bb48_crit_edge.critedge
0000012A                     1418  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
0000012A D7                  1419  	ret
0000012B                     1420  .BB@LABEL@22_7:	; if_else_bb97
0000012B                     1421  	;***      587 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 70)){
0000012B                     1422  	;***      588 : 			//TODO: Start Water Softener
0000012B                     1423  	;***      589 : 
0000012B                     1424  	;***      590 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 80)){
0000012B                     1425  	;***      591 : 			//TODO: Stop Water Softener + Time of SNP ON (4 bytes)
0000012B                     1426  	;***      592 : 		}
0000012B                     1427  	;***      593 : 	}else if(g_uart3_rx_data[0] == 2){
0000012B                     1428  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 593
0000012B 4C02                1429  	cmp a, #0x02
0000012D DF00                1430  	bnz $.BB@LABEL@22_12
0000012F                     1431  .BB@LABEL@22_8:	; if_then_bb103
0000012F                     1432  	;***      594 : 		if((rs485_rx_p[0] == 11)){
0000012F                     1433  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 594
0000012F 8F0000              1434  	mov a, !LOWW(_g_uart3_rx_data+0x00001)
00000132 4C0B                1435  	cmp a, #0x0B
00000134 DF00                1436  	bnz $.BB@LABEL@22_10
00000136                     1437  .BB@LABEL@22_9:	; if_then_bb111
00000136                     1438  	;***      595 : 			commnunication_flag.rs485_send_to_valve_response_flag = 1;
00000136                     1439  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 595
00000136 E50000              1440  	oneb !LOWW(_commnunication_flag+0x0000A)
00000139 D7                  1441  	ret
0000013A                     1442  .BB@LABEL@22_10:	; if_else_bb112
0000013A                     1443  	;***      596 : 		}else if((rs485_rx_p[0] == 12)){
0000013A                     1444  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 596
0000013A 4C0C                1445  	cmp a, #0x0C
0000013C DF00                1446  	bnz $.BB@LABEL@22_14
0000013E                     1447  .BB@LABEL@22_11:	; if_then_bb120
0000013E                     1448  	;***      597 : 			commnunication_flag.rs485_get_valve_gesture_flag = 1;
0000013E                     1449  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 597
0000013E E50000              1450  	oneb !LOWW(_commnunication_flag+0x0000B)
00000141 D7                  1451  	ret
00000142                     1452  .BB@LABEL@22_12:	; if_else_bb123
00000142                     1453  	;***      598 : 		}
00000142                     1454  	;***      599 : 	}else if(g_uart3_rx_data[0] != 0xff){
00000142                     1455  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 599
00000142 81                  1456  	inc a
00000143 61E8                1457  	skz
00000145                     1458  .BB@LABEL@22_13:	; if_then_bb129
00000145                     1459  	;***      600 : 		commnunication_flag.rs485_fault = 1;
00000145                     1460  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 600
00000145 E50000              1461  	oneb !LOWW(_commnunication_flag+0x0000C)
00000148                     1462  .BB@LABEL@22_14:	; return
00000148                     1463  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
00000148 D7                  1464  	ret
00000149                     1465  _r_uart3_callback_softwareoverrun@1:
00000149                     1466  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000149                     1467  	;***      601 : 	}
00000149                     1468  	;***      602 :     /* End user code. Do not edit comment generated here */
00000149                     1469  	;***      603 : }
00000149                     1470  	;***      604 : 
00000149                     1471  	;***      605 : /***********************************************************************************************************************
00000149                     1472  	;***      606 : * Function Name: r_uart3_callback_softwareoverrun
00000149                     1473  	;***      607 : * Description  : This function is a callback function when UART3 receives an overflow data.
00000149                     1474  	;***      608 : * Arguments    : rx_data -
00000149                     1475  	;***      609 : *                    receive data
00000149                     1476  	;***      610 : * Return Value : None
00000149                     1477  	;***      611 : ***********************************************************************************************************************/
00000149                     1478  	;***      612 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
00000149                     1479  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 612
00000149 D7                  1480  	ret
0000014A                     1481  _r_uart3_callback_sendend@1:
0000014A                     1482  	.STACK _r_uart3_callback_sendend@1 = 4
0000014A                     1483  	;***      613 : {
0000014A                     1484  	;***      614 :     /* Start user code. Do not edit comment generated here */
0000014A                     1485  	;***      615 :     /* End user code. Do not edit comment generated here */
0000014A                     1486  	;***      616 : }
0000014A                     1487  	;***      617 : 
0000014A                     1488  	;***      618 : /***********************************************************************************************************************
0000014A                     1489  	;***      619 : * Function Name: r_uart3_callback_sendend
0000014A                     1490  	;***      620 : * Description  : This function is a callback function when UART3 finishes transmission.
0000014A                     1491  	;***      621 : * Arguments    : None
0000014A                     1492  	;***      622 : * Return Value : None
0000014A                     1493  	;***      623 : ***********************************************************************************************************************/
0000014A                     1494  	;***      624 : static void r_uart3_callback_sendend(void)
0000014A                     1495  	;***      625 : {
0000014A                     1496  	;***      626 :     /* Start user code. Do not edit comment generated here */
0000014A                     1497  	;***      627 : 	g_uart3_sendend++;
0000014A                     1498  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 627
0000014A A00000              1499  	inc !LOWW(_g_uart3_sendend)
0000014D                     1500  	;***      628 : 	O_RS485_MODE_PIN = 0U;
0000014D                     1501  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 628
0000014D 710300              1502  	clr1 0xFFF00.0
00000150 D7                  1503  	ret
00000151                     1504  _r_uart3_callback_error@1:
00000151                     1505  	.STACK _r_uart3_callback_error@1 = 4
00000151                     1506  	;***      629 :     /* End user code. Do not edit comment generated here */
00000151                     1507  	;***      630 : }
00000151                     1508  	;***      631 : 
00000151                     1509  	;***      632 : /***********************************************************************************************************************
00000151                     1510  	;***      633 : * Function Name: r_uart3_callback_error
00000151                     1511  	;***      634 : * Description  : This function is a callback function when UART3 reception error occurs.
00000151                     1512  	;***      635 : * Arguments    : err_type -
00000151                     1513  	;***      636 : *                    error type value
00000151                     1514  	;***      637 : * Return Value : None
00000151                     1515  	;***      638 : ***********************************************************************************************************************/
00000151                     1516  	;***      639 : static void r_uart3_callback_error(uint8_t err_type)
00000151                     1517  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 639
00000151 D7                  1518  	ret
00000152                     1519  	;***      640 : {
00000152                     1520  	;***      641 :     /* Start user code. Do not edit comment generated here */
00000152                     1521  	;***      642 :     /* End user code. Do not edit comment generated here */
00000152                     1522  	;***      643 : }
00000152                     1523  	;***      644 : 
00000152                     1524  	;***      645 : /* Start user code for adding. Do not edit comment generated here */
00000152                     1525  	;***      646 : /* End user code. Do not edit comment generated here */
00000000                     1526  	.SECTION .bss,BSS
00000000                     1527  _g_uart3_rx_data:
00000000                     1528  	.DS (8)
00000008                     1529  _send_response_flag:
00000008                     1530  	.DS (1)
00000009                     1531  _send_response_time_flag:
00000009                     1532  	.DS (1)
0000000A                     1533  _send_response_number_flag:
0000000A                     1534  	.DS (1)
0000000B                     1535  _recived_time_setting_flag:
0000000B                     1536  	.DS (1)
0000000C                     1537  _send_respone_status_flag:
0000000C                     1538  	.DS (1)
0000000D                     1539  _recived_number_setting_flag:
0000000D                     1540  	.DS (1)
0000000E                     1541  _commnunication_flag:
0000000E                     1542  	.DS (13)
0000001B                     1543  _g_csi_count:
0000001B                     1544  	.DS (1)
0000001C                     1545  _g_csi_err:
0000001C                     1546  	.DS (1)
0000001D                     1547  _g_csi_send_end:
0000001D                     1548  	.DS (1)
0000001E                     1549  _g_csi_rev_end:
0000001E                     1550  	.DS (1)
0000001F                     1551  _g_uart1_send:
0000001F                     1552  	.DS (1)
00000020                     1553  _g_uart2_sendend:
00000020                     1554  	.DS (1)
00000021                     1555  _g_uart2_receive:
00000021                     1556  	.DS (1)
00000022                     1557  _g_rx_data:
00000022                     1558  	.DS (160)
000000C2                     1559  _g_uart2_fault:
000000C2                     1560  	.DS (1)
000000C3                     1561  _g_uart3_sendend:
000000C3                     1562  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               338 (00000152) .textf
BSS                 196 (000000C4) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl000\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

