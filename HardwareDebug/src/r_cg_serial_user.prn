RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Wed Dec 08 17:02:59 2021
00000000                       19  
00000000                       20  	.EXTERN _rec_buf
00000000                       21  	.EXTERN _gp_uart1_tx_address
00000000                       22  	.EXTERN _g_uart1_tx_count
00000000                       23  	.EXTERN _gp_uart1_rx_address
00000000                       24  	.EXTERN _g_uart1_rx_count
00000000                       25  	.EXTERN _g_uart1_rx_length
00000000                       26  	.EXTERN _gp_csi00_tx_address
00000000                       27  	.EXTERN _g_csi00_tx_count
00000000                       28  	.EXTERN _gp_csi01_rx_address
00000000                       29  	.EXTERN _gp_csi01_tx_address
00000000                       30  	.EXTERN _g_csi01_tx_count
00000000                       31  	.EXTERN _gp_uart2_tx_address
00000000                       32  	.EXTERN _g_uart2_tx_count
00000000                       33  	.EXTERN _gp_uart2_rx_address
00000000                       34  	.EXTERN _g_uart2_rx_count
00000000                       35  	.EXTERN _g_uart2_rx_length
00000000                       36  	.EXTERN _gp_uart3_tx_address
00000000                       37  	.EXTERN _g_uart3_tx_count
00000000                       38  	.EXTERN _gp_uart3_rx_address
00000000                       39  	.EXTERN _g_uart3_rx_count
00000000                       40  	.EXTERN _g_uart3_rx_length
00000000                       41  	.PUBLIC _send_response_flag
00000000                       42  	.PUBLIC _send_response_time_flag
00000000                       43  	.PUBLIC _send_response_number_flag
00000000                       44  	.PUBLIC _recived_time_setting_flag
00000000                       45  	.PUBLIC _g_csi_count
00000000                       46  	.PUBLIC _g_csi_err
00000000                       47  	.PUBLIC _g_csi_send_end
00000000                       48  	.PUBLIC _g_csi_rev_end
00000000                       49  	.PUBLIC _g_uart1_send
00000000                       50  	.PUBLIC _g_uart2_sendend
00000000                       51  	.PUBLIC _g_uart2_receive
00000000                       52  	.PUBLIC _g_rx_data
00000000                       53  	.PUBLIC _g_uart2_fault
00000000                       54  	.PUBLIC _g_uart3_sendend
00000000                       55  	.PUBLIC _isCommand
00000000                       56  	.EXTERN _R_CSI01_Stop
00000000                       57  	.EXTERN _R_UART2_Receive
00000000                       58  	.EXTERN _R_UART3_Receive
00000000                       59  
00000000                       60  	.SECTION .textf,TEXTF
00000000                       61  _isCommand:
00000000                       62  	.STACK _isCommand = 4
00000000                       63  	;***        1 : /***********************************************************************************************************************
00000000                       64  	;***        2 : * DISCLAIMER
00000000                       65  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       66  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       67  	;***        5 : * applicable laws, including copyright laws. 
00000000                       68  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       69  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       70  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       71  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       72  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       73  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       74  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       75  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       76  	;***       14 : * following link:
00000000                       77  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       78  	;***       16 : *
00000000                       79  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       80  	;***       18 : ***********************************************************************************************************************/
00000000                       81  	;***       19 : 
00000000                       82  	;***       20 : /***********************************************************************************************************************
00000000                       83  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       84  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       85  	;***       23 : * Device(s)    : R5F104ML
00000000                       86  	;***       24 : * Tool-Chain   : CCRL
00000000                       87  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       88  	;***       26 : * Creation Date: 30/11/2021
00000000                       89  	;***       27 : ***********************************************************************************************************************/
00000000                       90  	;***       28 : 
00000000                       91  	;***       29 : /***********************************************************************************************************************
00000000                       92  	;***       30 : Includes
00000000                       93  	;***       31 : ***********************************************************************************************************************/
00000000                       94  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       95  	;***       33 : #include "r_cg_serial.h"
00000000                       96  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                       97  	;***       35 : /* End user code. Do not edit comment generated here */
00000000                       98  	;***       36 : #include "r_cg_userdefine.h"
00000000                       99  	;***       37 : 
00000000                      100  	;***       38 : /***********************************************************************************************************************
00000000                      101  	;***       39 : Pragma directive
00000000                      102  	;***       40 : ***********************************************************************************************************************/
00000000                      103  	;***       41 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      104  	;***       42 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      105  	;***       43 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      106  	;***       44 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      107  	;***       45 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      108  	;***       46 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      109  	;***       47 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      110  	;***       48 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      111  	;***       49 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      112  	;***       50 : /* End user code. Do not edit comment generated here */
00000000                      113  	;***       51 : 
00000000                      114  	;***       52 : /***********************************************************************************************************************
00000000                      115  	;***       53 : Global variables and functions
00000000                      116  	;***       54 : ***********************************************************************************************************************/
00000000                      117  	;***       55 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      118  	;***       56 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      119  	;***       57 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      120  	;***       58 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      121  	;***       59 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      122  	;***       60 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      123  	;***       61 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      124  	;***       62 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      125  	;***       63 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      126  	;***       64 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      127  	;***       65 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      128  	;***       66 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      129  	;***       67 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      130  	;***       68 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      131  	;***       69 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      132  	;***       70 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      133  	;***       71 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      134  	;***       72 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      135  	;***       73 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      136  	;***       74 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      137  	;***       75 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      138  	;***       76 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      139  	;***       77 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      140  	;***       78 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      141  	;***       79 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      142  	;***       80 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      143  	;***       81 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      144  	;***       82 : /* Start user code for global. Do not edit comment generated here */
00000000                      145  	;***       83 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag, recived_time_setting_flag;
00000000                      146  	;***       84 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      147  	;***       85 : uint8_t g_rx_data[72];
00000000                      148  	;***       86 : volatile uint8_t g_uart2_fault;
00000000                      149  	;***       87 : volatile uint8_t g_uart3_sendend;
00000000                      150  	;***       88 : uint8_t isCommand(uint8_t *data){
00000000                      151  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 88
00000000 14                   152  	movw de, ax
00000001                      153  	;***       89 : 	switch ((enum UART_header_e)*data) {
00000001                      154  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 89
00000001 89                   155  	mov a, [de]
00000002 0CBF                 156  	add a, #0xBF
00000004 DD00                 157  	bz $.BB@LABEL@1_6
00000006                      158  .BB@LABEL@1_1:	; entry
00000006 0CFE                 159  	add a, #0xFE
00000008 DD00                 160  	bz $.BB@LABEL@1_6
0000000A                      161  .BB@LABEL@1_2:	; entry
0000000A 0CFE                 162  	add a, #0xFE
0000000C DD00                 163  	bz $.BB@LABEL@1_6
0000000E                      164  .BB@LABEL@1_3:	; entry
0000000E 0CF3                 165  	add a, #0xF3
00000010 DD00                 166  	bz $.BB@LABEL@1_6
00000012                      167  .BB@LABEL@1_4:	; entry
00000012 91                   168  	dec a
00000013 DD00                 169  	bz $.BB@LABEL@1_6
00000015                      170  .BB@LABEL@1_5:	; bb11
00000015                      171  	;***       90 : 		case H_ALARM:
00000015                      172  	;***       91 : 			send_response_flag = 1;
00000015                      173  	;***       92 : 			break;
00000015                      174  	;***       93 : 		case H_CLEAR:
00000015                      175  	;***       94 : 			send_response_flag = 1;
00000015                      176  	;***       95 : 			break;
00000015                      177  	;***       96 : 		case H_ERROR:
00000015                      178  	;***       97 : 			send_response_flag = 1;
00000015                      179  	;***       98 : 			break;
00000015                      180  	;***       99 : 		case H_READ:
00000015                      181  	;***      100 : 			send_response_flag = 1;
00000015                      182  	;***      101 : 			break;
00000015                      183  	;***      102 : 		case H_SET:
00000015                      184  	;***      103 : 			send_response_flag = 1;
00000015                      185  	;***      104 : 			break;
00000015                      186  	;***      105 : 		default:
00000015                      187  	;***      106 : 			return 0;
00000015                      188  	;***      107 : 	}
00000015                      189  	;***      108 : 	return 1;
00000015                      190  	;***      109 : }
00000015                      191  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 109
00000015 F1                   192  	clrb a
00000016 D7                   193  	ret
00000017                      194  .BB@LABEL@1_6:	; switch_clause_bb8
00000017 E50000               195  	oneb !LOWW(_send_response_flag)
0000001A E1                   196  	oneb a
0000001B D7                   197  	ret
00000000                      198  	.SECTION .text,TEXT
00000000                      199  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      200  _r_uart1_interrupt_receive@1:
00000000                      201  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      202  	;***      110 : /* End user code. Do not edit comment generated here */
00000000                      203  	;***      111 : 
00000000                      204  	;***      112 : /***********************************************************************************************************************
00000000                      205  	;***      113 : * Function Name: r_uart1_interrupt_receive
00000000                      206  	;***      114 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      207  	;***      115 : * Arguments    : None
00000000                      208  	;***      116 : * Return Value : None
00000000                      209  	;***      117 : ***********************************************************************************************************************/
00000000                      210  	;***      118 : static void __near r_uart1_interrupt_receive(void)
00000000                      211  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 118
00000000 C1                   212  	push ax
00000001 C3                   213  	push bc
00000002 C5                   214  	push de
00000003 C7                   215  	push hl
00000004 8EFD                 216  	mov a, es
00000006 70                   217  	mov x, a
00000007 8EFC                 218  	mov a, cs
00000009 C1                   219  	push ax
0000000A C7                   220  	push hl
0000000B                      221  	;***      119 : {
0000000B                      222  	;***      120 :     volatile uint8_t rx_data;
0000000B                      223  	;***      121 :     volatile uint8_t err_type;
0000000B                      224  	;***      122 :     
0000000B                      225  	;***      123 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      226  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 123
0000000B AF0601               227  	movw ax, !0x0106
0000000E 60                   228  	mov a, x
0000000F 5C07                 229  	and a, #0x07
00000011 9800                 230  	mov [sp+0x00], a
00000013                      231  	;***      124 :     SIR03 = (uint16_t)err_type;
00000013                      232  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 124
00000013 8800                 233  	mov a, [sp+0x00]
00000015 318E                 234  	shrw ax, 8+0x00000
00000017 BF0E01               235  	movw !0x010E, ax
0000001A                      236  	;***      125 : 
0000001A                      237  	;***      126 :     if (err_type != 0U)
0000001A                      238  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 126
0000001A 8800                 239  	mov a, [sp+0x00]
0000001C D1                   240  	cmp0 a
0000001D DD00                 241  	bz $.BB@LABEL@2_2
0000001F                      242  .BB@LABEL@2_1:	; if_then_bb
0000001F                      243  	;***      127 :     {
0000001F                      244  	;***      128 :         r_uart1_callback_error(err_type);
0000001F                      245  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 128
0000001F 8800                 246  	mov a, [sp+0x00]
00000021 FC000000             247  	call !!_r_uart1_callback_error@1
00000025                      248  .BB@LABEL@2_2:	; if_break_bb
00000025                      249  	;***      129 :     }
00000025                      250  	;***      130 :     
00000025                      251  	;***      131 :     rx_data = RXD1;
00000025                      252  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
00000025 8E46                 253  	mov a, 0xFFF46
00000027 9801                 254  	mov [sp+0x01], a
00000029                      255  	;***      132 : 
00000029                      256  	;***      133 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      257  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 133
00000029 AF0000               258  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               259  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 260  	mov a, [sp+0x01]
00000031 61D300               261  	bnh $.BB@LABEL@2_6
00000034                      262  .BB@LABEL@2_3:	; if_then_bb18
00000034                      263  	;***      134 :     {
00000034                      264  	;***      135 :         *gp_uart1_rx_address = rx_data;
00000034                      265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
00000034 EB0000               266  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   267  	mov [de], a
00000038                      268  	;***      136 :         gp_uart1_rx_address++;
00000038                      269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 136
00000038 A20000               270  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      271  	;***      137 :         g_uart1_rx_count++;
0000003B                      272  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 137
0000003B A20000               273  	incw !LOWW(_g_uart1_rx_count)
0000003E                      274  	;***      138 : 
0000003E                      275  	;***      139 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      276  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 139
0000003E AF0000               277  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               278  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 279  	sknz
00000046                      280  .BB@LABEL@2_4:	; if_then_bb30
00000046                      281  	;***      140 :         {
00000046                      282  	;***      141 :             r_uart1_callback_receiveend();
00000046                      283  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 141
00000046 FC000000             284  	call !!_r_uart1_callback_receiveend@1
0000004A                      285  .BB@LABEL@2_5:	; return
0000004A C6                   286  	pop hl
0000004B C0                   287  	pop ax
0000004C 9EFC                 288  	mov cs, a
0000004E 60                   289  	mov a, x
0000004F 9EFD                 290  	mov es, a
00000051 C6                   291  	pop hl
00000052 C4                   292  	pop de
00000053 C2                   293  	pop bc
00000054 C0                   294  	pop ax
00000055                      295  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 148
00000055 61FC                 296  	reti
00000057                      297  .BB@LABEL@2_6:	; if_else_bb
00000057                      298  	;***      142 :         }
00000057                      299  	;***      143 :     }
00000057                      300  	;***      144 :     else
00000057                      301  	;***      145 :     {
00000057                      302  	;***      146 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      303  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
00000057 318E                 304  	shrw ax, 8+0x00000
00000059 FC000000             305  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 306  	br $.BB@LABEL@2_5
0000005F                      307  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      308  _r_uart1_interrupt_send@1:
0000005F                      309  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      310  	;***      147 :     }
0000005F                      311  	;***      148 : }
0000005F                      312  	;***      149 : 
0000005F                      313  	;***      150 : /***********************************************************************************************************************
0000005F                      314  	;***      151 : * Function Name: r_uart1_interrupt_send
0000005F                      315  	;***      152 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      316  	;***      153 : * Arguments    : None
0000005F                      317  	;***      154 : * Return Value : None
0000005F                      318  	;***      155 : ***********************************************************************************************************************/
0000005F                      319  	;***      156 : static void __near r_uart1_interrupt_send(void)
0000005F                      320  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 156
0000005F C1                   321  	push ax
00000060 C3                   322  	push bc
00000061 C5                   323  	push de
00000062 C7                   324  	push hl
00000063 8EFD                 325  	mov a, es
00000065 70                   326  	mov x, a
00000066 8EFC                 327  	mov a, cs
00000068 C1                   328  	push ax
00000069                      329  	;***      157 : {
00000069                      330  	;***      158 :     if (g_uart1_tx_count > 0U)
00000069                      331  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 158
00000069 AF0000               332  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   333  	clrw bc
0000006D 43                   334  	cmpw ax, bc
0000006E DF00                 335  	bnz $.BB@LABEL@3_3
00000070                      336  .BB@LABEL@3_1:	; if_else_bb
00000070                      337  	;***      159 :     {
00000070                      338  	;***      160 :         TXD1 = *gp_uart1_tx_address;
00000070                      339  	;***      161 :         gp_uart1_tx_address++;
00000070                      340  	;***      162 :         g_uart1_tx_count--;
00000070                      341  	;***      163 :     }
00000070                      342  	;***      164 :     else
00000070                      343  	;***      165 :     {
00000070                      344  	;***      166 :         r_uart1_callback_sendend();
00000070                      345  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 166
00000070 FC000000             346  	call !!_r_uart1_callback_sendend@1
00000074                      347  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   348  	pop ax
00000075 9EFC                 349  	mov cs, a
00000077 60                   350  	mov a, x
00000078 9EFD                 351  	mov es, a
0000007A C6                   352  	pop hl
0000007B C4                   353  	pop de
0000007C C2                   354  	pop bc
0000007D C0                   355  	pop ax
0000007E                      356  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 168
0000007E 61FC                 357  	reti
00000080                      358  .BB@LABEL@3_3:	; if_then_bb
00000080                      359  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 160
00000080 EB0000               360  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   361  	mov a, [de]
00000084 9E44                 362  	mov 0xFFF44, a
00000086                      363  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 161
00000086 A5                   364  	incw de
00000087 15                   365  	movw ax, de
00000088 BF0000               366  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      367  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 162
0000008B B20000               368  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 369  	br $.BB@LABEL@3_2
0000001C                      370  	.SECTION .textf,TEXTF
0000001C                      371  _r_uart1_callback_receiveend@1:
0000001C                      372  	.STACK _r_uart1_callback_receiveend@1 = 4
0000001C                      373  	;***      167 :     }
0000001C                      374  	;***      168 : }
0000001C                      375  	;***      169 : 
0000001C                      376  	;***      170 : /***********************************************************************************************************************
0000001C                      377  	;***      171 : * Function Name: r_uart1_callback_receiveend
0000001C                      378  	;***      172 : * Description  : This function is a callback function when UART1 finishes reception.
0000001C                      379  	;***      173 : * Arguments    : None
0000001C                      380  	;***      174 : * Return Value : None
0000001C                      381  	;***      175 : ***********************************************************************************************************************/
0000001C                      382  	;***      176 : static void r_uart1_callback_receiveend(void)
0000001C                      383  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 176
0000001C D7                   384  	ret
0000001D                      385  _r_uart1_callback_softwareoverrun@1:
0000001D                      386  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
0000001D                      387  	;***      177 : {
0000001D                      388  	;***      178 :     /* Start user code. Do not edit comment generated here */
0000001D                      389  	;***      179 :     /* End user code. Do not edit comment generated here */
0000001D                      390  	;***      180 : }
0000001D                      391  	;***      181 : 
0000001D                      392  	;***      182 : /***********************************************************************************************************************
0000001D                      393  	;***      183 : * Function Name: r_uart1_callback_softwareoverrun
0000001D                      394  	;***      184 : * Description  : This function is a callback function when UART1 receives an overflow data.
0000001D                      395  	;***      185 : * Arguments    : rx_data -
0000001D                      396  	;***      186 : *                    receive data
0000001D                      397  	;***      187 : * Return Value : None
0000001D                      398  	;***      188 : ***********************************************************************************************************************/
0000001D                      399  	;***      189 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
0000001D                      400  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 189
0000001D D7                   401  	ret
0000001E                      402  _r_uart1_callback_sendend@1:
0000001E                      403  	.STACK _r_uart1_callback_sendend@1 = 4
0000001E                      404  	;***      190 : {
0000001E                      405  	;***      191 :     /* Start user code. Do not edit comment generated here */
0000001E                      406  	;***      192 :     /* End user code. Do not edit comment generated here */
0000001E                      407  	;***      193 : }
0000001E                      408  	;***      194 : 
0000001E                      409  	;***      195 : /***********************************************************************************************************************
0000001E                      410  	;***      196 : * Function Name: r_uart1_callback_sendend
0000001E                      411  	;***      197 : * Description  : This function is a callback function when UART1 finishes transmission.
0000001E                      412  	;***      198 : * Arguments    : None
0000001E                      413  	;***      199 : * Return Value : None
0000001E                      414  	;***      200 : ***********************************************************************************************************************/
0000001E                      415  	;***      201 : static void r_uart1_callback_sendend(void)
0000001E                      416  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 201
0000001E D7                   417  	ret
0000001F                      418  _r_uart1_callback_error@1:
0000001F                      419  	.STACK _r_uart1_callback_error@1 = 4
0000001F                      420  	;***      202 : {
0000001F                      421  	;***      203 :     /* Start user code. Do not edit comment generated here */
0000001F                      422  	;***      204 :     /* End user code. Do not edit comment generated here */
0000001F                      423  	;***      205 : }
0000001F                      424  	;***      206 : 
0000001F                      425  	;***      207 : /***********************************************************************************************************************
0000001F                      426  	;***      208 : * Function Name: r_uart1_callback_error
0000001F                      427  	;***      209 : * Description  : This function is a callback function when UART1 reception error occurs.
0000001F                      428  	;***      210 : * Arguments    : err_type -
0000001F                      429  	;***      211 : *                    error type value
0000001F                      430  	;***      212 : * Return Value : None
0000001F                      431  	;***      213 : ***********************************************************************************************************************/
0000001F                      432  	;***      214 : static void r_uart1_callback_error(uint8_t err_type)
0000001F                      433  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 214
0000001F D7                   434  	ret
00000090                      435  	.SECTION .text,TEXT
00000090                      436  _r_csi00_interrupt@1	.vector 0x001E
00000090                      437  _r_csi00_interrupt@1:
00000090                      438  	.STACK _r_csi00_interrupt@1 = 16
00000090                      439  	;***      215 : {
00000090                      440  	;***      216 :     /* Start user code. Do not edit comment generated here */
00000090                      441  	;***      217 :     /* End user code. Do not edit comment generated here */
00000090                      442  	;***      218 : }
00000090                      443  	;***      219 : 
00000090                      444  	;***      220 : /***********************************************************************************************************************
00000090                      445  	;***      221 : * Function Name: r_csi00_interrupt
00000090                      446  	;***      222 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      447  	;***      223 : * Arguments    : None
00000090                      448  	;***      224 : * Return Value : None
00000090                      449  	;***      225 : ***********************************************************************************************************************/
00000090                      450  	;***      226 : static void __near r_csi00_interrupt(void)
00000090                      451  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 226
00000090 C1                   452  	push ax
00000091 C3                   453  	push bc
00000092 C5                   454  	push de
00000093 C7                   455  	push hl
00000094 8EFD                 456  	mov a, es
00000096 70                   457  	mov x, a
00000097 8EFC                 458  	mov a, cs
00000099 C1                   459  	push ax
0000009A C7                   460  	push hl
0000009B                      461  	;***      227 : {
0000009B                      462  	;***      228 :     volatile uint8_t err_type;
0000009B                      463  	;***      229 : 
0000009B                      464  	;***      230 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      465  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 230
0000009B AF0001               466  	movw ax, !0x0100
0000009E 60                   467  	mov a, x
0000009F 5C01                 468  	and a, #0x01
000000A1 9800                 469  	mov [sp+0x00], a
000000A3                      470  	;***      231 :     SIR00 = (uint16_t)err_type;
000000A3                      471  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 231
000000A3 8800                 472  	mov a, [sp+0x00]
000000A5 318E                 473  	shrw ax, 8+0x00000
000000A7 BF0801               474  	movw !0x0108, ax
000000AA                      475  	;***      232 : 
000000AA                      476  	;***      233 :     if (err_type != 1U)
000000AA                      477  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 233
000000AA 8800                 478  	mov a, [sp+0x00]
000000AC 91                   479  	dec a
000000AD DF00                 480  	bnz $.BB@LABEL@8_2
000000AF                      481  .BB@LABEL@8_1:	; return
000000AF C6                   482  	pop hl
000000B0 C0                   483  	pop ax
000000B1 9EFC                 484  	mov cs, a
000000B3 60                   485  	mov a, x
000000B4 9EFD                 486  	mov es, a
000000B6 C6                   487  	pop hl
000000B7 C4                   488  	pop de
000000B8 C2                   489  	pop bc
000000B9 C0                   490  	pop ax
000000BA                      491  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 246
000000BA 61FC                 492  	reti
000000BC                      493  .BB@LABEL@8_2:	; if_then_bb
000000BC                      494  	;***      234 :     {
000000BC                      495  	;***      235 :         if (g_csi00_tx_count > 0U)
000000BC                      496  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 235
000000BC AF0000               497  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   498  	clrw bc
000000C0 43                   499  	cmpw ax, bc
000000C1 DF00                 500  	bnz $.BB@LABEL@8_4
000000C3                      501  .BB@LABEL@8_3:	; if_else_bb
000000C3                      502  	;***      236 :         {
000000C3                      503  	;***      237 :             SIO00 = *gp_csi00_tx_address;
000000C3                      504  	;***      238 :             gp_csi00_tx_address++;
000000C3                      505  	;***      239 :             g_csi00_tx_count--;
000000C3                      506  	;***      240 :         }
000000C3                      507  	;***      241 :         else
000000C3                      508  	;***      242 :         {
000000C3                      509  	;***      243 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      510  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 243
000000C3 FC000000             511  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 512  	br $.BB@LABEL@8_1
000000C9                      513  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      514  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 237
000000C9 EB0000               515  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   516  	mov a, [de]
000000CD 9D10                 517  	mov 0xFFF10, a
000000CF                      518  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 238
000000CF A5                   519  	incw de
000000D0 15                   520  	movw ax, de
000000D1 BF0000               521  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      522  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 239
000000D4 B20000               523  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 524  	br $.BB@LABEL@8_1
00000020                      525  	.SECTION .textf,TEXTF
00000020                      526  _r_csi00_callback_sendend@1:
00000020                      527  	.STACK _r_csi00_callback_sendend@1 = 4
00000020                      528  	;***      244 :         }
00000020                      529  	;***      245 :     }
00000020                      530  	;***      246 : }
00000020                      531  	;***      247 : 
00000020                      532  	;***      248 : /***********************************************************************************************************************
00000020                      533  	;***      249 : * Function Name: r_csi00_callback_sendend
00000020                      534  	;***      250 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000020                      535  	;***      251 : * Arguments    : None
00000020                      536  	;***      252 : * Return Value : None
00000020                      537  	;***      253 : ***********************************************************************************************************************/
00000020                      538  	;***      254 : static void r_csi00_callback_sendend(void)
00000020                      539  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 254
00000020 D7                   540  	ret
000000D9                      541  	.SECTION .text,TEXT
000000D9                      542  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      543  _r_csi01_interrupt@1:
000000D9                      544  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      545  	;***      255 : {
000000D9                      546  	;***      256 :     /* Start user code. Do not edit comment generated here */
000000D9                      547  	;***      257 :     /* End user code. Do not edit comment generated here */
000000D9                      548  	;***      258 : }
000000D9                      549  	;***      259 : 
000000D9                      550  	;***      260 : /***********************************************************************************************************************
000000D9                      551  	;***      261 : * Function Name: r_csi01_interrupt
000000D9                      552  	;***      262 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      553  	;***      263 : * Arguments    : None
000000D9                      554  	;***      264 : * Return Value : None
000000D9                      555  	;***      265 : ***********************************************************************************************************************/
000000D9                      556  	;***      266 : static void __near r_csi01_interrupt(void)
000000D9                      557  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 266
000000D9 C1                   558  	push ax
000000DA C3                   559  	push bc
000000DB C5                   560  	push de
000000DC C7                   561  	push hl
000000DD 8EFD                 562  	mov a, es
000000DF 70                   563  	mov x, a
000000E0 8EFC                 564  	mov a, cs
000000E2 C1                   565  	push ax
000000E3 C7                   566  	push hl
000000E4                      567  	;***      267 : {
000000E4                      568  	;***      268 :     volatile uint8_t err_type;
000000E4                      569  	;***      269 :     volatile uint8_t sio_dummy;
000000E4                      570  	;***      270 : 
000000E4                      571  	;***      271 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      572  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 271
000000E4 AF0201               573  	movw ax, !0x0102
000000E7 60                   574  	mov a, x
000000E8 5C01                 575  	and a, #0x01
000000EA 9800                 576  	mov [sp+0x00], a
000000EC                      577  	;***      272 :     SIR01 = (uint16_t)err_type;
000000EC                      578  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 272
000000EC 8800                 579  	mov a, [sp+0x00]
000000EE 318E                 580  	shrw ax, 8+0x00000
000000F0 BF0A01               581  	movw !0x010A, ax
000000F3                      582  	;***      273 : 
000000F3                      583  	;***      274 :     if (1U == err_type)
000000F3                      584  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 274
000000F3 8800                 585  	mov a, [sp+0x00]
000000F5 91                   586  	dec a
000000F6 DF00                 587  	bnz $.BB@LABEL@10_2
000000F8                      588  .BB@LABEL@10_1:	; if_then_bb
000000F8                      589  	;***      275 :     {
000000F8                      590  	;***      276 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      591  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 276
000000F8 8800                 592  	mov a, [sp+0x00]
000000FA FC000000             593  	call !!_r_csi01_callback_error@1
000000FE EF00                 594  	br $.BB@LABEL@10_15
00000100                      595  .BB@LABEL@10_2:	; if_else_bb
00000100                      596  	;***      277 :     }
00000100                      597  	;***      278 :     else
00000100                      598  	;***      279 :     {
00000100                      599  	;***      280 :         if (g_csi01_tx_count > 0U)
00000100                      600  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 280
00000100 AF0000               601  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   602  	clrw bc
00000104 43                   603  	cmpw ax, bc
00000105 DF00                 604  	bnz $.BB@LABEL@10_8
00000107                      605  .BB@LABEL@10_3:	; if_else_bb42
00000107                      606  	;***      281 :         {
00000107                      607  	;***      282 :             if (0U != gp_csi01_rx_address)
00000107                      608  	;***      283 :             {
00000107                      609  	;***      284 :                 *gp_csi01_rx_address = SIO01;
00000107                      610  	;***      285 :                 gp_csi01_rx_address++;
00000107                      611  	;***      286 :             }
00000107                      612  	;***      287 :             else
00000107                      613  	;***      288 :             {
00000107                      614  	;***      289 :                 sio_dummy = SIO01;
00000107                      615  	;***      290 :             }
00000107                      616  	;***      291 : 
00000107                      617  	;***      292 :             if (0U != gp_csi01_tx_address)
00000107                      618  	;***      293 :             {
00000107                      619  	;***      294 :                 SIO01 = *gp_csi01_tx_address;
00000107                      620  	;***      295 :                 gp_csi01_tx_address++;
00000107                      621  	;***      296 :             }
00000107                      622  	;***      297 :             else
00000107                      623  	;***      298 :             {
00000107                      624  	;***      299 :                 SIO01 = 0xFFU;
00000107                      625  	;***      300 :             }
00000107                      626  	;***      301 : 
00000107                      627  	;***      302 :             g_csi01_tx_count--;
00000107                      628  	;***      303 :         }
00000107                      629  	;***      304 :         else 
00000107                      630  	;***      305 :         {
00000107                      631  	;***      306 :             if (0U == g_csi01_tx_count)
00000107                      632  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 306
00000107 AF0000               633  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   634  	cmpw ax, bc
0000010B DF00                 635  	bnz $.BB@LABEL@10_7
0000010D                      636  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      637  	;***      307 :             {
0000010D                      638  	;***      308 :                 if (0U != gp_csi01_rx_address)
0000010D                      639  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 308
0000010D AF0000               640  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   641  	cmpw ax, bc
00000111 DF00                 642  	bnz $.BB@LABEL@10_6
00000113                      643  .BB@LABEL@10_5:	; if_else_bb55
00000113                      644  	;***      309 :                 {
00000113                      645  	;***      310 :                     *gp_csi01_rx_address = SIO01;
00000113                      646  	;***      311 :                 }
00000113                      647  	;***      312 :                 else
00000113                      648  	;***      313 :                 {
00000113                      649  	;***      314 :                     sio_dummy = SIO01;
00000113                      650  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 314
00000113 8D12                 651  	mov a, 0xFFF12
00000115 9801                 652  	mov [sp+0x01], a
00000117 EF00                 653  	br $.BB@LABEL@10_7
00000119                      654  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   655  	movw de, ax
0000011A                      656  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 310
0000011A 8D12                 657  	mov a, 0xFFF12
0000011C 99                   658  	mov [de], a
0000011D                      659  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      660  	;***      315 :                 }
0000011D                      661  	;***      316 :             }
0000011D                      662  	;***      317 : 
0000011D                      663  	;***      318 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      664  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 318
0000011D FC000000             665  	call !!_r_csi01_callback_sendend@1
00000121                      666  	;***      319 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      667  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 319
00000121 FC000000             668  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 669  	br $.BB@LABEL@10_15
00000127                      670  .BB@LABEL@10_8:	; if_then_bb16
00000127                      671  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 282
00000127 AF0000               672  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   673  	cmpw ax, bc
0000012B DF00                 674  	bnz $.BB@LABEL@10_10
0000012D                      675  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      676  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 289
0000012D 8D12                 677  	mov a, 0xFFF12
0000012F 9801                 678  	mov [sp+0x01], a
00000131 EF00                 679  	br $.BB@LABEL@10_11
00000133                      680  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   681  	movw de, ax
00000134                      682  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 284
00000134 8D12                 683  	mov a, 0xFFF12
00000136 99                   684  	mov [de], a
00000137                      685  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 285
00000137 A20000               686  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      687  .BB@LABEL@10_11:	; if_break_bb
0000013A                      688  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 292
0000013A AF0000               689  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   690  	cmpw ax, bc
0000013E DF00                 691  	bnz $.BB@LABEL@10_13
00000140                      692  .BB@LABEL@10_12:	; if_else_bb38
00000140                      693  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
00000140 CD12FF               694  	mov 0xFFF12, #0xFF
00000143 EF00                 695  	br $.BB@LABEL@10_14
00000145                      696  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   697  	movw de, ax
00000146                      698  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 294
00000146 89                   699  	mov a, [de]
00000147 9D12                 700  	mov 0xFFF12, a
00000149                      701  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 295
00000149 A5                   702  	incw de
0000014A 15                   703  	movw ax, de
0000014B BF0000               704  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      705  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      706  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 302
0000014E B20000               707  	decw !LOWW(_g_csi01_tx_count)
00000151                      708  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   709  	pop hl
00000152 C0                   710  	pop ax
00000153 9EFC                 711  	mov cs, a
00000155 60                   712  	mov a, x
00000156 9EFD                 713  	mov es, a
00000158 C6                   714  	pop hl
00000159 C4                   715  	pop de
0000015A C2                   716  	pop bc
0000015B C0                   717  	pop ax
0000015C                      718  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 322
0000015C 61FC                 719  	reti
00000021                      720  	.SECTION .textf,TEXTF
00000021                      721  _r_csi01_callback_receiveend@1:
00000021                      722  	.STACK _r_csi01_callback_receiveend@1 = 4
00000021                      723  	;***      320 :         }
00000021                      724  	;***      321 :     }
00000021                      725  	;***      322 : }
00000021                      726  	;***      323 : 
00000021                      727  	;***      324 : /***********************************************************************************************************************
00000021                      728  	;***      325 : * Function Name: r_csi01_callback_receiveend
00000021                      729  	;***      326 : * Description  : This function is a callback function when CSI01 finishes reception.
00000021                      730  	;***      327 : * Arguments    : None
00000021                      731  	;***      328 : * Return Value : None
00000021                      732  	;***      329 : ***********************************************************************************************************************/
00000021                      733  	;***      330 : static void r_csi01_callback_receiveend(void)
00000021                      734  	;***      331 : {
00000021                      735  	;***      332 :     /* Start user code. Do not edit comment generated here */
00000021                      736  	;***      333 : 	g_csi_rev_end++;
00000021                      737  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 333
00000021 A00000               738  	inc !LOWW(_g_csi_rev_end)
00000024                      739  	;***      334 : 	R_CSI01_Stop();
00000024                      740  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 334
00000024 EC000000             741  	br !!_R_CSI01_Stop
00000028                      742  _r_csi01_callback_error@1:
00000028                      743  	.STACK _r_csi01_callback_error@1 = 4
00000028                      744  	;***      335 :     /* End user code. Do not edit comment generated here */
00000028                      745  	;***      336 : }
00000028                      746  	;***      337 : 
00000028                      747  	;***      338 : /***********************************************************************************************************************
00000028                      748  	;***      339 : * Function Name: r_csi01_callback_error
00000028                      749  	;***      340 : * Description  : This function is a callback function when CSI01 reception error occurs.
00000028                      750  	;***      341 : * Arguments    : err_type -
00000028                      751  	;***      342 : *                    error type value
00000028                      752  	;***      343 : * Return Value : None
00000028                      753  	;***      344 : ***********************************************************************************************************************/
00000028                      754  	;***      345 : static void r_csi01_callback_error(uint8_t err_type)
00000028                      755  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 345
00000028 D7                   756  	ret
00000029                      757  _r_csi01_callback_sendend@1:
00000029                      758  	.STACK _r_csi01_callback_sendend@1 = 4
00000029                      759  	;***      346 : {
00000029                      760  	;***      347 :     /* Start user code. Do not edit comment generated here */
00000029                      761  	;***      348 : 
00000029                      762  	;***      349 :     /* End user code. Do not edit comment generated here */
00000029                      763  	;***      350 : }
00000029                      764  	;***      351 : 
00000029                      765  	;***      352 : /***********************************************************************************************************************
00000029                      766  	;***      353 : * Function Name: r_csi01_callback_sendend
00000029                      767  	;***      354 : * Description  : This function is a callback function when CSI01 finishes transmission.
00000029                      768  	;***      355 : * Arguments    : None
00000029                      769  	;***      356 : * Return Value : None
00000029                      770  	;***      357 : ***********************************************************************************************************************/
00000029                      771  	;***      358 : static void r_csi01_callback_sendend(void)
00000029                      772  	;***      359 : {
00000029                      773  	;***      360 :     /* Start user code. Do not edit comment generated here */
00000029                      774  	;***      361 : 	g_csi_send_end++;
00000029                      775  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 361
00000029 A00000               776  	inc !LOWW(_g_csi_send_end)
0000002C D7                   777  	ret
0000015E                      778  	.SECTION .text,TEXT
0000015E                      779  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      780  _r_uart2_interrupt_receive@1:
0000015E                      781  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      782  	;***      362 :     /* End user code. Do not edit comment generated here */
0000015E                      783  	;***      363 : }
0000015E                      784  	;***      364 : 
0000015E                      785  	;***      365 : /***********************************************************************************************************************
0000015E                      786  	;***      366 : * Function Name: r_uart2_interrupt_receive
0000015E                      787  	;***      367 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      788  	;***      368 : * Arguments    : None
0000015E                      789  	;***      369 : * Return Value : None
0000015E                      790  	;***      370 : ***********************************************************************************************************************/
0000015E                      791  	;***      371 : static void __near r_uart2_interrupt_receive(void)
0000015E                      792  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 371
0000015E C1                   793  	push ax
0000015F C3                   794  	push bc
00000160 C5                   795  	push de
00000161 C7                   796  	push hl
00000162 8EFD                 797  	mov a, es
00000164 70                   798  	mov x, a
00000165 8EFC                 799  	mov a, cs
00000167 C1                   800  	push ax
00000168 C7                   801  	push hl
00000169                      802  	;***      372 : {
00000169                      803  	;***      373 :     volatile uint8_t rx_data;
00000169                      804  	;***      374 :     volatile uint8_t err_type;
00000169                      805  	;***      375 :     
00000169                      806  	;***      376 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      807  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 376
00000169 AF4201               808  	movw ax, !0x0142
0000016C 60                   809  	mov a, x
0000016D 5C07                 810  	and a, #0x07
0000016F 9800                 811  	mov [sp+0x00], a
00000171                      812  	;***      377 :     SIR11 = (uint16_t)err_type;
00000171                      813  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 377
00000171 8800                 814  	mov a, [sp+0x00]
00000173 318E                 815  	shrw ax, 8+0x00000
00000175 BF4A01               816  	movw !0x014A, ax
00000178                      817  	;***      378 : 
00000178                      818  	;***      379 :     if (err_type != 0U)
00000178                      819  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 379
00000178 8800                 820  	mov a, [sp+0x00]
0000017A D1                   821  	cmp0 a
0000017B DD00                 822  	bz $.BB@LABEL@14_2
0000017D                      823  .BB@LABEL@14_1:	; if_then_bb
0000017D                      824  	;***      380 :     {
0000017D                      825  	;***      381 :         r_uart2_callback_error(err_type);
0000017D                      826  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 381
0000017D 8800                 827  	mov a, [sp+0x00]
0000017F FC000000             828  	call !!_r_uart2_callback_error@1
00000183                      829  .BB@LABEL@14_2:	; if_break_bb
00000183                      830  	;***      382 :     }
00000183                      831  	;***      383 :     
00000183                      832  	;***      384 :     rx_data = RXD2;
00000183                      833  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 384
00000183 8E4A                 834  	mov a, 0xFFF4A
00000185 9801                 835  	mov [sp+0x01], a
00000187                      836  	;***      385 : 
00000187                      837  	;***      386 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      838  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 386
00000187 AF0000               839  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               840  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 841  	mov a, [sp+0x01]
0000018F 61D300               842  	bnh $.BB@LABEL@14_6
00000192                      843  .BB@LABEL@14_3:	; if_then_bb18
00000192                      844  	;***      387 :     {
00000192                      845  	;***      388 :         *gp_uart2_rx_address = rx_data;
00000192                      846  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 388
00000192 EB0000               847  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   848  	mov [de], a
00000196                      849  	;***      389 :         gp_uart2_rx_address++;
00000196                      850  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 389
00000196 A20000               851  	incw !LOWW(_gp_uart2_rx_address)
00000199                      852  	;***      390 :         g_uart2_rx_count++;
00000199                      853  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 390
00000199 A20000               854  	incw !LOWW(_g_uart2_rx_count)
0000019C                      855  	;***      391 : 
0000019C                      856  	;***      392 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      857  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 392
0000019C AF0000               858  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               859  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 860  	sknz
000001A4                      861  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      862  	;***      393 :         {
000001A4                      863  	;***      394 :             r_uart2_callback_receiveend();
000001A4                      864  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 394
000001A4 FC000000             865  	call !!_r_uart2_callback_receiveend@1
000001A8                      866  .BB@LABEL@14_5:	; return
000001A8 C6                   867  	pop hl
000001A9 C0                   868  	pop ax
000001AA 9EFC                 869  	mov cs, a
000001AC 60                   870  	mov a, x
000001AD 9EFD                 871  	mov es, a
000001AF C6                   872  	pop hl
000001B0 C4                   873  	pop de
000001B1 C2                   874  	pop bc
000001B2 C0                   875  	pop ax
000001B3                      876  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 401
000001B3 61FC                 877  	reti
000001B5                      878  .BB@LABEL@14_6:	; if_else_bb
000001B5                      879  	;***      395 :         }
000001B5                      880  	;***      396 :     }
000001B5                      881  	;***      397 :     else
000001B5                      882  	;***      398 :     {
000001B5                      883  	;***      399 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      884  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 399
000001B5 318E                 885  	shrw ax, 8+0x00000
000001B7 FC000000             886  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 887  	br $.BB@LABEL@14_5
000001BD                      888  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      889  _r_uart2_interrupt_send@1:
000001BD                      890  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      891  	;***      400 :     }
000001BD                      892  	;***      401 : }
000001BD                      893  	;***      402 : 
000001BD                      894  	;***      403 : /***********************************************************************************************************************
000001BD                      895  	;***      404 : * Function Name: r_uart2_interrupt_send
000001BD                      896  	;***      405 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      897  	;***      406 : * Arguments    : None
000001BD                      898  	;***      407 : * Return Value : None
000001BD                      899  	;***      408 : ***********************************************************************************************************************/
000001BD                      900  	;***      409 : static void __near r_uart2_interrupt_send(void)
000001BD                      901  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 409
000001BD C1                   902  	push ax
000001BE C3                   903  	push bc
000001BF C5                   904  	push de
000001C0 C7                   905  	push hl
000001C1 8EFD                 906  	mov a, es
000001C3 70                   907  	mov x, a
000001C4 8EFC                 908  	mov a, cs
000001C6 C1                   909  	push ax
000001C7                      910  	;***      410 : {
000001C7                      911  	;***      411 :     if (g_uart2_tx_count > 0U)
000001C7                      912  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 411
000001C7 AF0000               913  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   914  	clrw bc
000001CB 43                   915  	cmpw ax, bc
000001CC DF00                 916  	bnz $.BB@LABEL@15_3
000001CE                      917  .BB@LABEL@15_1:	; if_else_bb
000001CE                      918  	;***      412 :     {
000001CE                      919  	;***      413 :         TXD2 = *gp_uart2_tx_address;
000001CE                      920  	;***      414 :         gp_uart2_tx_address++;
000001CE                      921  	;***      415 :         g_uart2_tx_count--;
000001CE                      922  	;***      416 :     }
000001CE                      923  	;***      417 :     else
000001CE                      924  	;***      418 :     {
000001CE                      925  	;***      419 :         r_uart2_callback_sendend();
000001CE                      926  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 419
000001CE FC000000             927  	call !!_r_uart2_callback_sendend@1
000001D2                      928  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   929  	pop ax
000001D3 9EFC                 930  	mov cs, a
000001D5 60                   931  	mov a, x
000001D6 9EFD                 932  	mov es, a
000001D8 C6                   933  	pop hl
000001D9 C4                   934  	pop de
000001DA C2                   935  	pop bc
000001DB C0                   936  	pop ax
000001DC                      937  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
000001DC 61FC                 938  	reti
000001DE                      939  .BB@LABEL@15_3:	; if_then_bb
000001DE                      940  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 413
000001DE EB0000               941  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   942  	mov a, [de]
000001E2 9E48                 943  	mov 0xFFF48, a
000001E4                      944  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 414
000001E4 A5                   945  	incw de
000001E5 15                   946  	movw ax, de
000001E6 BF0000               947  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      948  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 415
000001E9 B20000               949  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 950  	br $.BB@LABEL@15_2
0000002D                      951  	.SECTION .textf,TEXTF
0000002D                      952  _r_uart2_callback_receiveend@1:
0000002D                      953  	.STACK _r_uart2_callback_receiveend@1 = 4
0000002D                      954  	;***      420 :     }
0000002D                      955  	;***      421 : }
0000002D                      956  	;***      422 : 
0000002D                      957  	;***      423 : /***********************************************************************************************************************
0000002D                      958  	;***      424 : * Function Name: r_uart2_callback_receiveend
0000002D                      959  	;***      425 : * Description  : This function is a callback function when UART2 finishes reception.
0000002D                      960  	;***      426 : * Arguments    : None
0000002D                      961  	;***      427 : * Return Value : None
0000002D                      962  	;***      428 : ***********************************************************************************************************************/
0000002D                      963  	;***      429 : static void r_uart2_callback_receiveend(void)
0000002D                      964  	;***      430 : {
0000002D                      965  	;***      431 :     /* Start user code. Do not edit comment generated here */
0000002D                      966  	;***      432 : //	R_UART2_Receive(g_rx_data, 32);
0000002D                      967  	;***      433 : //	R_UART2_Stop();
0000002D                      968  	;***      434 : //	R_UART2_Start();
0000002D                      969  	;***      435 : 
0000002D                      970  	;***      436 : 	R_UART2_Receive(g_rx_data, 6);
0000002D                      971  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 436
0000002D 320600               972  	movw bc, #0x0006
00000030 300000               973  	movw ax, #LOWW(_g_rx_data)
00000033 FC000000             974  	call !!_R_UART2_Receive
00000037                      975  	;***      437 : 	isCommand(g_rx_data);
00000037                      976  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 437
00000037 300000               977  	movw ax, #LOWW(_g_rx_data)
0000003A FE0000               978  	call $!_isCommand
0000003D                      979  	;***      438 : 	recived_time_setting_flag = recived_time_setting_flag == 1 ? 2: recived_time_setting_flag;
0000003D                      980  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 438
0000003D 40000001             981  	cmp !LOWW(_recived_time_setting_flag), #0x01
00000041 5102                 982  	mov a, #0x02
00000043 61E8                 983  	skz
00000045                      984  .BB@LABEL@16_1:	; bb6
00000045 8F0000               985  	mov a, !LOWW(_recived_time_setting_flag)
00000048                      986  .BB@LABEL@16_2:	; bb9
00000048 9F0000               987  	mov !LOWW(_recived_time_setting_flag), a
0000004B                      988  	;***      439 : 	if(1){
0000004B                      989  	;***      440 : 		g_uart2_fault = 0;
0000004B                      990  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 440
0000004B F50000               991  	clrb !LOWW(_g_uart2_fault)
0000004E                      992  	;***      441 : 		if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
0000004E                      993  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
0000004E 8F0000               994  	mov a, !LOWW(_g_rx_data+0x00001)
00000051 73                   995  	mov b, a
00000052 4C02                 996  	cmp a, #0x02
00000054 8F0000               997  	mov a, !LOWW(_g_rx_data)
00000057 70                   998  	mov x, a
00000058 DF00                 999  	bnz $.BB@LABEL@16_5
0000005A                     1000  .BB@LABEL@16_3:	; bb9
0000005A 4C52                1001  	cmp a, #0x52
0000005C DF00                1002  	bnz $.BB@LABEL@16_5
0000005E                     1003  .BB@LABEL@16_4:	; if_then_bb24
0000005E                     1004  	;***      442 : 			send_response_time_flag = 1;
0000005E                     1005  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
0000005E E50000              1006  	oneb !LOWW(_send_response_time_flag)
00000061 EF00                1007  	br $.BB@LABEL@16_8
00000063                     1008  .BB@LABEL@16_5:	; if_else_bb
00000063 63                  1009  	mov a, b
00000064                     1010  	;***      443 : //			g_timerSetting.t51++;
00000064                     1011  	;***      444 : 		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == SAVE_TIME)){
00000064                     1012  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
00000064 4C14                1013  	cmp a, #0x14
00000066 DF00                1014  	bnz $.BB@LABEL@16_8
00000068                     1015  .BB@LABEL@16_6:	; if_else_bb
00000068 60                  1016  	mov a, x
00000069 4C53                1017  	cmp a, #0x53
0000006B DF00                1018  	bnz $.BB@LABEL@16_8
0000006D                     1019  .BB@LABEL@16_7:	; if_then_bb37
0000006D                     1020  	;***      445 : 			R_UART2_Receive(g_rx_data, 69);
0000006D                     1021  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
0000006D 324500              1022  	movw bc, #0x0045
00000070 300000              1023  	movw ax, #LOWW(_g_rx_data)
00000073 FC000000            1024  	call !!_R_UART2_Receive
00000077                     1025  	;***      446 : 			recived_time_setting_flag = 1;
00000077                     1026  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
00000077 E50000              1027  	oneb !LOWW(_recived_time_setting_flag)
0000007A                     1028  .BB@LABEL@16_8:	; if_break_bb42
0000007A                     1029  	;***      447 : 		}
0000007A                     1030  	;***      448 : //		if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_NUMBER)){
0000007A                     1031  	;***      449 : //			R_UART2_Receive(g_rx_data, sizeof(struct Number_Setting_s)-1);
0000007A                     1032  	;***      450 : //		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_TIME)){
0000007A                     1033  	;***      451 : //			R_UART2_Receive(g_rx_data, sizeof(struct Timer_Setting_s)-1);
0000007A                     1034  	;***      452 : //		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
0000007A                     1035  	;***      453 : //			g_timerSetting.crc = crc8_1((uint8_t *)&g_timerSetting, 68);
0000007A                     1036  	;***      454 : //			R_UART2_Send((uint8_t *)&g_timerSetting, 69);
0000007A                     1037  	;***      455 : //			g_timerSetting.t51++;
0000007A                     1038  	;***      456 : //		}
0000007A                     1039  	;***      457 : 	}else{
0000007A                     1040  	;***      458 : 		R_UART2_Receive(g_rx_data, 6);
0000007A                     1041  	;***      459 : 		g_uart2_fault = 1;
0000007A                     1042  	;***      460 : 	}
0000007A                     1043  	;***      461 : 	g_uart2_receive++;
0000007A                     1044  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 461
0000007A A00000              1045  	inc !LOWW(_g_uart2_receive)
0000007D D7                  1046  	ret
0000007E                     1047  _r_uart2_callback_softwareoverrun@1:
0000007E                     1048  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
0000007E                     1049  	;***      462 :     /* End user code. Do not edit comment generated here */
0000007E                     1050  	;***      463 : }
0000007E                     1051  	;***      464 : 
0000007E                     1052  	;***      465 : /***********************************************************************************************************************
0000007E                     1053  	;***      466 : * Function Name: r_uart2_callback_softwareoverrun
0000007E                     1054  	;***      467 : * Description  : This function is a callback function when UART2 receives an overflow data.
0000007E                     1055  	;***      468 : * Arguments    : rx_data -
0000007E                     1056  	;***      469 : *                    receive data
0000007E                     1057  	;***      470 : * Return Value : None
0000007E                     1058  	;***      471 : ***********************************************************************************************************************/
0000007E                     1059  	;***      472 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
0000007E                     1060  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 472
0000007E D7                  1061  	ret
0000007F                     1062  _r_uart2_callback_sendend@1:
0000007F                     1063  	.STACK _r_uart2_callback_sendend@1 = 4
0000007F                     1064  	;***      473 : {
0000007F                     1065  	;***      474 :     /* Start user code. Do not edit comment generated here */
0000007F                     1066  	;***      475 :     /* End user code. Do not edit comment generated here */
0000007F                     1067  	;***      476 : }
0000007F                     1068  	;***      477 : 
0000007F                     1069  	;***      478 : /***********************************************************************************************************************
0000007F                     1070  	;***      479 : * Function Name: r_uart2_callback_sendend
0000007F                     1071  	;***      480 : * Description  : This function is a callback function when UART2 finishes transmission.
0000007F                     1072  	;***      481 : * Arguments    : None
0000007F                     1073  	;***      482 : * Return Value : None
0000007F                     1074  	;***      483 : ***********************************************************************************************************************/
0000007F                     1075  	;***      484 : static void r_uart2_callback_sendend(void)
0000007F                     1076  	;***      485 : {
0000007F                     1077  	;***      486 :     /* Start user code. Do not edit comment generated here */
0000007F                     1078  	;***      487 : 	g_uart2_sendend++;
0000007F                     1079  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 487
0000007F A00000              1080  	inc !LOWW(_g_uart2_sendend)
00000082 D7                  1081  	ret
00000083                     1082  _r_uart2_callback_error@1:
00000083                     1083  	.STACK _r_uart2_callback_error@1 = 4
00000083                     1084  	;***      488 :     /* End user code. Do not edit comment generated here */
00000083                     1085  	;***      489 : }
00000083                     1086  	;***      490 : 
00000083                     1087  	;***      491 : /***********************************************************************************************************************
00000083                     1088  	;***      492 : * Function Name: r_uart2_callback_error
00000083                     1089  	;***      493 : * Description  : This function is a callback function when UART2 reception error occurs.
00000083                     1090  	;***      494 : * Arguments    : err_type -
00000083                     1091  	;***      495 : *                    error type value
00000083                     1092  	;***      496 : * Return Value : None
00000083                     1093  	;***      497 : ***********************************************************************************************************************/
00000083                     1094  	;***      498 : static void r_uart2_callback_error(uint8_t err_type)
00000083                     1095  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 498
00000083 D7                  1096  	ret
000001EE                     1097  	.SECTION .text,TEXT
000001EE                     1098  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1099  _r_uart3_interrupt_receive@1:
000001EE                     1100  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1101  	;***      499 : {
000001EE                     1102  	;***      500 :     /* Start user code. Do not edit comment generated here */
000001EE                     1103  	;***      501 :     /* End user code. Do not edit comment generated here */
000001EE                     1104  	;***      502 : }
000001EE                     1105  	;***      503 : 
000001EE                     1106  	;***      504 : /***********************************************************************************************************************
000001EE                     1107  	;***      505 : * Function Name: r_uart3_interrupt_receive
000001EE                     1108  	;***      506 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1109  	;***      507 : * Arguments    : None
000001EE                     1110  	;***      508 : * Return Value : None
000001EE                     1111  	;***      509 : ***********************************************************************************************************************/
000001EE                     1112  	;***      510 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1113  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 510
000001EE C1                  1114  	push ax
000001EF C3                  1115  	push bc
000001F0 C5                  1116  	push de
000001F1 C7                  1117  	push hl
000001F2 8EFD                1118  	mov a, es
000001F4 70                  1119  	mov x, a
000001F5 8EFC                1120  	mov a, cs
000001F7 C1                  1121  	push ax
000001F8 C7                  1122  	push hl
000001F9                     1123  	;***      511 : {
000001F9                     1124  	;***      512 :     volatile uint8_t rx_data;
000001F9                     1125  	;***      513 :     volatile uint8_t err_type;
000001F9                     1126  	;***      514 :     
000001F9                     1127  	;***      515 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1128  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 515
000001F9 AF4601              1129  	movw ax, !0x0146
000001FC 60                  1130  	mov a, x
000001FD 5C07                1131  	and a, #0x07
000001FF 9800                1132  	mov [sp+0x00], a
00000201                     1133  	;***      516 :     SIR13 = (uint16_t)err_type;
00000201                     1134  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 516
00000201 8800                1135  	mov a, [sp+0x00]
00000203 318E                1136  	shrw ax, 8+0x00000
00000205 BF4E01              1137  	movw !0x014E, ax
00000208                     1138  	;***      517 : 
00000208                     1139  	;***      518 :     if (err_type != 0U)
00000208                     1140  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 518
00000208 8800                1141  	mov a, [sp+0x00]
0000020A D1                  1142  	cmp0 a
0000020B DD00                1143  	bz $.BB@LABEL@20_2
0000020D                     1144  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1145  	;***      519 :     {
0000020D                     1146  	;***      520 :         r_uart3_callback_error(err_type);
0000020D                     1147  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 520
0000020D 8800                1148  	mov a, [sp+0x00]
0000020F FC000000            1149  	call !!_r_uart3_callback_error@1
00000213                     1150  .BB@LABEL@20_2:	; if_break_bb
00000213                     1151  	;***      521 :     }
00000213                     1152  	;***      522 :     
00000213                     1153  	;***      523 :     rx_data = RXD3;
00000213                     1154  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 523
00000213 8D16                1155  	mov a, 0xFFF16
00000215 9801                1156  	mov [sp+0x01], a
00000217                     1157  	;***      524 : 
00000217                     1158  	;***      525 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1159  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 525
00000217 AF0000              1160  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1161  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1162  	mov a, [sp+0x01]
0000021F 61D300              1163  	bnh $.BB@LABEL@20_6
00000222                     1164  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1165  	;***      526 :     {
00000222                     1166  	;***      527 :         *gp_uart3_rx_address = rx_data;
00000222                     1167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 527
00000222 EB0000              1168  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1169  	mov [de], a
00000226                     1170  	;***      528 :         gp_uart3_rx_address++;
00000226                     1171  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 528
00000226 A20000              1172  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1173  	;***      529 :         g_uart3_rx_count++;
00000229                     1174  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 529
00000229 A20000              1175  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1176  	;***      530 : 
0000022C                     1177  	;***      531 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1178  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 531
0000022C AF0000              1179  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1180  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1181  	sknz
00000234                     1182  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1183  	;***      532 :         {
00000234                     1184  	;***      533 :             r_uart3_callback_receiveend();
00000234                     1185  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 533
00000234 FC000000            1186  	call !!_r_uart3_callback_receiveend@1
00000238                     1187  .BB@LABEL@20_5:	; return
00000238 C6                  1188  	pop hl
00000239 C0                  1189  	pop ax
0000023A 9EFC                1190  	mov cs, a
0000023C 60                  1191  	mov a, x
0000023D 9EFD                1192  	mov es, a
0000023F C6                  1193  	pop hl
00000240 C4                  1194  	pop de
00000241 C2                  1195  	pop bc
00000242 C0                  1196  	pop ax
00000243                     1197  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 540
00000243 61FC                1198  	reti
00000245                     1199  .BB@LABEL@20_6:	; if_else_bb
00000245                     1200  	;***      534 :         }
00000245                     1201  	;***      535 :     }
00000245                     1202  	;***      536 :     else
00000245                     1203  	;***      537 :     {
00000245                     1204  	;***      538 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1205  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 538
00000245 318E                1206  	shrw ax, 8+0x00000
00000247 FC000000            1207  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1208  	br $.BB@LABEL@20_5
0000024D                     1209  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1210  _r_uart3_interrupt_send@1:
0000024D                     1211  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1212  	;***      539 :     }
0000024D                     1213  	;***      540 : }
0000024D                     1214  	;***      541 : 
0000024D                     1215  	;***      542 : /***********************************************************************************************************************
0000024D                     1216  	;***      543 : * Function Name: r_uart3_interrupt_send
0000024D                     1217  	;***      544 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1218  	;***      545 : * Arguments    : None
0000024D                     1219  	;***      546 : * Return Value : None
0000024D                     1220  	;***      547 : ***********************************************************************************************************************/
0000024D                     1221  	;***      548 : static void __near r_uart3_interrupt_send(void)
0000024D                     1222  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 548
0000024D C1                  1223  	push ax
0000024E C3                  1224  	push bc
0000024F C5                  1225  	push de
00000250 C7                  1226  	push hl
00000251 8EFD                1227  	mov a, es
00000253 70                  1228  	mov x, a
00000254 8EFC                1229  	mov a, cs
00000256 C1                  1230  	push ax
00000257                     1231  	;***      549 : {
00000257                     1232  	;***      550 :     if (g_uart3_tx_count > 0U)
00000257                     1233  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 550
00000257 AF0000              1234  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1235  	clrw bc
0000025B 43                  1236  	cmpw ax, bc
0000025C DF00                1237  	bnz $.BB@LABEL@21_3
0000025E                     1238  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1239  	;***      551 :     {
0000025E                     1240  	;***      552 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1241  	;***      553 :         gp_uart3_tx_address++;
0000025E                     1242  	;***      554 :         g_uart3_tx_count--;
0000025E                     1243  	;***      555 :     }
0000025E                     1244  	;***      556 :     else
0000025E                     1245  	;***      557 :     {
0000025E                     1246  	;***      558 :         r_uart3_callback_sendend();
0000025E                     1247  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 558
0000025E FC000000            1248  	call !!_r_uart3_callback_sendend@1
00000262                     1249  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1250  	pop ax
00000263 9EFC                1251  	mov cs, a
00000265 60                  1252  	mov a, x
00000266 9EFD                1253  	mov es, a
00000268 C6                  1254  	pop hl
00000269 C4                  1255  	pop de
0000026A C2                  1256  	pop bc
0000026B C0                  1257  	pop ax
0000026C                     1258  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 560
0000026C 61FC                1259  	reti
0000026E                     1260  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1261  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 552
0000026E EB0000              1262  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1263  	mov a, [de]
00000272 9D14                1264  	mov 0xFFF14, a
00000274                     1265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 553
00000274 A5                  1266  	incw de
00000275 15                  1267  	movw ax, de
00000276 BF0000              1268  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 554
00000279 B20000              1270  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1271  	br $.BB@LABEL@21_2
00000084                     1272  	.SECTION .textf,TEXTF
00000084                     1273  _r_uart3_callback_receiveend@1:
00000084                     1274  	.STACK _r_uart3_callback_receiveend@1 = 4
00000084                     1275  	;***      559 :     }
00000084                     1276  	;***      560 : }
00000084                     1277  	;***      561 : 
00000084                     1278  	;***      562 : /***********************************************************************************************************************
00000084                     1279  	;***      563 : * Function Name: r_uart3_callback_receiveend
00000084                     1280  	;***      564 : * Description  : This function is a callback function when UART3 finishes reception.
00000084                     1281  	;***      565 : * Arguments    : None
00000084                     1282  	;***      566 : * Return Value : None
00000084                     1283  	;***      567 : ***********************************************************************************************************************/
00000084                     1284  	;***      568 : static void r_uart3_callback_receiveend(void)
00000084                     1285  	;***      569 : {
00000084                     1286  	;***      570 :     /* Start user code. Do not edit comment generated here */
00000084                     1287  	;***      571 : 	R_UART3_Receive(rec_buf, 7);
00000084                     1288  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 571
00000084 320700              1289  	movw bc, #0x0007
00000087 300000              1290  	movw ax, #LOWW(_rec_buf)
0000008A EC000000            1291  	br !!_R_UART3_Receive
0000008E                     1292  _r_uart3_callback_softwareoverrun@1:
0000008E                     1293  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
0000008E                     1294  	;***      572 :     /* End user code. Do not edit comment generated here */
0000008E                     1295  	;***      573 : }
0000008E                     1296  	;***      574 : 
0000008E                     1297  	;***      575 : /***********************************************************************************************************************
0000008E                     1298  	;***      576 : * Function Name: r_uart3_callback_softwareoverrun
0000008E                     1299  	;***      577 : * Description  : This function is a callback function when UART3 receives an overflow data.
0000008E                     1300  	;***      578 : * Arguments    : rx_data -
0000008E                     1301  	;***      579 : *                    receive data
0000008E                     1302  	;***      580 : * Return Value : None
0000008E                     1303  	;***      581 : ***********************************************************************************************************************/
0000008E                     1304  	;***      582 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
0000008E                     1305  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 582
0000008E D7                  1306  	ret
0000008F                     1307  _r_uart3_callback_sendend@1:
0000008F                     1308  	.STACK _r_uart3_callback_sendend@1 = 4
0000008F                     1309  	;***      583 : {
0000008F                     1310  	;***      584 :     /* Start user code. Do not edit comment generated here */
0000008F                     1311  	;***      585 :     /* End user code. Do not edit comment generated here */
0000008F                     1312  	;***      586 : }
0000008F                     1313  	;***      587 : 
0000008F                     1314  	;***      588 : /***********************************************************************************************************************
0000008F                     1315  	;***      589 : * Function Name: r_uart3_callback_sendend
0000008F                     1316  	;***      590 : * Description  : This function is a callback function when UART3 finishes transmission.
0000008F                     1317  	;***      591 : * Arguments    : None
0000008F                     1318  	;***      592 : * Return Value : None
0000008F                     1319  	;***      593 : ***********************************************************************************************************************/
0000008F                     1320  	;***      594 : static void r_uart3_callback_sendend(void)
0000008F                     1321  	;***      595 : {
0000008F                     1322  	;***      596 :     /* Start user code. Do not edit comment generated here */
0000008F                     1323  	;***      597 : 	g_uart3_sendend++;
0000008F                     1324  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 597
0000008F A00000              1325  	inc !LOWW(_g_uart3_sendend)
00000092 D7                  1326  	ret
00000093                     1327  _r_uart3_callback_error@1:
00000093                     1328  	.STACK _r_uart3_callback_error@1 = 4
00000093                     1329  	;***      598 :     /* End user code. Do not edit comment generated here */
00000093                     1330  	;***      599 : }
00000093                     1331  	;***      600 : 
00000093                     1332  	;***      601 : /***********************************************************************************************************************
00000093                     1333  	;***      602 : * Function Name: r_uart3_callback_error
00000093                     1334  	;***      603 : * Description  : This function is a callback function when UART3 reception error occurs.
00000093                     1335  	;***      604 : * Arguments    : err_type -
00000093                     1336  	;***      605 : *                    error type value
00000093                     1337  	;***      606 : * Return Value : None
00000093                     1338  	;***      607 : ***********************************************************************************************************************/
00000093                     1339  	;***      608 : static void r_uart3_callback_error(uint8_t err_type)
00000093                     1340  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 608
00000093 D7                  1341  	ret
00000094                     1342  	;***      609 : {
00000094                     1343  	;***      610 :     /* Start user code. Do not edit comment generated here */
00000094                     1344  	;***      611 :     /* End user code. Do not edit comment generated here */
00000094                     1345  	;***      612 : }
00000094                     1346  	;***      613 : 
00000094                     1347  	;***      614 : /* Start user code for adding. Do not edit comment generated here */
00000094                     1348  	;***      615 : /* End user code. Do not edit comment generated here */
00000000                     1349  	.SECTION .bss,BSS
00000000                     1350  _send_response_flag:
00000000                     1351  	.DS (1)
00000001                     1352  _send_response_time_flag:
00000001                     1353  	.DS (1)
00000002                     1354  _send_response_number_flag:
00000002                     1355  	.DS (1)
00000003                     1356  _recived_time_setting_flag:
00000003                     1357  	.DS (1)
00000004                     1358  _g_csi_count:
00000004                     1359  	.DS (1)
00000005                     1360  _g_csi_err:
00000005                     1361  	.DS (1)
00000006                     1362  _g_csi_send_end:
00000006                     1363  	.DS (1)
00000007                     1364  _g_csi_rev_end:
00000007                     1365  	.DS (1)
00000008                     1366  _g_uart1_send:
00000008                     1367  	.DS (1)
00000009                     1368  _g_uart2_sendend:
00000009                     1369  	.DS (1)
0000000A                     1370  _g_uart2_receive:
0000000A                     1371  	.DS (1)
0000000B                     1372  _g_rx_data:
0000000B                     1373  	.DS (72)
00000053                     1374  _g_uart2_fault:
00000053                     1375  	.DS (1)
00000054                     1376  _g_uart3_sendend:
00000054                     1377  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               148 (00000094) .textf
BSS                  85 (00000055) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl002\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

