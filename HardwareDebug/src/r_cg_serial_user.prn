RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Mon Dec 20 17:26:55 2021
00000000                       19  
00000000                       20  	.EXTERN _rec_buf
00000000                       21  	.EXTERN _gp_uart1_tx_address
00000000                       22  	.EXTERN _g_uart1_tx_count
00000000                       23  	.EXTERN _gp_uart1_rx_address
00000000                       24  	.EXTERN _g_uart1_rx_count
00000000                       25  	.EXTERN _g_uart1_rx_length
00000000                       26  	.EXTERN _gp_csi00_tx_address
00000000                       27  	.EXTERN _g_csi00_tx_count
00000000                       28  	.EXTERN _gp_csi01_rx_address
00000000                       29  	.EXTERN _gp_csi01_tx_address
00000000                       30  	.EXTERN _g_csi01_tx_count
00000000                       31  	.EXTERN _gp_uart2_tx_address
00000000                       32  	.EXTERN _g_uart2_tx_count
00000000                       33  	.EXTERN _gp_uart2_rx_address
00000000                       34  	.EXTERN _g_uart2_rx_count
00000000                       35  	.EXTERN _g_uart2_rx_length
00000000                       36  	.EXTERN _gp_uart3_tx_address
00000000                       37  	.EXTERN _g_uart3_tx_count
00000000                       38  	.EXTERN _gp_uart3_rx_address
00000000                       39  	.EXTERN _g_uart3_rx_count
00000000                       40  	.EXTERN _g_uart3_rx_length
00000000                       41  	.PUBLIC _send_response_flag
00000000                       42  	.PUBLIC _send_response_time_flag
00000000                       43  	.PUBLIC _send_response_number_flag
00000000                       44  	.PUBLIC _recived_time_setting_flag
00000000                       45  	.PUBLIC _send_respone_status_flag
00000000                       46  	.PUBLIC _recived_number_setting_flag
00000000                       47  	.PUBLIC _commnunication_flag
00000000                       48  	.PUBLIC _g_csi_count
00000000                       49  	.PUBLIC _g_csi_err
00000000                       50  	.PUBLIC _g_csi_send_end
00000000                       51  	.PUBLIC _g_csi_rev_end
00000000                       52  	.PUBLIC _g_uart1_send
00000000                       53  	.PUBLIC _g_uart2_sendend
00000000                       54  	.PUBLIC _g_uart2_receive
00000000                       55  	.PUBLIC _g_rx_data
00000000                       56  	.PUBLIC _g_uart2_fault
00000000                       57  	.PUBLIC _g_uart3_sendend
00000000                       58  	.PUBLIC _isCommand
00000000                       59  	.EXTERN _R_CSI01_Stop
00000000                       60  	.EXTERN _R_UART2_Receive
00000000                       61  	.EXTERN _R_UART3_Receive
00000000                       62  	.EXTERN _R_UART3_Send
00000000                       63  
00000000                       64  	.SECTION .textf,TEXTF
00000000                       65  _isCommand:
00000000                       66  	.STACK _isCommand = 4
00000000                       67  	;***        1 : /***********************************************************************************************************************
00000000                       68  	;***        2 : * DISCLAIMER
00000000                       69  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       70  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       71  	;***        5 : * applicable laws, including copyright laws. 
00000000                       72  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       73  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       74  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       75  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       76  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       77  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       78  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       79  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       80  	;***       14 : * following link:
00000000                       81  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       82  	;***       16 : *
00000000                       83  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       84  	;***       18 : ***********************************************************************************************************************/
00000000                       85  	;***       19 : 
00000000                       86  	;***       20 : /***********************************************************************************************************************
00000000                       87  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       88  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       89  	;***       23 : * Device(s)    : R5F104ML
00000000                       90  	;***       24 : * Tool-Chain   : CCRL
00000000                       91  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       92  	;***       26 : * Creation Date: 30/11/2021
00000000                       93  	;***       27 : ***********************************************************************************************************************/
00000000                       94  	;***       28 : 
00000000                       95  	;***       29 : /***********************************************************************************************************************
00000000                       96  	;***       30 : Includes
00000000                       97  	;***       31 : ***********************************************************************************************************************/
00000000                       98  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       99  	;***       33 : #include "r_cg_serial.h"
00000000                      100  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                      101  	;***       35 : /* End user code. Do not edit comment generated here */
00000000                      102  	;***       36 : #include "r_cg_userdefine.h"
00000000                      103  	;***       37 : 
00000000                      104  	;***       38 : /***********************************************************************************************************************
00000000                      105  	;***       39 : Pragma directive
00000000                      106  	;***       40 : ***********************************************************************************************************************/
00000000                      107  	;***       41 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      108  	;***       42 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      109  	;***       43 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      110  	;***       44 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      111  	;***       45 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      112  	;***       46 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      113  	;***       47 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      114  	;***       48 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      115  	;***       49 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      116  	;***       50 : /* End user code. Do not edit comment generated here */
00000000                      117  	;***       51 : 
00000000                      118  	;***       52 : /***********************************************************************************************************************
00000000                      119  	;***       53 : Global variables and functions
00000000                      120  	;***       54 : ***********************************************************************************************************************/
00000000                      121  	;***       55 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      122  	;***       56 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      123  	;***       57 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      124  	;***       58 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      125  	;***       59 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      126  	;***       60 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      127  	;***       61 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      128  	;***       62 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      129  	;***       63 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      130  	;***       64 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      131  	;***       65 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      132  	;***       66 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      133  	;***       67 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      134  	;***       68 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      135  	;***       69 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      136  	;***       70 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      137  	;***       71 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      138  	;***       72 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      139  	;***       73 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      140  	;***       74 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      141  	;***       75 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      142  	;***       76 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      143  	;***       77 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      144  	;***       78 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      145  	;***       79 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      146  	;***       80 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      147  	;***       81 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      148  	;***       82 : /* Start user code for global. Do not edit comment generated here */
00000000                      149  	;***       83 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag, recived_time_setting_flag
00000000                      150  	;***       84 : ,send_respone_status_flag, recived_number_setting_flag;
00000000                      151  	;***       85 : volatile struct Communicaition_flag_s commnunication_flag;
00000000                      152  	;***       86 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      153  	;***       87 : uint8_t g_rx_data[72];
00000000                      154  	;***       88 : volatile uint8_t g_uart2_fault;
00000000                      155  	;***       89 : volatile uint8_t g_uart3_sendend;
00000000                      156  	;***       90 : uint8_t isCommand(uint8_t *data){
00000000                      157  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 90
00000000 14                   158  	movw de, ax
00000001                      159  	;***       91 : 	if(data[1] == NEXT_ANIMATION)
00000001                      160  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 91
00000001 8A01                 161  	mov a, [de+0x01]
00000003 4C13                 162  	cmp a, #0x13
00000005 DD00                 163  	bz $.BB@LABEL@1_7
00000007                      164  .BB@LABEL@1_1:	; if_break_bb
00000007                      165  	;***       92 : 		return 0;
00000007                      166  	;***       93 : 	switch ((enum UART_header_e)*data) {
00000007                      167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 93
00000007 89                   168  	mov a, [de]
00000008 0CBF                 169  	add a, #0xBF
0000000A DD00                 170  	bz $.BB@LABEL@1_6
0000000C                      171  .BB@LABEL@1_2:	; if_break_bb
0000000C 0CFE                 172  	add a, #0xFE
0000000E DD00                 173  	bz $.BB@LABEL@1_6
00000010                      174  .BB@LABEL@1_3:	; if_break_bb
00000010 0CFE                 175  	add a, #0xFE
00000012 DD00                 176  	bz $.BB@LABEL@1_6
00000014                      177  .BB@LABEL@1_4:	; if_break_bb
00000014 0CF3                 178  	add a, #0xF3
00000016 DD00                 179  	bz $.BB@LABEL@1_6
00000018                      180  .BB@LABEL@1_5:	; if_break_bb
00000018 91                   181  	dec a
00000019 DF00                 182  	bnz $.BB@LABEL@1_7
0000001B                      183  .BB@LABEL@1_6:	; switch_clause_bb14
0000001B E50000               184  	oneb !LOWW(_commnunication_flag)
0000001E E1                   185  	oneb a
0000001F                      186  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 113
0000001F D7                   187  	ret
00000020                      188  .BB@LABEL@1_7:	; bb18
00000020                      189  	;***       94 : 		case H_ALARM:
00000020                      190  	;***       95 : 			commnunication_flag.send_response_flag = 1;
00000020                      191  	;***       96 : 			break;
00000020                      192  	;***       97 : 		case H_CLEAR:
00000020                      193  	;***       98 : 			commnunication_flag.send_response_flag = 1;
00000020                      194  	;***       99 : 			break;
00000020                      195  	;***      100 : 		case H_ERROR:
00000020                      196  	;***      101 : 			commnunication_flag.send_response_flag = 1;
00000020                      197  	;***      102 : 			break;
00000020                      198  	;***      103 : 		case H_READ:
00000020                      199  	;***      104 : 			commnunication_flag.send_response_flag = 1;
00000020                      200  	;***      105 : 			break;
00000020                      201  	;***      106 : 		case H_SET:
00000020                      202  	;***      107 : 			commnunication_flag.send_response_flag = 1;
00000020                      203  	;***      108 : 			break;
00000020                      204  	;***      109 : 		default:
00000020                      205  	;***      110 : 			return 0;
00000020                      206  	;***      111 : 	}
00000020                      207  	;***      112 : 	return 1;
00000020                      208  	;***      113 : }
00000020 F1                   209  	clrb a
00000021 D7                   210  	ret
00000000                      211  	.SECTION .text,TEXT
00000000                      212  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      213  _r_uart1_interrupt_receive@1:
00000000                      214  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      215  	;***      114 : /* End user code. Do not edit comment generated here */
00000000                      216  	;***      115 : 
00000000                      217  	;***      116 : /***********************************************************************************************************************
00000000                      218  	;***      117 : * Function Name: r_uart1_interrupt_receive
00000000                      219  	;***      118 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      220  	;***      119 : * Arguments    : None
00000000                      221  	;***      120 : * Return Value : None
00000000                      222  	;***      121 : ***********************************************************************************************************************/
00000000                      223  	;***      122 : static void __near r_uart1_interrupt_receive(void)
00000000                      224  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 122
00000000 C1                   225  	push ax
00000001 C3                   226  	push bc
00000002 C5                   227  	push de
00000003 C7                   228  	push hl
00000004 8EFD                 229  	mov a, es
00000006 70                   230  	mov x, a
00000007 8EFC                 231  	mov a, cs
00000009 C1                   232  	push ax
0000000A C7                   233  	push hl
0000000B                      234  	;***      123 : {
0000000B                      235  	;***      124 :     volatile uint8_t rx_data;
0000000B                      236  	;***      125 :     volatile uint8_t err_type;
0000000B                      237  	;***      126 :     
0000000B                      238  	;***      127 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      239  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 127
0000000B AF0601               240  	movw ax, !0x0106
0000000E 60                   241  	mov a, x
0000000F 5C07                 242  	and a, #0x07
00000011 9800                 243  	mov [sp+0x00], a
00000013                      244  	;***      128 :     SIR03 = (uint16_t)err_type;
00000013                      245  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 128
00000013 8800                 246  	mov a, [sp+0x00]
00000015 318E                 247  	shrw ax, 8+0x00000
00000017 BF0E01               248  	movw !0x010E, ax
0000001A                      249  	;***      129 : 
0000001A                      250  	;***      130 :     if (err_type != 0U)
0000001A                      251  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 130
0000001A 8800                 252  	mov a, [sp+0x00]
0000001C D1                   253  	cmp0 a
0000001D DD00                 254  	bz $.BB@LABEL@2_2
0000001F                      255  .BB@LABEL@2_1:	; if_then_bb
0000001F                      256  	;***      131 :     {
0000001F                      257  	;***      132 :         r_uart1_callback_error(err_type);
0000001F                      258  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 132
0000001F 8800                 259  	mov a, [sp+0x00]
00000021 FC000000             260  	call !!_r_uart1_callback_error@1
00000025                      261  .BB@LABEL@2_2:	; if_break_bb
00000025                      262  	;***      133 :     }
00000025                      263  	;***      134 :     
00000025                      264  	;***      135 :     rx_data = RXD1;
00000025                      265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
00000025 8E46                 266  	mov a, 0xFFF46
00000027 9801                 267  	mov [sp+0x01], a
00000029                      268  	;***      136 : 
00000029                      269  	;***      137 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      270  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 137
00000029 AF0000               271  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               272  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 273  	mov a, [sp+0x01]
00000031 61D300               274  	bnh $.BB@LABEL@2_6
00000034                      275  .BB@LABEL@2_3:	; if_then_bb18
00000034                      276  	;***      138 :     {
00000034                      277  	;***      139 :         *gp_uart1_rx_address = rx_data;
00000034                      278  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 139
00000034 EB0000               279  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   280  	mov [de], a
00000038                      281  	;***      140 :         gp_uart1_rx_address++;
00000038                      282  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 140
00000038 A20000               283  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      284  	;***      141 :         g_uart1_rx_count++;
0000003B                      285  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 141
0000003B A20000               286  	incw !LOWW(_g_uart1_rx_count)
0000003E                      287  	;***      142 : 
0000003E                      288  	;***      143 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      289  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
0000003E AF0000               290  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               291  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 292  	sknz
00000046                      293  .BB@LABEL@2_4:	; if_then_bb30
00000046                      294  	;***      144 :         {
00000046                      295  	;***      145 :             r_uart1_callback_receiveend();
00000046                      296  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 145
00000046 FC000000             297  	call !!_r_uart1_callback_receiveend@1
0000004A                      298  .BB@LABEL@2_5:	; return
0000004A C6                   299  	pop hl
0000004B C0                   300  	pop ax
0000004C 9EFC                 301  	mov cs, a
0000004E 60                   302  	mov a, x
0000004F 9EFD                 303  	mov es, a
00000051 C6                   304  	pop hl
00000052 C4                   305  	pop de
00000053 C2                   306  	pop bc
00000054 C0                   307  	pop ax
00000055                      308  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 152
00000055 61FC                 309  	reti
00000057                      310  .BB@LABEL@2_6:	; if_else_bb
00000057                      311  	;***      146 :         }
00000057                      312  	;***      147 :     }
00000057                      313  	;***      148 :     else
00000057                      314  	;***      149 :     {
00000057                      315  	;***      150 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      316  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 150
00000057 318E                 317  	shrw ax, 8+0x00000
00000059 FC000000             318  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 319  	br $.BB@LABEL@2_5
0000005F                      320  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      321  _r_uart1_interrupt_send@1:
0000005F                      322  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      323  	;***      151 :     }
0000005F                      324  	;***      152 : }
0000005F                      325  	;***      153 : 
0000005F                      326  	;***      154 : /***********************************************************************************************************************
0000005F                      327  	;***      155 : * Function Name: r_uart1_interrupt_send
0000005F                      328  	;***      156 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      329  	;***      157 : * Arguments    : None
0000005F                      330  	;***      158 : * Return Value : None
0000005F                      331  	;***      159 : ***********************************************************************************************************************/
0000005F                      332  	;***      160 : static void __near r_uart1_interrupt_send(void)
0000005F                      333  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 160
0000005F C1                   334  	push ax
00000060 C3                   335  	push bc
00000061 C5                   336  	push de
00000062 C7                   337  	push hl
00000063 8EFD                 338  	mov a, es
00000065 70                   339  	mov x, a
00000066 8EFC                 340  	mov a, cs
00000068 C1                   341  	push ax
00000069                      342  	;***      161 : {
00000069                      343  	;***      162 :     if (g_uart1_tx_count > 0U)
00000069                      344  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 162
00000069 AF0000               345  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   346  	clrw bc
0000006D 43                   347  	cmpw ax, bc
0000006E DF00                 348  	bnz $.BB@LABEL@3_3
00000070                      349  .BB@LABEL@3_1:	; if_else_bb
00000070                      350  	;***      163 :     {
00000070                      351  	;***      164 :         TXD1 = *gp_uart1_tx_address;
00000070                      352  	;***      165 :         gp_uart1_tx_address++;
00000070                      353  	;***      166 :         g_uart1_tx_count--;
00000070                      354  	;***      167 :     }
00000070                      355  	;***      168 :     else
00000070                      356  	;***      169 :     {
00000070                      357  	;***      170 :         r_uart1_callback_sendend();
00000070                      358  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 170
00000070 FC000000             359  	call !!_r_uart1_callback_sendend@1
00000074                      360  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   361  	pop ax
00000075 9EFC                 362  	mov cs, a
00000077 60                   363  	mov a, x
00000078 9EFD                 364  	mov es, a
0000007A C6                   365  	pop hl
0000007B C4                   366  	pop de
0000007C C2                   367  	pop bc
0000007D C0                   368  	pop ax
0000007E                      369  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 172
0000007E 61FC                 370  	reti
00000080                      371  .BB@LABEL@3_3:	; if_then_bb
00000080                      372  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 164
00000080 EB0000               373  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   374  	mov a, [de]
00000084 9E44                 375  	mov 0xFFF44, a
00000086                      376  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000086 A5                   377  	incw de
00000087 15                   378  	movw ax, de
00000088 BF0000               379  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      380  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 166
0000008B B20000               381  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 382  	br $.BB@LABEL@3_2
00000022                      383  	.SECTION .textf,TEXTF
00000022                      384  _r_uart1_callback_receiveend@1:
00000022                      385  	.STACK _r_uart1_callback_receiveend@1 = 4
00000022                      386  	;***      171 :     }
00000022                      387  	;***      172 : }
00000022                      388  	;***      173 : 
00000022                      389  	;***      174 : /***********************************************************************************************************************
00000022                      390  	;***      175 : * Function Name: r_uart1_callback_receiveend
00000022                      391  	;***      176 : * Description  : This function is a callback function when UART1 finishes reception.
00000022                      392  	;***      177 : * Arguments    : None
00000022                      393  	;***      178 : * Return Value : None
00000022                      394  	;***      179 : ***********************************************************************************************************************/
00000022                      395  	;***      180 : static void r_uart1_callback_receiveend(void)
00000022                      396  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 180
00000022 D7                   397  	ret
00000023                      398  _r_uart1_callback_softwareoverrun@1:
00000023                      399  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000023                      400  	;***      181 : {
00000023                      401  	;***      182 :     /* Start user code. Do not edit comment generated here */
00000023                      402  	;***      183 :     /* End user code. Do not edit comment generated here */
00000023                      403  	;***      184 : }
00000023                      404  	;***      185 : 
00000023                      405  	;***      186 : /***********************************************************************************************************************
00000023                      406  	;***      187 : * Function Name: r_uart1_callback_softwareoverrun
00000023                      407  	;***      188 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000023                      408  	;***      189 : * Arguments    : rx_data -
00000023                      409  	;***      190 : *                    receive data
00000023                      410  	;***      191 : * Return Value : None
00000023                      411  	;***      192 : ***********************************************************************************************************************/
00000023                      412  	;***      193 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000023                      413  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 193
00000023 D7                   414  	ret
00000024                      415  _r_uart1_callback_sendend@1:
00000024                      416  	.STACK _r_uart1_callback_sendend@1 = 4
00000024                      417  	;***      194 : {
00000024                      418  	;***      195 :     /* Start user code. Do not edit comment generated here */
00000024                      419  	;***      196 :     /* End user code. Do not edit comment generated here */
00000024                      420  	;***      197 : }
00000024                      421  	;***      198 : 
00000024                      422  	;***      199 : /***********************************************************************************************************************
00000024                      423  	;***      200 : * Function Name: r_uart1_callback_sendend
00000024                      424  	;***      201 : * Description  : This function is a callback function when UART1 finishes transmission.
00000024                      425  	;***      202 : * Arguments    : None
00000024                      426  	;***      203 : * Return Value : None
00000024                      427  	;***      204 : ***********************************************************************************************************************/
00000024                      428  	;***      205 : static void r_uart1_callback_sendend(void)
00000024                      429  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 205
00000024 D7                   430  	ret
00000025                      431  _r_uart1_callback_error@1:
00000025                      432  	.STACK _r_uart1_callback_error@1 = 4
00000025                      433  	;***      206 : {
00000025                      434  	;***      207 :     /* Start user code. Do not edit comment generated here */
00000025                      435  	;***      208 :     /* End user code. Do not edit comment generated here */
00000025                      436  	;***      209 : }
00000025                      437  	;***      210 : 
00000025                      438  	;***      211 : /***********************************************************************************************************************
00000025                      439  	;***      212 : * Function Name: r_uart1_callback_error
00000025                      440  	;***      213 : * Description  : This function is a callback function when UART1 reception error occurs.
00000025                      441  	;***      214 : * Arguments    : err_type -
00000025                      442  	;***      215 : *                    error type value
00000025                      443  	;***      216 : * Return Value : None
00000025                      444  	;***      217 : ***********************************************************************************************************************/
00000025                      445  	;***      218 : static void r_uart1_callback_error(uint8_t err_type)
00000025                      446  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 218
00000025 D7                   447  	ret
00000090                      448  	.SECTION .text,TEXT
00000090                      449  _r_csi00_interrupt@1	.vector 0x001E
00000090                      450  _r_csi00_interrupt@1:
00000090                      451  	.STACK _r_csi00_interrupt@1 = 16
00000090                      452  	;***      219 : {
00000090                      453  	;***      220 :     /* Start user code. Do not edit comment generated here */
00000090                      454  	;***      221 :     /* End user code. Do not edit comment generated here */
00000090                      455  	;***      222 : }
00000090                      456  	;***      223 : 
00000090                      457  	;***      224 : /***********************************************************************************************************************
00000090                      458  	;***      225 : * Function Name: r_csi00_interrupt
00000090                      459  	;***      226 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      460  	;***      227 : * Arguments    : None
00000090                      461  	;***      228 : * Return Value : None
00000090                      462  	;***      229 : ***********************************************************************************************************************/
00000090                      463  	;***      230 : static void __near r_csi00_interrupt(void)
00000090                      464  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 230
00000090 C1                   465  	push ax
00000091 C3                   466  	push bc
00000092 C5                   467  	push de
00000093 C7                   468  	push hl
00000094 8EFD                 469  	mov a, es
00000096 70                   470  	mov x, a
00000097 8EFC                 471  	mov a, cs
00000099 C1                   472  	push ax
0000009A C7                   473  	push hl
0000009B                      474  	;***      231 : {
0000009B                      475  	;***      232 :     volatile uint8_t err_type;
0000009B                      476  	;***      233 : 
0000009B                      477  	;***      234 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      478  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 234
0000009B AF0001               479  	movw ax, !0x0100
0000009E 60                   480  	mov a, x
0000009F 5C01                 481  	and a, #0x01
000000A1 9800                 482  	mov [sp+0x00], a
000000A3                      483  	;***      235 :     SIR00 = (uint16_t)err_type;
000000A3                      484  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 235
000000A3 8800                 485  	mov a, [sp+0x00]
000000A5 318E                 486  	shrw ax, 8+0x00000
000000A7 BF0801               487  	movw !0x0108, ax
000000AA                      488  	;***      236 : 
000000AA                      489  	;***      237 :     if (err_type != 1U)
000000AA                      490  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 237
000000AA 8800                 491  	mov a, [sp+0x00]
000000AC 91                   492  	dec a
000000AD DF00                 493  	bnz $.BB@LABEL@8_2
000000AF                      494  .BB@LABEL@8_1:	; return
000000AF C6                   495  	pop hl
000000B0 C0                   496  	pop ax
000000B1 9EFC                 497  	mov cs, a
000000B3 60                   498  	mov a, x
000000B4 9EFD                 499  	mov es, a
000000B6 C6                   500  	pop hl
000000B7 C4                   501  	pop de
000000B8 C2                   502  	pop bc
000000B9 C0                   503  	pop ax
000000BA                      504  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 250
000000BA 61FC                 505  	reti
000000BC                      506  .BB@LABEL@8_2:	; if_then_bb
000000BC                      507  	;***      238 :     {
000000BC                      508  	;***      239 :         if (g_csi00_tx_count > 0U)
000000BC                      509  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 239
000000BC AF0000               510  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   511  	clrw bc
000000C0 43                   512  	cmpw ax, bc
000000C1 DF00                 513  	bnz $.BB@LABEL@8_4
000000C3                      514  .BB@LABEL@8_3:	; if_else_bb
000000C3                      515  	;***      240 :         {
000000C3                      516  	;***      241 :             SIO00 = *gp_csi00_tx_address;
000000C3                      517  	;***      242 :             gp_csi00_tx_address++;
000000C3                      518  	;***      243 :             g_csi00_tx_count--;
000000C3                      519  	;***      244 :         }
000000C3                      520  	;***      245 :         else
000000C3                      521  	;***      246 :         {
000000C3                      522  	;***      247 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      523  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 247
000000C3 FC000000             524  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 525  	br $.BB@LABEL@8_1
000000C9                      526  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 241
000000C9 EB0000               528  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   529  	mov a, [de]
000000CD 9D10                 530  	mov 0xFFF10, a
000000CF                      531  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 242
000000CF A5                   532  	incw de
000000D0 15                   533  	movw ax, de
000000D1 BF0000               534  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      535  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 243
000000D4 B20000               536  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 537  	br $.BB@LABEL@8_1
00000026                      538  	.SECTION .textf,TEXTF
00000026                      539  _r_csi00_callback_sendend@1:
00000026                      540  	.STACK _r_csi00_callback_sendend@1 = 4
00000026                      541  	;***      248 :         }
00000026                      542  	;***      249 :     }
00000026                      543  	;***      250 : }
00000026                      544  	;***      251 : 
00000026                      545  	;***      252 : /***********************************************************************************************************************
00000026                      546  	;***      253 : * Function Name: r_csi00_callback_sendend
00000026                      547  	;***      254 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000026                      548  	;***      255 : * Arguments    : None
00000026                      549  	;***      256 : * Return Value : None
00000026                      550  	;***      257 : ***********************************************************************************************************************/
00000026                      551  	;***      258 : static void r_csi00_callback_sendend(void)
00000026                      552  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 258
00000026 D7                   553  	ret
000000D9                      554  	.SECTION .text,TEXT
000000D9                      555  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      556  _r_csi01_interrupt@1:
000000D9                      557  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      558  	;***      259 : {
000000D9                      559  	;***      260 :     /* Start user code. Do not edit comment generated here */
000000D9                      560  	;***      261 :     /* End user code. Do not edit comment generated here */
000000D9                      561  	;***      262 : }
000000D9                      562  	;***      263 : 
000000D9                      563  	;***      264 : /***********************************************************************************************************************
000000D9                      564  	;***      265 : * Function Name: r_csi01_interrupt
000000D9                      565  	;***      266 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      566  	;***      267 : * Arguments    : None
000000D9                      567  	;***      268 : * Return Value : None
000000D9                      568  	;***      269 : ***********************************************************************************************************************/
000000D9                      569  	;***      270 : static void __near r_csi01_interrupt(void)
000000D9                      570  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 270
000000D9 C1                   571  	push ax
000000DA C3                   572  	push bc
000000DB C5                   573  	push de
000000DC C7                   574  	push hl
000000DD 8EFD                 575  	mov a, es
000000DF 70                   576  	mov x, a
000000E0 8EFC                 577  	mov a, cs
000000E2 C1                   578  	push ax
000000E3 C7                   579  	push hl
000000E4                      580  	;***      271 : {
000000E4                      581  	;***      272 :     volatile uint8_t err_type;
000000E4                      582  	;***      273 :     volatile uint8_t sio_dummy;
000000E4                      583  	;***      274 : 
000000E4                      584  	;***      275 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      585  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 275
000000E4 AF0201               586  	movw ax, !0x0102
000000E7 60                   587  	mov a, x
000000E8 5C01                 588  	and a, #0x01
000000EA 9800                 589  	mov [sp+0x00], a
000000EC                      590  	;***      276 :     SIR01 = (uint16_t)err_type;
000000EC                      591  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 276
000000EC 8800                 592  	mov a, [sp+0x00]
000000EE 318E                 593  	shrw ax, 8+0x00000
000000F0 BF0A01               594  	movw !0x010A, ax
000000F3                      595  	;***      277 : 
000000F3                      596  	;***      278 :     if (1U == err_type)
000000F3                      597  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 278
000000F3 8800                 598  	mov a, [sp+0x00]
000000F5 91                   599  	dec a
000000F6 DF00                 600  	bnz $.BB@LABEL@10_2
000000F8                      601  .BB@LABEL@10_1:	; if_then_bb
000000F8                      602  	;***      279 :     {
000000F8                      603  	;***      280 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      604  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 280
000000F8 8800                 605  	mov a, [sp+0x00]
000000FA FC000000             606  	call !!_r_csi01_callback_error@1
000000FE EF00                 607  	br $.BB@LABEL@10_15
00000100                      608  .BB@LABEL@10_2:	; if_else_bb
00000100                      609  	;***      281 :     }
00000100                      610  	;***      282 :     else
00000100                      611  	;***      283 :     {
00000100                      612  	;***      284 :         if (g_csi01_tx_count > 0U)
00000100                      613  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 284
00000100 AF0000               614  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   615  	clrw bc
00000104 43                   616  	cmpw ax, bc
00000105 DF00                 617  	bnz $.BB@LABEL@10_8
00000107                      618  .BB@LABEL@10_3:	; if_else_bb42
00000107                      619  	;***      285 :         {
00000107                      620  	;***      286 :             if (0U != gp_csi01_rx_address)
00000107                      621  	;***      287 :             {
00000107                      622  	;***      288 :                 *gp_csi01_rx_address = SIO01;
00000107                      623  	;***      289 :                 gp_csi01_rx_address++;
00000107                      624  	;***      290 :             }
00000107                      625  	;***      291 :             else
00000107                      626  	;***      292 :             {
00000107                      627  	;***      293 :                 sio_dummy = SIO01;
00000107                      628  	;***      294 :             }
00000107                      629  	;***      295 : 
00000107                      630  	;***      296 :             if (0U != gp_csi01_tx_address)
00000107                      631  	;***      297 :             {
00000107                      632  	;***      298 :                 SIO01 = *gp_csi01_tx_address;
00000107                      633  	;***      299 :                 gp_csi01_tx_address++;
00000107                      634  	;***      300 :             }
00000107                      635  	;***      301 :             else
00000107                      636  	;***      302 :             {
00000107                      637  	;***      303 :                 SIO01 = 0xFFU;
00000107                      638  	;***      304 :             }
00000107                      639  	;***      305 : 
00000107                      640  	;***      306 :             g_csi01_tx_count--;
00000107                      641  	;***      307 :         }
00000107                      642  	;***      308 :         else 
00000107                      643  	;***      309 :         {
00000107                      644  	;***      310 :             if (0U == g_csi01_tx_count)
00000107                      645  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 310
00000107 AF0000               646  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   647  	cmpw ax, bc
0000010B DF00                 648  	bnz $.BB@LABEL@10_7
0000010D                      649  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      650  	;***      311 :             {
0000010D                      651  	;***      312 :                 if (0U != gp_csi01_rx_address)
0000010D                      652  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 312
0000010D AF0000               653  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   654  	cmpw ax, bc
00000111 DF00                 655  	bnz $.BB@LABEL@10_6
00000113                      656  .BB@LABEL@10_5:	; if_else_bb55
00000113                      657  	;***      313 :                 {
00000113                      658  	;***      314 :                     *gp_csi01_rx_address = SIO01;
00000113                      659  	;***      315 :                 }
00000113                      660  	;***      316 :                 else
00000113                      661  	;***      317 :                 {
00000113                      662  	;***      318 :                     sio_dummy = SIO01;
00000113                      663  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 318
00000113 8D12                 664  	mov a, 0xFFF12
00000115 9801                 665  	mov [sp+0x01], a
00000117 EF00                 666  	br $.BB@LABEL@10_7
00000119                      667  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   668  	movw de, ax
0000011A                      669  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 314
0000011A 8D12                 670  	mov a, 0xFFF12
0000011C 99                   671  	mov [de], a
0000011D                      672  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      673  	;***      319 :                 }
0000011D                      674  	;***      320 :             }
0000011D                      675  	;***      321 : 
0000011D                      676  	;***      322 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      677  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 322
0000011D FC000000             678  	call !!_r_csi01_callback_sendend@1
00000121                      679  	;***      323 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      680  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 323
00000121 FC000000             681  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 682  	br $.BB@LABEL@10_15
00000127                      683  .BB@LABEL@10_8:	; if_then_bb16
00000127                      684  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 286
00000127 AF0000               685  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   686  	cmpw ax, bc
0000012B DF00                 687  	bnz $.BB@LABEL@10_10
0000012D                      688  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      689  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 293
0000012D 8D12                 690  	mov a, 0xFFF12
0000012F 9801                 691  	mov [sp+0x01], a
00000131 EF00                 692  	br $.BB@LABEL@10_11
00000133                      693  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   694  	movw de, ax
00000134                      695  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 288
00000134 8D12                 696  	mov a, 0xFFF12
00000136 99                   697  	mov [de], a
00000137                      698  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 289
00000137 A20000               699  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      700  .BB@LABEL@10_11:	; if_break_bb
0000013A                      701  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 296
0000013A AF0000               702  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   703  	cmpw ax, bc
0000013E DF00                 704  	bnz $.BB@LABEL@10_13
00000140                      705  .BB@LABEL@10_12:	; if_else_bb38
00000140                      706  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 303
00000140 CD12FF               707  	mov 0xFFF12, #0xFF
00000143 EF00                 708  	br $.BB@LABEL@10_14
00000145                      709  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   710  	movw de, ax
00000146                      711  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 298
00000146 89                   712  	mov a, [de]
00000147 9D12                 713  	mov 0xFFF12, a
00000149                      714  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
00000149 A5                   715  	incw de
0000014A 15                   716  	movw ax, de
0000014B BF0000               717  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      718  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      719  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 306
0000014E B20000               720  	decw !LOWW(_g_csi01_tx_count)
00000151                      721  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   722  	pop hl
00000152 C0                   723  	pop ax
00000153 9EFC                 724  	mov cs, a
00000155 60                   725  	mov a, x
00000156 9EFD                 726  	mov es, a
00000158 C6                   727  	pop hl
00000159 C4                   728  	pop de
0000015A C2                   729  	pop bc
0000015B C0                   730  	pop ax
0000015C                      731  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 326
0000015C 61FC                 732  	reti
00000027                      733  	.SECTION .textf,TEXTF
00000027                      734  _r_csi01_callback_receiveend@1:
00000027                      735  	.STACK _r_csi01_callback_receiveend@1 = 4
00000027                      736  	;***      324 :         }
00000027                      737  	;***      325 :     }
00000027                      738  	;***      326 : }
00000027                      739  	;***      327 : 
00000027                      740  	;***      328 : /***********************************************************************************************************************
00000027                      741  	;***      329 : * Function Name: r_csi01_callback_receiveend
00000027                      742  	;***      330 : * Description  : This function is a callback function when CSI01 finishes reception.
00000027                      743  	;***      331 : * Arguments    : None
00000027                      744  	;***      332 : * Return Value : None
00000027                      745  	;***      333 : ***********************************************************************************************************************/
00000027                      746  	;***      334 : static void r_csi01_callback_receiveend(void)
00000027                      747  	;***      335 : {
00000027                      748  	;***      336 :     /* Start user code. Do not edit comment generated here */
00000027                      749  	;***      337 : 	g_csi_rev_end++;
00000027                      750  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 337
00000027 A00000               751  	inc !LOWW(_g_csi_rev_end)
0000002A                      752  	;***      338 : 	R_CSI01_Stop();
0000002A                      753  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 338
0000002A EC000000             754  	br !!_R_CSI01_Stop
0000002E                      755  _r_csi01_callback_error@1:
0000002E                      756  	.STACK _r_csi01_callback_error@1 = 4
0000002E                      757  	;***      339 :     /* End user code. Do not edit comment generated here */
0000002E                      758  	;***      340 : }
0000002E                      759  	;***      341 : 
0000002E                      760  	;***      342 : /***********************************************************************************************************************
0000002E                      761  	;***      343 : * Function Name: r_csi01_callback_error
0000002E                      762  	;***      344 : * Description  : This function is a callback function when CSI01 reception error occurs.
0000002E                      763  	;***      345 : * Arguments    : err_type -
0000002E                      764  	;***      346 : *                    error type value
0000002E                      765  	;***      347 : * Return Value : None
0000002E                      766  	;***      348 : ***********************************************************************************************************************/
0000002E                      767  	;***      349 : static void r_csi01_callback_error(uint8_t err_type)
0000002E                      768  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 349
0000002E D7                   769  	ret
0000002F                      770  _r_csi01_callback_sendend@1:
0000002F                      771  	.STACK _r_csi01_callback_sendend@1 = 4
0000002F                      772  	;***      350 : {
0000002F                      773  	;***      351 :     /* Start user code. Do not edit comment generated here */
0000002F                      774  	;***      352 : 
0000002F                      775  	;***      353 :     /* End user code. Do not edit comment generated here */
0000002F                      776  	;***      354 : }
0000002F                      777  	;***      355 : 
0000002F                      778  	;***      356 : /***********************************************************************************************************************
0000002F                      779  	;***      357 : * Function Name: r_csi01_callback_sendend
0000002F                      780  	;***      358 : * Description  : This function is a callback function when CSI01 finishes transmission.
0000002F                      781  	;***      359 : * Arguments    : None
0000002F                      782  	;***      360 : * Return Value : None
0000002F                      783  	;***      361 : ***********************************************************************************************************************/
0000002F                      784  	;***      362 : static void r_csi01_callback_sendend(void)
0000002F                      785  	;***      363 : {
0000002F                      786  	;***      364 :     /* Start user code. Do not edit comment generated here */
0000002F                      787  	;***      365 : 	g_csi_send_end++;
0000002F                      788  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 365
0000002F A00000               789  	inc !LOWW(_g_csi_send_end)
00000032 D7                   790  	ret
0000015E                      791  	.SECTION .text,TEXT
0000015E                      792  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      793  _r_uart2_interrupt_receive@1:
0000015E                      794  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      795  	;***      366 :     /* End user code. Do not edit comment generated here */
0000015E                      796  	;***      367 : }
0000015E                      797  	;***      368 : 
0000015E                      798  	;***      369 : /***********************************************************************************************************************
0000015E                      799  	;***      370 : * Function Name: r_uart2_interrupt_receive
0000015E                      800  	;***      371 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      801  	;***      372 : * Arguments    : None
0000015E                      802  	;***      373 : * Return Value : None
0000015E                      803  	;***      374 : ***********************************************************************************************************************/
0000015E                      804  	;***      375 : static void __near r_uart2_interrupt_receive(void)
0000015E                      805  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 375
0000015E C1                   806  	push ax
0000015F C3                   807  	push bc
00000160 C5                   808  	push de
00000161 C7                   809  	push hl
00000162 8EFD                 810  	mov a, es
00000164 70                   811  	mov x, a
00000165 8EFC                 812  	mov a, cs
00000167 C1                   813  	push ax
00000168 C7                   814  	push hl
00000169                      815  	;***      376 : {
00000169                      816  	;***      377 :     volatile uint8_t rx_data;
00000169                      817  	;***      378 :     volatile uint8_t err_type;
00000169                      818  	;***      379 :     
00000169                      819  	;***      380 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      820  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 380
00000169 AF4201               821  	movw ax, !0x0142
0000016C 60                   822  	mov a, x
0000016D 5C07                 823  	and a, #0x07
0000016F 9800                 824  	mov [sp+0x00], a
00000171                      825  	;***      381 :     SIR11 = (uint16_t)err_type;
00000171                      826  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 381
00000171 8800                 827  	mov a, [sp+0x00]
00000173 318E                 828  	shrw ax, 8+0x00000
00000175 BF4A01               829  	movw !0x014A, ax
00000178                      830  	;***      382 : 
00000178                      831  	;***      383 :     if (err_type != 0U)
00000178                      832  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 383
00000178 8800                 833  	mov a, [sp+0x00]
0000017A D1                   834  	cmp0 a
0000017B DD00                 835  	bz $.BB@LABEL@14_2
0000017D                      836  .BB@LABEL@14_1:	; if_then_bb
0000017D                      837  	;***      384 :     {
0000017D                      838  	;***      385 :         r_uart2_callback_error(err_type);
0000017D                      839  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 385
0000017D 8800                 840  	mov a, [sp+0x00]
0000017F FC000000             841  	call !!_r_uart2_callback_error@1
00000183                      842  .BB@LABEL@14_2:	; if_break_bb
00000183                      843  	;***      386 :     }
00000183                      844  	;***      387 :     
00000183                      845  	;***      388 :     rx_data = RXD2;
00000183                      846  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 388
00000183 8E4A                 847  	mov a, 0xFFF4A
00000185 9801                 848  	mov [sp+0x01], a
00000187                      849  	;***      389 : 
00000187                      850  	;***      390 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      851  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 390
00000187 AF0000               852  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               853  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 854  	mov a, [sp+0x01]
0000018F 61D300               855  	bnh $.BB@LABEL@14_6
00000192                      856  .BB@LABEL@14_3:	; if_then_bb18
00000192                      857  	;***      391 :     {
00000192                      858  	;***      392 :         *gp_uart2_rx_address = rx_data;
00000192                      859  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 392
00000192 EB0000               860  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   861  	mov [de], a
00000196                      862  	;***      393 :         gp_uart2_rx_address++;
00000196                      863  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 393
00000196 A20000               864  	incw !LOWW(_gp_uart2_rx_address)
00000199                      865  	;***      394 :         g_uart2_rx_count++;
00000199                      866  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 394
00000199 A20000               867  	incw !LOWW(_g_uart2_rx_count)
0000019C                      868  	;***      395 : 
0000019C                      869  	;***      396 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      870  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 396
0000019C AF0000               871  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               872  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 873  	sknz
000001A4                      874  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      875  	;***      397 :         {
000001A4                      876  	;***      398 :             r_uart2_callback_receiveend();
000001A4                      877  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 398
000001A4 FC000000             878  	call !!_r_uart2_callback_receiveend@1
000001A8                      879  .BB@LABEL@14_5:	; return
000001A8 C6                   880  	pop hl
000001A9 C0                   881  	pop ax
000001AA 9EFC                 882  	mov cs, a
000001AC 60                   883  	mov a, x
000001AD 9EFD                 884  	mov es, a
000001AF C6                   885  	pop hl
000001B0 C4                   886  	pop de
000001B1 C2                   887  	pop bc
000001B2 C0                   888  	pop ax
000001B3                      889  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 405
000001B3 61FC                 890  	reti
000001B5                      891  .BB@LABEL@14_6:	; if_else_bb
000001B5                      892  	;***      399 :         }
000001B5                      893  	;***      400 :     }
000001B5                      894  	;***      401 :     else
000001B5                      895  	;***      402 :     {
000001B5                      896  	;***      403 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      897  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 403
000001B5 318E                 898  	shrw ax, 8+0x00000
000001B7 FC000000             899  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 900  	br $.BB@LABEL@14_5
000001BD                      901  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      902  _r_uart2_interrupt_send@1:
000001BD                      903  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      904  	;***      404 :     }
000001BD                      905  	;***      405 : }
000001BD                      906  	;***      406 : 
000001BD                      907  	;***      407 : /***********************************************************************************************************************
000001BD                      908  	;***      408 : * Function Name: r_uart2_interrupt_send
000001BD                      909  	;***      409 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      910  	;***      410 : * Arguments    : None
000001BD                      911  	;***      411 : * Return Value : None
000001BD                      912  	;***      412 : ***********************************************************************************************************************/
000001BD                      913  	;***      413 : static void __near r_uart2_interrupt_send(void)
000001BD                      914  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 413
000001BD C1                   915  	push ax
000001BE C3                   916  	push bc
000001BF C5                   917  	push de
000001C0 C7                   918  	push hl
000001C1 8EFD                 919  	mov a, es
000001C3 70                   920  	mov x, a
000001C4 8EFC                 921  	mov a, cs
000001C6 C1                   922  	push ax
000001C7                      923  	;***      414 : {
000001C7                      924  	;***      415 :     if (g_uart2_tx_count > 0U)
000001C7                      925  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 415
000001C7 AF0000               926  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   927  	clrw bc
000001CB 43                   928  	cmpw ax, bc
000001CC DF00                 929  	bnz $.BB@LABEL@15_3
000001CE                      930  .BB@LABEL@15_1:	; if_else_bb
000001CE                      931  	;***      416 :     {
000001CE                      932  	;***      417 :         TXD2 = *gp_uart2_tx_address;
000001CE                      933  	;***      418 :         gp_uart2_tx_address++;
000001CE                      934  	;***      419 :         g_uart2_tx_count--;
000001CE                      935  	;***      420 :     }
000001CE                      936  	;***      421 :     else
000001CE                      937  	;***      422 :     {
000001CE                      938  	;***      423 :         r_uart2_callback_sendend();
000001CE                      939  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 423
000001CE FC000000             940  	call !!_r_uart2_callback_sendend@1
000001D2                      941  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   942  	pop ax
000001D3 9EFC                 943  	mov cs, a
000001D5 60                   944  	mov a, x
000001D6 9EFD                 945  	mov es, a
000001D8 C6                   946  	pop hl
000001D9 C4                   947  	pop de
000001DA C2                   948  	pop bc
000001DB C0                   949  	pop ax
000001DC                      950  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 425
000001DC 61FC                 951  	reti
000001DE                      952  .BB@LABEL@15_3:	; if_then_bb
000001DE                      953  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 417
000001DE EB0000               954  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   955  	mov a, [de]
000001E2 9E48                 956  	mov 0xFFF48, a
000001E4                      957  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
000001E4 A5                   958  	incw de
000001E5 15                   959  	movw ax, de
000001E6 BF0000               960  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      961  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 419
000001E9 B20000               962  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 963  	br $.BB@LABEL@15_2
00000033                      964  	.SECTION .textf,TEXTF
00000033                      965  _r_uart2_callback_receiveend@1:
00000033                      966  	.STACK _r_uart2_callback_receiveend@1 = 4
00000033                      967  	;***      424 :     }
00000033                      968  	;***      425 : }
00000033                      969  	;***      426 : 
00000033                      970  	;***      427 : /***********************************************************************************************************************
00000033                      971  	;***      428 : * Function Name: r_uart2_callback_receiveend
00000033                      972  	;***      429 : * Description  : This function is a callback function when UART2 finishes reception.
00000033                      973  	;***      430 : * Arguments    : None
00000033                      974  	;***      431 : * Return Value : None
00000033                      975  	;***      432 : ***********************************************************************************************************************/
00000033                      976  	;***      433 : static void r_uart2_callback_receiveend(void)
00000033                      977  	;***      434 : {
00000033                      978  	;***      435 :     /* Start user code. Do not edit comment generated here */
00000033                      979  	;***      436 : //	R_UART2_Receive(g_rx_data, 32);
00000033                      980  	;***      437 : //	R_UART2_Stop();
00000033                      981  	;***      438 : //	R_UART2_Start();
00000033                      982  	;***      439 : 
00000033                      983  	;***      440 : 	R_UART2_Receive(g_rx_data, 6);
00000033                      984  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 440
00000033 320600               985  	movw bc, #0x0006
00000036 300000               986  	movw ax, #LOWW(_g_rx_data)
00000039 FC000000             987  	call !!_R_UART2_Receive
0000003D                      988  	;***      441 : 	isCommand(g_rx_data);
0000003D                      989  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
0000003D 300000               990  	movw ax, #LOWW(_g_rx_data)
00000040 FE0000               991  	call $!_isCommand
00000043                      992  	;***      442 : 	commnunication_flag.recived_time_setting_flag = commnunication_flag.recived_time_setting_flag == 1 ? 2: commnunication_flag.recived_time_setting_flag;
00000043                      993  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
00000043 40000001             994  	cmp !LOWW(_commnunication_flag+0x00004), #0x01
00000047 5102                 995  	mov a, #0x02
00000049 61E8                 996  	skz
0000004B                      997  .BB@LABEL@16_1:	; bb6
0000004B 8F0000               998  	mov a, !LOWW(_commnunication_flag+0x00004)
0000004E                      999  .BB@LABEL@16_2:	; bb9
0000004E 9F0000              1000  	mov !LOWW(_commnunication_flag+0x00004), a
00000051                     1001  	;***      443 : 	commnunication_flag.recived_number_setting_flag = commnunication_flag.recived_number_setting_flag == 1 ? 2: commnunication_flag.recived_number_setting_flag;
00000051                     1002  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
00000051 40000001            1003  	cmp !LOWW(_commnunication_flag+0x00003), #0x01
00000055 5102                1004  	mov a, #0x02
00000057 61E8                1005  	skz
00000059                     1006  .BB@LABEL@16_3:	; bb17
00000059 8F0000              1007  	mov a, !LOWW(_commnunication_flag+0x00003)
0000005C                     1008  .BB@LABEL@16_4:	; bb21
0000005C 9F0000              1009  	mov !LOWW(_commnunication_flag+0x00003), a
0000005F                     1010  	;***      444 : 	if(1){
0000005F                     1011  	;***      445 : 		g_uart2_fault = 0;
0000005F                     1012  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
0000005F F50000              1013  	clrb !LOWW(_g_uart2_fault)
00000062                     1014  	;***      446 : 		if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
00000062                     1015  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
00000062 8F0000              1016  	mov a, !LOWW(_g_rx_data+0x00001)
00000065 73                  1017  	mov b, a
00000066 4C02                1018  	cmp a, #0x02
00000068 8F0000              1019  	mov a, !LOWW(_g_rx_data)
0000006B 70                  1020  	mov x, a
0000006C DF00                1021  	bnz $.BB@LABEL@16_7
0000006E                     1022  .BB@LABEL@16_5:	; bb21
0000006E 4C52                1023  	cmp a, #0x52
00000070 DF00                1024  	bnz $.BB@LABEL@16_7
00000072                     1025  .BB@LABEL@16_6:	; if_then_bb38
00000072                     1026  	;***      447 : 			commnunication_flag.send_response_time_flag = 1;
00000072                     1027  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 447
00000072 E50000              1028  	oneb !LOWW(_commnunication_flag+0x00001)
00000075 EF00                1029  	br $.BB@LABEL@16_19
00000077                     1030  .BB@LABEL@16_7:	; if_else_bb
00000077 63                  1031  	mov a, b
00000078                     1032  	;***      448 : //			g_timerSetting.t51++;
00000078                     1033  	;***      449 : 		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == SAVE_TIME)){
00000078                     1034  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
00000078 4C14                1035  	cmp a, #0x14
0000007A DF00                1036  	bnz $.BB@LABEL@16_10
0000007C                     1037  .BB@LABEL@16_8:	; if_else_bb
0000007C 60                  1038  	mov a, x
0000007D 4C53                1039  	cmp a, #0x53
0000007F DF00                1040  	bnz $.BB@LABEL@16_10
00000081                     1041  .BB@LABEL@16_9:	; if_then_bb51
00000081                     1042  	;***      450 : 			R_UART2_Receive(g_rx_data, 69);
00000081                     1043  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 450
00000081 324500              1044  	movw bc, #0x0045
00000084 300000              1045  	movw ax, #LOWW(_g_rx_data)
00000087 FC000000            1046  	call !!_R_UART2_Receive
0000008B                     1047  	;***      451 : 			commnunication_flag.recived_time_setting_flag = 1;
0000008B                     1048  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 451
0000008B E50000              1049  	oneb !LOWW(_commnunication_flag+0x00004)
0000008E EF00                1050  	br $.BB@LABEL@16_19
00000090                     1051  .BB@LABEL@16_10:	; if_else_bb53
00000090 63                  1052  	mov a, b
00000091                     1053  	;***      452 : 		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_MACHINE_STATUS)){
00000091                     1054  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 452
00000091 4C17                1055  	cmp a, #0x17
00000093 DF00                1056  	bnz $.BB@LABEL@16_13
00000095                     1057  .BB@LABEL@16_11:	; if_else_bb53
00000095 60                  1058  	mov a, x
00000096 4C52                1059  	cmp a, #0x52
00000098 DF00                1060  	bnz $.BB@LABEL@16_13
0000009A                     1061  .BB@LABEL@16_12:	; if_then_bb66
0000009A                     1062  	;***      453 : 			commnunication_flag.send_respone_status_flag = 1;
0000009A                     1063  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 453
0000009A E50000              1064  	oneb !LOWW(_commnunication_flag+0x00005)
0000009D EF00                1065  	br $.BB@LABEL@16_19
0000009F                     1066  .BB@LABEL@16_13:	; if_else_bb67
0000009F 63                  1067  	mov a, b
000000A0                     1068  	;***      454 : 		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_NUMBER)){
000000A0                     1069  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 454
000000A0 4C03                1070  	cmp a, #0x03
000000A2 DF00                1071  	bnz $.BB@LABEL@16_16
000000A4                     1072  .BB@LABEL@16_14:	; if_else_bb67
000000A4 60                  1073  	mov a, x
000000A5 4C52                1074  	cmp a, #0x52
000000A7 DF00                1075  	bnz $.BB@LABEL@16_16
000000A9                     1076  .BB@LABEL@16_15:	; if_then_bb81
000000A9                     1077  	;***      455 : 			commnunication_flag.send_response_number_flag = 1;
000000A9                     1078  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
000000A9 E50000              1079  	oneb !LOWW(_commnunication_flag+0x00002)
000000AC EF00                1080  	br $.BB@LABEL@16_19
000000AE                     1081  .BB@LABEL@16_16:	; if_else_bb82
000000AE 63                  1082  	mov a, b
000000AF                     1083  	;***      456 : 		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == SAVE_NUMBER)){
000000AF                     1084  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 456
000000AF 4C15                1085  	cmp a, #0x15
000000B1 DF00                1086  	bnz $.BB@LABEL@16_19
000000B3                     1087  .BB@LABEL@16_17:	; if_else_bb82
000000B3 60                  1088  	mov a, x
000000B4 4C53                1089  	cmp a, #0x53
000000B6 DF00                1090  	bnz $.BB@LABEL@16_19
000000B8                     1091  .BB@LABEL@16_18:	; if_then_bb95
000000B8                     1092  	;***      457 : 			R_UART2_Receive(g_rx_data, 33);
000000B8                     1093  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 457
000000B8 322100              1094  	movw bc, #0x0021
000000BB 300000              1095  	movw ax, #LOWW(_g_rx_data)
000000BE FC000000            1096  	call !!_R_UART2_Receive
000000C2                     1097  	;***      458 : 			commnunication_flag.recived_number_setting_flag = 1;
000000C2                     1098  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 458
000000C2 E50000              1099  	oneb !LOWW(_commnunication_flag+0x00003)
000000C5                     1100  .BB@LABEL@16_19:	; if_break_bb103
000000C5                     1101  	;***      459 : 		}
000000C5                     1102  	;***      460 : //		if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_NUMBER)){
000000C5                     1103  	;***      461 : //			R_UART2_Receive(g_rx_data, sizeof(struct Number_Setting_s)-1);
000000C5                     1104  	;***      462 : //		}else if((g_rx_data[0] == H_SET)&(g_rx_data[1] == READ_TIME)){
000000C5                     1105  	;***      463 : //			R_UART2_Receive(g_rx_data, sizeof(struct Timer_Setting_s)-1);
000000C5                     1106  	;***      464 : //		}else if((g_rx_data[0] == H_READ)&(g_rx_data[1] == READ_TIME)){
000000C5                     1107  	;***      465 : //			g_timerSetting.crc = crc8_1((uint8_t *)&g_timerSetting, 68);
000000C5                     1108  	;***      466 : //			R_UART2_Send((uint8_t *)&g_timerSetting, 69);
000000C5                     1109  	;***      467 : //			g_timerSetting.t51++;
000000C5                     1110  	;***      468 : //		}
000000C5                     1111  	;***      469 : 	}else{
000000C5                     1112  	;***      470 : 		R_UART2_Receive(g_rx_data, 6);
000000C5                     1113  	;***      471 : 		g_uart2_fault = 1;
000000C5                     1114  	;***      472 : 	}
000000C5                     1115  	;***      473 : 	g_uart2_receive++;
000000C5                     1116  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 473
000000C5 A00000              1117  	inc !LOWW(_g_uart2_receive)
000000C8 D7                  1118  	ret
000000C9                     1119  _r_uart2_callback_softwareoverrun@1:
000000C9                     1120  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
000000C9                     1121  	;***      474 :     /* End user code. Do not edit comment generated here */
000000C9                     1122  	;***      475 : }
000000C9                     1123  	;***      476 : 
000000C9                     1124  	;***      477 : /***********************************************************************************************************************
000000C9                     1125  	;***      478 : * Function Name: r_uart2_callback_softwareoverrun
000000C9                     1126  	;***      479 : * Description  : This function is a callback function when UART2 receives an overflow data.
000000C9                     1127  	;***      480 : * Arguments    : rx_data -
000000C9                     1128  	;***      481 : *                    receive data
000000C9                     1129  	;***      482 : * Return Value : None
000000C9                     1130  	;***      483 : ***********************************************************************************************************************/
000000C9                     1131  	;***      484 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
000000C9                     1132  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 484
000000C9 D7                  1133  	ret
000000CA                     1134  _r_uart2_callback_sendend@1:
000000CA                     1135  	.STACK _r_uart2_callback_sendend@1 = 4
000000CA                     1136  	;***      485 : {
000000CA                     1137  	;***      486 :     /* Start user code. Do not edit comment generated here */
000000CA                     1138  	;***      487 :     /* End user code. Do not edit comment generated here */
000000CA                     1139  	;***      488 : }
000000CA                     1140  	;***      489 : 
000000CA                     1141  	;***      490 : /***********************************************************************************************************************
000000CA                     1142  	;***      491 : * Function Name: r_uart2_callback_sendend
000000CA                     1143  	;***      492 : * Description  : This function is a callback function when UART2 finishes transmission.
000000CA                     1144  	;***      493 : * Arguments    : None
000000CA                     1145  	;***      494 : * Return Value : None
000000CA                     1146  	;***      495 : ***********************************************************************************************************************/
000000CA                     1147  	;***      496 : static void r_uart2_callback_sendend(void)
000000CA                     1148  	;***      497 : {
000000CA                     1149  	;***      498 :     /* Start user code. Do not edit comment generated here */
000000CA                     1150  	;***      499 : 	g_uart2_sendend++;
000000CA                     1151  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 499
000000CA A00000              1152  	inc !LOWW(_g_uart2_sendend)
000000CD D7                  1153  	ret
000000CE                     1154  _r_uart2_callback_error@1:
000000CE                     1155  	.STACK _r_uart2_callback_error@1 = 4
000000CE                     1156  	;***      500 :     /* End user code. Do not edit comment generated here */
000000CE                     1157  	;***      501 : }
000000CE                     1158  	;***      502 : 
000000CE                     1159  	;***      503 : /***********************************************************************************************************************
000000CE                     1160  	;***      504 : * Function Name: r_uart2_callback_error
000000CE                     1161  	;***      505 : * Description  : This function is a callback function when UART2 reception error occurs.
000000CE                     1162  	;***      506 : * Arguments    : err_type -
000000CE                     1163  	;***      507 : *                    error type value
000000CE                     1164  	;***      508 : * Return Value : None
000000CE                     1165  	;***      509 : ***********************************************************************************************************************/
000000CE                     1166  	;***      510 : static void r_uart2_callback_error(uint8_t err_type)
000000CE                     1167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 510
000000CE D7                  1168  	ret
000001EE                     1169  	.SECTION .text,TEXT
000001EE                     1170  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1171  _r_uart3_interrupt_receive@1:
000001EE                     1172  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1173  	;***      511 : {
000001EE                     1174  	;***      512 :     /* Start user code. Do not edit comment generated here */
000001EE                     1175  	;***      513 :     /* End user code. Do not edit comment generated here */
000001EE                     1176  	;***      514 : }
000001EE                     1177  	;***      515 : 
000001EE                     1178  	;***      516 : /***********************************************************************************************************************
000001EE                     1179  	;***      517 : * Function Name: r_uart3_interrupt_receive
000001EE                     1180  	;***      518 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1181  	;***      519 : * Arguments    : None
000001EE                     1182  	;***      520 : * Return Value : None
000001EE                     1183  	;***      521 : ***********************************************************************************************************************/
000001EE                     1184  	;***      522 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1185  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 522
000001EE C1                  1186  	push ax
000001EF C3                  1187  	push bc
000001F0 C5                  1188  	push de
000001F1 C7                  1189  	push hl
000001F2 8EFD                1190  	mov a, es
000001F4 70                  1191  	mov x, a
000001F5 8EFC                1192  	mov a, cs
000001F7 C1                  1193  	push ax
000001F8 C7                  1194  	push hl
000001F9                     1195  	;***      523 : {
000001F9                     1196  	;***      524 :     volatile uint8_t rx_data;
000001F9                     1197  	;***      525 :     volatile uint8_t err_type;
000001F9                     1198  	;***      526 :     
000001F9                     1199  	;***      527 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1200  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 527
000001F9 AF4601              1201  	movw ax, !0x0146
000001FC 60                  1202  	mov a, x
000001FD 5C07                1203  	and a, #0x07
000001FF 9800                1204  	mov [sp+0x00], a
00000201                     1205  	;***      528 :     SIR13 = (uint16_t)err_type;
00000201                     1206  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 528
00000201 8800                1207  	mov a, [sp+0x00]
00000203 318E                1208  	shrw ax, 8+0x00000
00000205 BF4E01              1209  	movw !0x014E, ax
00000208                     1210  	;***      529 : 
00000208                     1211  	;***      530 :     if (err_type != 0U)
00000208                     1212  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 530
00000208 8800                1213  	mov a, [sp+0x00]
0000020A D1                  1214  	cmp0 a
0000020B DD00                1215  	bz $.BB@LABEL@20_2
0000020D                     1216  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1217  	;***      531 :     {
0000020D                     1218  	;***      532 :         r_uart3_callback_error(err_type);
0000020D                     1219  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 532
0000020D 8800                1220  	mov a, [sp+0x00]
0000020F FC000000            1221  	call !!_r_uart3_callback_error@1
00000213                     1222  .BB@LABEL@20_2:	; if_break_bb
00000213                     1223  	;***      533 :     }
00000213                     1224  	;***      534 :     
00000213                     1225  	;***      535 :     rx_data = RXD3;
00000213                     1226  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 535
00000213 8D16                1227  	mov a, 0xFFF16
00000215 9801                1228  	mov [sp+0x01], a
00000217                     1229  	;***      536 : 
00000217                     1230  	;***      537 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1231  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 537
00000217 AF0000              1232  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1233  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1234  	mov a, [sp+0x01]
0000021F 61D300              1235  	bnh $.BB@LABEL@20_6
00000222                     1236  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1237  	;***      538 :     {
00000222                     1238  	;***      539 :         *gp_uart3_rx_address = rx_data;
00000222                     1239  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 539
00000222 EB0000              1240  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1241  	mov [de], a
00000226                     1242  	;***      540 :         gp_uart3_rx_address++;
00000226                     1243  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 540
00000226 A20000              1244  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1245  	;***      541 :         g_uart3_rx_count++;
00000229                     1246  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 541
00000229 A20000              1247  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1248  	;***      542 : 
0000022C                     1249  	;***      543 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1250  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 543
0000022C AF0000              1251  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1252  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1253  	sknz
00000234                     1254  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1255  	;***      544 :         {
00000234                     1256  	;***      545 :             r_uart3_callback_receiveend();
00000234                     1257  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 545
00000234 FC000000            1258  	call !!_r_uart3_callback_receiveend@1
00000238                     1259  .BB@LABEL@20_5:	; return
00000238 C6                  1260  	pop hl
00000239 C0                  1261  	pop ax
0000023A 9EFC                1262  	mov cs, a
0000023C 60                  1263  	mov a, x
0000023D 9EFD                1264  	mov es, a
0000023F C6                  1265  	pop hl
00000240 C4                  1266  	pop de
00000241 C2                  1267  	pop bc
00000242 C0                  1268  	pop ax
00000243                     1269  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 552
00000243 61FC                1270  	reti
00000245                     1271  .BB@LABEL@20_6:	; if_else_bb
00000245                     1272  	;***      546 :         }
00000245                     1273  	;***      547 :     }
00000245                     1274  	;***      548 :     else
00000245                     1275  	;***      549 :     {
00000245                     1276  	;***      550 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1277  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 550
00000245 318E                1278  	shrw ax, 8+0x00000
00000247 FC000000            1279  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1280  	br $.BB@LABEL@20_5
0000024D                     1281  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1282  _r_uart3_interrupt_send@1:
0000024D                     1283  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1284  	;***      551 :     }
0000024D                     1285  	;***      552 : }
0000024D                     1286  	;***      553 : 
0000024D                     1287  	;***      554 : /***********************************************************************************************************************
0000024D                     1288  	;***      555 : * Function Name: r_uart3_interrupt_send
0000024D                     1289  	;***      556 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1290  	;***      557 : * Arguments    : None
0000024D                     1291  	;***      558 : * Return Value : None
0000024D                     1292  	;***      559 : ***********************************************************************************************************************/
0000024D                     1293  	;***      560 : static void __near r_uart3_interrupt_send(void)
0000024D                     1294  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 560
0000024D C1                  1295  	push ax
0000024E C3                  1296  	push bc
0000024F C5                  1297  	push de
00000250 C7                  1298  	push hl
00000251 8EFD                1299  	mov a, es
00000253 70                  1300  	mov x, a
00000254 8EFC                1301  	mov a, cs
00000256 C1                  1302  	push ax
00000257                     1303  	;***      561 : {
00000257                     1304  	;***      562 :     if (g_uart3_tx_count > 0U)
00000257                     1305  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 562
00000257 AF0000              1306  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1307  	clrw bc
0000025B 43                  1308  	cmpw ax, bc
0000025C DF00                1309  	bnz $.BB@LABEL@21_3
0000025E                     1310  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1311  	;***      563 :     {
0000025E                     1312  	;***      564 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1313  	;***      565 :         gp_uart3_tx_address++;
0000025E                     1314  	;***      566 :         g_uart3_tx_count--;
0000025E                     1315  	;***      567 :     }
0000025E                     1316  	;***      568 :     else
0000025E                     1317  	;***      569 :     {
0000025E                     1318  	;***      570 :         r_uart3_callback_sendend();
0000025E                     1319  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 570
0000025E FC000000            1320  	call !!_r_uart3_callback_sendend@1
00000262                     1321  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1322  	pop ax
00000263 9EFC                1323  	mov cs, a
00000265 60                  1324  	mov a, x
00000266 9EFD                1325  	mov es, a
00000268 C6                  1326  	pop hl
00000269 C4                  1327  	pop de
0000026A C2                  1328  	pop bc
0000026B C0                  1329  	pop ax
0000026C                     1330  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 572
0000026C 61FC                1331  	reti
0000026E                     1332  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1333  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 564
0000026E EB0000              1334  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1335  	mov a, [de]
00000272 9D14                1336  	mov 0xFFF14, a
00000274                     1337  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 565
00000274 A5                  1338  	incw de
00000275 15                  1339  	movw ax, de
00000276 BF0000              1340  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1341  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 566
00000279 B20000              1342  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1343  	br $.BB@LABEL@21_2
000000CF                     1344  	.SECTION .textf,TEXTF
000000CF                     1345  _r_uart3_callback_receiveend@1:
000000CF                     1346  	.STACK _r_uart3_callback_receiveend@1 = 4
000000CF                     1347  	;***      571 :     }
000000CF                     1348  	;***      572 : }
000000CF                     1349  	;***      573 : 
000000CF                     1350  	;***      574 : /***********************************************************************************************************************
000000CF                     1351  	;***      575 : * Function Name: r_uart3_callback_receiveend
000000CF                     1352  	;***      576 : * Description  : This function is a callback function when UART3 finishes reception.
000000CF                     1353  	;***      577 : * Arguments    : None
000000CF                     1354  	;***      578 : * Return Value : None
000000CF                     1355  	;***      579 : ***********************************************************************************************************************/
000000CF                     1356  	;***      580 : static void r_uart3_callback_receiveend(void)
000000CF                     1357  	;***      581 : {
000000CF                     1358  	;***      582 :     /* Start user code. Do not edit comment generated here */
000000CF                     1359  	;***      583 : 	R_UART3_Receive(rec_buf, 6);
000000CF                     1360  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 583
000000CF 320600              1361  	movw bc, #0x0006
000000D2 300000              1362  	movw ax, #LOWW(_rec_buf)
000000D5 FC000000            1363  	call !!_R_UART3_Receive
000000D9                     1364  	;***      584 : 	if((rec_buf[0]==H_SET)|(rec_buf[0]==SAVE_TIME)){
000000D9                     1365  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 584
000000D9 8F0000              1366  	mov a, !LOWW(_rec_buf)
000000DC 4C53                1367  	cmp a, #0x53
000000DE E0                  1368  	oneb x
000000DF 61E8                1369  	skz
000000E1                     1370  .BB@LABEL@22_1:	; entry
000000E1 F0                  1371  	clrb x
000000E2                     1372  .BB@LABEL@22_2:	; entry
000000E2 4C14                1373  	cmp a, #0x14
000000E4 E1                  1374  	oneb a
000000E5 61E8                1375  	skz
000000E7                     1376  .BB@LABEL@22_3:	; entry
000000E7 F1                  1377  	clrb a
000000E8                     1378  .BB@LABEL@22_4:	; entry
000000E8 6168                1379  	or a, x
000000EA 61F8                1380  	sknz
000000EC                     1381  .BB@LABEL@22_5:	; return
000000EC                     1382  	;***      585 : 		rec_buf[2] = 0xff;
000000EC                     1383  	;***      586 : 		O_RS485_MODE_PIN = 1U;
000000EC                     1384  	;***      587 : 		R_UART3_Send(rec_buf, 6);
000000EC                     1385  	;***      588 : 	}
000000EC                     1386  	;***      589 :     /* End user code. Do not edit comment generated here */
000000EC                     1387  	;***      590 : }
000000EC                     1388  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 590
000000EC D7                  1389  	ret
000000ED                     1390  .BB@LABEL@22_6:	; if_then_bb
000000ED                     1391  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 585
000000ED CF0000FF            1392  	mov !LOWW(_rec_buf+0x00002), #0xFF
000000F1                     1393  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 586
000000F1 710200              1394  	set1 0xFFF00.0
000000F4                     1395  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 587
000000F4 320600              1396  	movw bc, #0x0006
000000F7 300000              1397  	movw ax, #LOWW(_rec_buf)
000000FA EC000000            1398  	br !!_R_UART3_Send
000000FE                     1399  _r_uart3_callback_softwareoverrun@1:
000000FE                     1400  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
000000FE                     1401  	;***      591 : 
000000FE                     1402  	;***      592 : /***********************************************************************************************************************
000000FE                     1403  	;***      593 : * Function Name: r_uart3_callback_softwareoverrun
000000FE                     1404  	;***      594 : * Description  : This function is a callback function when UART3 receives an overflow data.
000000FE                     1405  	;***      595 : * Arguments    : rx_data -
000000FE                     1406  	;***      596 : *                    receive data
000000FE                     1407  	;***      597 : * Return Value : None
000000FE                     1408  	;***      598 : ***********************************************************************************************************************/
000000FE                     1409  	;***      599 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
000000FE                     1410  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 599
000000FE D7                  1411  	ret
000000FF                     1412  _r_uart3_callback_sendend@1:
000000FF                     1413  	.STACK _r_uart3_callback_sendend@1 = 4
000000FF                     1414  	;***      600 : {
000000FF                     1415  	;***      601 :     /* Start user code. Do not edit comment generated here */
000000FF                     1416  	;***      602 :     /* End user code. Do not edit comment generated here */
000000FF                     1417  	;***      603 : }
000000FF                     1418  	;***      604 : 
000000FF                     1419  	;***      605 : /***********************************************************************************************************************
000000FF                     1420  	;***      606 : * Function Name: r_uart3_callback_sendend
000000FF                     1421  	;***      607 : * Description  : This function is a callback function when UART3 finishes transmission.
000000FF                     1422  	;***      608 : * Arguments    : None
000000FF                     1423  	;***      609 : * Return Value : None
000000FF                     1424  	;***      610 : ***********************************************************************************************************************/
000000FF                     1425  	;***      611 : static void r_uart3_callback_sendend(void)
000000FF                     1426  	;***      612 : {
000000FF                     1427  	;***      613 :     /* Start user code. Do not edit comment generated here */
000000FF                     1428  	;***      614 : 	g_uart3_sendend++;
000000FF                     1429  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 614
000000FF A00000              1430  	inc !LOWW(_g_uart3_sendend)
00000102                     1431  	;***      615 : 	O_RS485_MODE_PIN = 0U;
00000102                     1432  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 615
00000102 710300              1433  	clr1 0xFFF00.0
00000105 D7                  1434  	ret
00000106                     1435  _r_uart3_callback_error@1:
00000106                     1436  	.STACK _r_uart3_callback_error@1 = 4
00000106                     1437  	;***      616 :     /* End user code. Do not edit comment generated here */
00000106                     1438  	;***      617 : }
00000106                     1439  	;***      618 : 
00000106                     1440  	;***      619 : /***********************************************************************************************************************
00000106                     1441  	;***      620 : * Function Name: r_uart3_callback_error
00000106                     1442  	;***      621 : * Description  : This function is a callback function when UART3 reception error occurs.
00000106                     1443  	;***      622 : * Arguments    : err_type -
00000106                     1444  	;***      623 : *                    error type value
00000106                     1445  	;***      624 : * Return Value : None
00000106                     1446  	;***      625 : ***********************************************************************************************************************/
00000106                     1447  	;***      626 : static void r_uart3_callback_error(uint8_t err_type)
00000106                     1448  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 626
00000106 D7                  1449  	ret
00000107                     1450  	;***      627 : {
00000107                     1451  	;***      628 :     /* Start user code. Do not edit comment generated here */
00000107                     1452  	;***      629 :     /* End user code. Do not edit comment generated here */
00000107                     1453  	;***      630 : }
00000107                     1454  	;***      631 : 
00000107                     1455  	;***      632 : /* Start user code for adding. Do not edit comment generated here */
00000107                     1456  	;***      633 : /* End user code. Do not edit comment generated here */
00000000                     1457  	.SECTION .bss,BSS
00000000                     1458  _send_response_flag:
00000000                     1459  	.DS (1)
00000001                     1460  _send_response_time_flag:
00000001                     1461  	.DS (1)
00000002                     1462  _send_response_number_flag:
00000002                     1463  	.DS (1)
00000003                     1464  _recived_time_setting_flag:
00000003                     1465  	.DS (1)
00000004                     1466  _send_respone_status_flag:
00000004                     1467  	.DS (1)
00000005                     1468  _recived_number_setting_flag:
00000005                     1469  	.DS (1)
00000006                     1470  _commnunication_flag:
00000006                     1471  	.DS (6)
0000000C                     1472  _g_csi_count:
0000000C                     1473  	.DS (1)
0000000D                     1474  _g_csi_err:
0000000D                     1475  	.DS (1)
0000000E                     1476  _g_csi_send_end:
0000000E                     1477  	.DS (1)
0000000F                     1478  _g_csi_rev_end:
0000000F                     1479  	.DS (1)
00000010                     1480  _g_uart1_send:
00000010                     1481  	.DS (1)
00000011                     1482  _g_uart2_sendend:
00000011                     1483  	.DS (1)
00000012                     1484  _g_uart2_receive:
00000012                     1485  	.DS (1)
00000013                     1486  _g_rx_data:
00000013                     1487  	.DS (72)
0000005B                     1488  _g_uart2_fault:
0000005B                     1489  	.DS (1)
0000005C                     1490  _g_uart3_sendend:
0000005C                     1491  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               263 (00000107) .textf
BSS                  93 (0000005D) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl001\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

