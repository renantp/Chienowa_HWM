RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Wed Dec 29 17:58:58 2021
00000000                       19  
00000000                       20  	.EXTERN _g_machine_state
00000000                       21  	.EXTERN _g_machine_mode
00000000                       22  	.PUBLIC _g_uart3_rx_data
00000000                       23  	.EXTERN _gp_uart1_tx_address
00000000                       24  	.EXTERN _g_uart1_tx_count
00000000                       25  	.EXTERN _gp_uart1_rx_address
00000000                       26  	.EXTERN _g_uart1_rx_count
00000000                       27  	.EXTERN _g_uart1_rx_length
00000000                       28  	.EXTERN _gp_csi00_tx_address
00000000                       29  	.EXTERN _g_csi00_tx_count
00000000                       30  	.EXTERN _gp_csi01_rx_address
00000000                       31  	.EXTERN _gp_csi01_tx_address
00000000                       32  	.EXTERN _g_csi01_tx_count
00000000                       33  	.EXTERN _gp_uart2_tx_address
00000000                       34  	.EXTERN _g_uart2_tx_count
00000000                       35  	.EXTERN _gp_uart2_rx_address
00000000                       36  	.EXTERN _g_uart2_rx_count
00000000                       37  	.EXTERN _g_uart2_rx_length
00000000                       38  	.EXTERN _gp_uart3_tx_address
00000000                       39  	.EXTERN _g_uart3_tx_count
00000000                       40  	.EXTERN _gp_uart3_rx_address
00000000                       41  	.EXTERN _g_uart3_rx_count
00000000                       42  	.EXTERN _g_uart3_rx_length
00000000                       43  	.PUBLIC _send_response_flag
00000000                       44  	.PUBLIC _send_response_time_flag
00000000                       45  	.PUBLIC _send_response_number_flag
00000000                       46  	.PUBLIC _recived_time_setting_flag
00000000                       47  	.PUBLIC _send_respone_status_flag
00000000                       48  	.PUBLIC _recived_number_setting_flag
00000000                       49  	.PUBLIC _commnunication_flag
00000000                       50  	.PUBLIC _g_csi_count
00000000                       51  	.PUBLIC _g_csi_err
00000000                       52  	.PUBLIC _g_csi_send_end
00000000                       53  	.PUBLIC _g_csi_rev_end
00000000                       54  	.PUBLIC _g_uart1_send
00000000                       55  	.PUBLIC _g_uart2_sendend
00000000                       56  	.PUBLIC _g_uart2_receive
00000000                       57  	.PUBLIC _g_rx_data
00000000                       58  	.PUBLIC _g_uart2_fault
00000000                       59  	.PUBLIC _g_uart3_sendend
00000000                       60  	.PUBLIC _isCommand
00000000                       61  	.EXTERN _R_CSI01_Stop
00000000                       62  	.EXTERN _R_UART2_Receive
00000000                       63  	.EXTERN _isThisCommand
00000000                       64  	.EXTERN _R_UART3_Receive
00000000                       65  
00000000                       66  	.SECTION .textf,TEXTF
00000000                       67  _isCommand:
00000000                       68  	.STACK _isCommand = 4
00000000                       69  	;***        1 : /***********************************************************************************************************************
00000000                       70  	;***        2 : * DISCLAIMER
00000000                       71  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       72  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       73  	;***        5 : * applicable laws, including copyright laws. 
00000000                       74  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       75  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       76  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       77  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       78  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       79  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       80  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       81  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       82  	;***       14 : * following link:
00000000                       83  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       84  	;***       16 : *
00000000                       85  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       86  	;***       18 : ***********************************************************************************************************************/
00000000                       87  	;***       19 : 
00000000                       88  	;***       20 : /***********************************************************************************************************************
00000000                       89  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       90  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       91  	;***       23 : * Device(s)    : R5F104ML
00000000                       92  	;***       24 : * Tool-Chain   : CCRL
00000000                       93  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       94  	;***       26 : * Creation Date: 30/11/2021
00000000                       95  	;***       27 : ***********************************************************************************************************************/
00000000                       96  	;***       28 : 
00000000                       97  	;***       29 : /***********************************************************************************************************************
00000000                       98  	;***       30 : Includes
00000000                       99  	;***       31 : ***********************************************************************************************************************/
00000000                      100  	;***       32 : #include "r_cg_macrodriver.h"
00000000                      101  	;***       33 : #include "r_cg_serial.h"
00000000                      102  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                      103  	;***       35 : #include "r_cg_wdt.h"
00000000                      104  	;***       36 : #include "main.h"
00000000                      105  	;***       37 : /* End user code. Do not edit comment generated here */
00000000                      106  	;***       38 : #include "r_cg_userdefine.h"
00000000                      107  	;***       39 : 
00000000                      108  	;***       40 : /***********************************************************************************************************************
00000000                      109  	;***       41 : Pragma directive
00000000                      110  	;***       42 : ***********************************************************************************************************************/
00000000                      111  	;***       43 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      112  	;***       44 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      113  	;***       45 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      114  	;***       46 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      115  	;***       47 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      116  	;***       48 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      117  	;***       49 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      118  	;***       50 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      119  	;***       51 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      120  	;***       52 : /* End user code. Do not edit comment generated here */
00000000                      121  	;***       53 : 
00000000                      122  	;***       54 : /***********************************************************************************************************************
00000000                      123  	;***       55 : Global variables and functions
00000000                      124  	;***       56 : ***********************************************************************************************************************/
00000000                      125  	;***       57 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      126  	;***       58 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      127  	;***       59 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      128  	;***       60 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      129  	;***       61 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      130  	;***       62 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      131  	;***       63 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      132  	;***       64 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      133  	;***       65 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      134  	;***       66 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      135  	;***       67 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      136  	;***       68 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      137  	;***       69 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      138  	;***       70 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      139  	;***       71 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      140  	;***       72 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      141  	;***       73 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      142  	;***       74 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      143  	;***       75 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      144  	;***       76 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      145  	;***       77 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      146  	;***       78 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      147  	;***       79 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      148  	;***       80 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      149  	;***       81 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      150  	;***       82 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      151  	;***       83 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      152  	;***       84 : /* Start user code for global. Do not edit comment generated here */
00000000                      153  	;***       85 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag, recived_time_setting_flag
00000000                      154  	;***       86 : ,send_respone_status_flag, recived_number_setting_flag;
00000000                      155  	;***       87 : volatile struct Communicaition_flag_s commnunication_flag;
00000000                      156  	;***       88 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      157  	;***       89 : uint8_t g_rx_data[4*40];
00000000                      158  	;***       90 : uint8_t g_uart3_rx_data[8];
00000000                      159  	;***       91 : volatile uint8_t g_uart2_fault;
00000000                      160  	;***       92 : volatile uint8_t g_uart3_sendend;
00000000                      161  	;***       93 : uint8_t isCommand(uint8_t *data){
00000000                      162  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 93
00000000 14                   163  	movw de, ax
00000001                      164  	;***       94 : 	if((data[0] == H_SET)&&(data[1] == NEXT_ANIMATION))
00000001                      165  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 94
00000001 89                   166  	mov a, [de]
00000002 70                   167  	mov x, a
00000003 4C53                 168  	cmp a, #0x53
00000005 DF00                 169  	bnz $.BB@LABEL@1_2
00000007                      170  .BB@LABEL@1_1:	; bb
00000007 8A01                 171  	mov a, [de+0x01]
00000009 4C13                 172  	cmp a, #0x13
0000000B DD00                 173  	bz $.BB@LABEL@1_7
0000000D                      174  .BB@LABEL@1_2:	; if_break_bb
0000000D 60                   175  	mov a, x
0000000E                      176  	;***       95 : 		return 0;
0000000E                      177  	;***       96 : 	switch ((enum UART_header_e)*data) {
0000000E                      178  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 96
0000000E 0CBD                 179  	add a, #0xBD
00000010 DD00                 180  	bz $.BB@LABEL@1_6
00000012                      181  .BB@LABEL@1_3:	; if_break_bb
00000012 0CFE                 182  	add a, #0xFE
00000014 DD00                 183  	bz $.BB@LABEL@1_6
00000016                      184  .BB@LABEL@1_4:	; if_break_bb
00000016 0CF3                 185  	add a, #0xF3
00000018 DD00                 186  	bz $.BB@LABEL@1_6
0000001A                      187  .BB@LABEL@1_5:	; if_break_bb
0000001A 91                   188  	dec a
0000001B DF00                 189  	bnz $.BB@LABEL@1_7
0000001D                      190  .BB@LABEL@1_6:	; switch_clause_bb26
0000001D E50000               191  	oneb !LOWW(_commnunication_flag)
00000020 E1                   192  	oneb a
00000021                      193  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 116
00000021 D7                   194  	ret
00000022                      195  .BB@LABEL@1_7:	; bb30
00000022                      196  	;***       97 : //		case H_ALARM:
00000022                      197  	;***       98 : //			commnunication_flag.send_response_flag = 1;
00000022                      198  	;***       99 : //			break;
00000022                      199  	;***      100 : 		case H_CLEAR:
00000022                      200  	;***      101 : 			commnunication_flag.send_response_flag = 1;
00000022                      201  	;***      102 : 			break;
00000022                      202  	;***      103 : 		case H_ERROR:
00000022                      203  	;***      104 : 			commnunication_flag.send_response_flag = 1;
00000022                      204  	;***      105 : 			break;
00000022                      205  	;***      106 : 		case H_READ:
00000022                      206  	;***      107 : 			commnunication_flag.send_response_flag = 1;
00000022                      207  	;***      108 : 			break;
00000022                      208  	;***      109 : 		case H_SET:
00000022                      209  	;***      110 : 			commnunication_flag.send_response_flag = 1;
00000022                      210  	;***      111 : 			break;
00000022                      211  	;***      112 : 		default:
00000022                      212  	;***      113 : 			return 0;
00000022                      213  	;***      114 : 	}
00000022                      214  	;***      115 : 	return 1;
00000022                      215  	;***      116 : }
00000022 F1                   216  	clrb a
00000023 D7                   217  	ret
00000000                      218  	.SECTION .text,TEXT
00000000                      219  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      220  _r_uart1_interrupt_receive@1:
00000000                      221  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      222  	;***      117 : /* End user code. Do not edit comment generated here */
00000000                      223  	;***      118 : 
00000000                      224  	;***      119 : /***********************************************************************************************************************
00000000                      225  	;***      120 : * Function Name: r_uart1_interrupt_receive
00000000                      226  	;***      121 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      227  	;***      122 : * Arguments    : None
00000000                      228  	;***      123 : * Return Value : None
00000000                      229  	;***      124 : ***********************************************************************************************************************/
00000000                      230  	;***      125 : static void __near r_uart1_interrupt_receive(void)
00000000                      231  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 125
00000000 C1                   232  	push ax
00000001 C3                   233  	push bc
00000002 C5                   234  	push de
00000003 C7                   235  	push hl
00000004 8EFD                 236  	mov a, es
00000006 70                   237  	mov x, a
00000007 8EFC                 238  	mov a, cs
00000009 C1                   239  	push ax
0000000A C7                   240  	push hl
0000000B                      241  	;***      126 : {
0000000B                      242  	;***      127 :     volatile uint8_t rx_data;
0000000B                      243  	;***      128 :     volatile uint8_t err_type;
0000000B                      244  	;***      129 :     
0000000B                      245  	;***      130 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      246  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 130
0000000B AF0601               247  	movw ax, !0x0106
0000000E 60                   248  	mov a, x
0000000F 5C07                 249  	and a, #0x07
00000011 9800                 250  	mov [sp+0x00], a
00000013                      251  	;***      131 :     SIR03 = (uint16_t)err_type;
00000013                      252  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
00000013 8800                 253  	mov a, [sp+0x00]
00000015 318E                 254  	shrw ax, 8+0x00000
00000017 BF0E01               255  	movw !0x010E, ax
0000001A                      256  	;***      132 : 
0000001A                      257  	;***      133 :     if (err_type != 0U)
0000001A                      258  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 133
0000001A 8800                 259  	mov a, [sp+0x00]
0000001C D1                   260  	cmp0 a
0000001D DD00                 261  	bz $.BB@LABEL@2_2
0000001F                      262  .BB@LABEL@2_1:	; if_then_bb
0000001F                      263  	;***      134 :     {
0000001F                      264  	;***      135 :         r_uart1_callback_error(err_type);
0000001F                      265  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 135
0000001F 8800                 266  	mov a, [sp+0x00]
00000021 FC000000             267  	call !!_r_uart1_callback_error@1
00000025                      268  .BB@LABEL@2_2:	; if_break_bb
00000025                      269  	;***      136 :     }
00000025                      270  	;***      137 :     
00000025                      271  	;***      138 :     rx_data = RXD1;
00000025                      272  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 138
00000025 8E46                 273  	mov a, 0xFFF46
00000027 9801                 274  	mov [sp+0x01], a
00000029                      275  	;***      139 : 
00000029                      276  	;***      140 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      277  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 140
00000029 AF0000               278  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               279  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 280  	mov a, [sp+0x01]
00000031 61D300               281  	bnh $.BB@LABEL@2_6
00000034                      282  .BB@LABEL@2_3:	; if_then_bb18
00000034                      283  	;***      141 :     {
00000034                      284  	;***      142 :         *gp_uart1_rx_address = rx_data;
00000034                      285  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
00000034 EB0000               286  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   287  	mov [de], a
00000038                      288  	;***      143 :         gp_uart1_rx_address++;
00000038                      289  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
00000038 A20000               290  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      291  	;***      144 :         g_uart1_rx_count++;
0000003B                      292  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
0000003B A20000               293  	incw !LOWW(_g_uart1_rx_count)
0000003E                      294  	;***      145 : 
0000003E                      295  	;***      146 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      296  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
0000003E AF0000               297  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               298  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 299  	sknz
00000046                      300  .BB@LABEL@2_4:	; if_then_bb30
00000046                      301  	;***      147 :         {
00000046                      302  	;***      148 :             r_uart1_callback_receiveend();
00000046                      303  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 148
00000046 FC000000             304  	call !!_r_uart1_callback_receiveend@1
0000004A                      305  .BB@LABEL@2_5:	; return
0000004A C6                   306  	pop hl
0000004B C0                   307  	pop ax
0000004C 9EFC                 308  	mov cs, a
0000004E 60                   309  	mov a, x
0000004F 9EFD                 310  	mov es, a
00000051 C6                   311  	pop hl
00000052 C4                   312  	pop de
00000053 C2                   313  	pop bc
00000054 C0                   314  	pop ax
00000055                      315  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 155
00000055 61FC                 316  	reti
00000057                      317  .BB@LABEL@2_6:	; if_else_bb
00000057                      318  	;***      149 :         }
00000057                      319  	;***      150 :     }
00000057                      320  	;***      151 :     else
00000057                      321  	;***      152 :     {
00000057                      322  	;***      153 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      323  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 153
00000057 318E                 324  	shrw ax, 8+0x00000
00000059 FC000000             325  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 326  	br $.BB@LABEL@2_5
0000005F                      327  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      328  _r_uart1_interrupt_send@1:
0000005F                      329  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      330  	;***      154 :     }
0000005F                      331  	;***      155 : }
0000005F                      332  	;***      156 : 
0000005F                      333  	;***      157 : /***********************************************************************************************************************
0000005F                      334  	;***      158 : * Function Name: r_uart1_interrupt_send
0000005F                      335  	;***      159 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      336  	;***      160 : * Arguments    : None
0000005F                      337  	;***      161 : * Return Value : None
0000005F                      338  	;***      162 : ***********************************************************************************************************************/
0000005F                      339  	;***      163 : static void __near r_uart1_interrupt_send(void)
0000005F                      340  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 163
0000005F C1                   341  	push ax
00000060 C3                   342  	push bc
00000061 C5                   343  	push de
00000062 C7                   344  	push hl
00000063 8EFD                 345  	mov a, es
00000065 70                   346  	mov x, a
00000066 8EFC                 347  	mov a, cs
00000068 C1                   348  	push ax
00000069                      349  	;***      164 : {
00000069                      350  	;***      165 :     if (g_uart1_tx_count > 0U)
00000069                      351  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 165
00000069 AF0000               352  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   353  	clrw bc
0000006D 43                   354  	cmpw ax, bc
0000006E DF00                 355  	bnz $.BB@LABEL@3_3
00000070                      356  .BB@LABEL@3_1:	; if_else_bb
00000070                      357  	;***      166 :     {
00000070                      358  	;***      167 :         TXD1 = *gp_uart1_tx_address;
00000070                      359  	;***      168 :         gp_uart1_tx_address++;
00000070                      360  	;***      169 :         g_uart1_tx_count--;
00000070                      361  	;***      170 :     }
00000070                      362  	;***      171 :     else
00000070                      363  	;***      172 :     {
00000070                      364  	;***      173 :         r_uart1_callback_sendend();
00000070                      365  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 173
00000070 FC000000             366  	call !!_r_uart1_callback_sendend@1
00000074                      367  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   368  	pop ax
00000075 9EFC                 369  	mov cs, a
00000077 60                   370  	mov a, x
00000078 9EFD                 371  	mov es, a
0000007A C6                   372  	pop hl
0000007B C4                   373  	pop de
0000007C C2                   374  	pop bc
0000007D C0                   375  	pop ax
0000007E                      376  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 175
0000007E 61FC                 377  	reti
00000080                      378  .BB@LABEL@3_3:	; if_then_bb
00000080                      379  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 167
00000080 EB0000               380  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   381  	mov a, [de]
00000084 9E44                 382  	mov 0xFFF44, a
00000086                      383  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 168
00000086 A5                   384  	incw de
00000087 15                   385  	movw ax, de
00000088 BF0000               386  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      387  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 169
0000008B B20000               388  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 389  	br $.BB@LABEL@3_2
00000024                      390  	.SECTION .textf,TEXTF
00000024                      391  _r_uart1_callback_receiveend@1:
00000024                      392  	.STACK _r_uart1_callback_receiveend@1 = 4
00000024                      393  	;***      174 :     }
00000024                      394  	;***      175 : }
00000024                      395  	;***      176 : 
00000024                      396  	;***      177 : /***********************************************************************************************************************
00000024                      397  	;***      178 : * Function Name: r_uart1_callback_receiveend
00000024                      398  	;***      179 : * Description  : This function is a callback function when UART1 finishes reception.
00000024                      399  	;***      180 : * Arguments    : None
00000024                      400  	;***      181 : * Return Value : None
00000024                      401  	;***      182 : ***********************************************************************************************************************/
00000024                      402  	;***      183 : static void r_uart1_callback_receiveend(void)
00000024                      403  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 183
00000024 D7                   404  	ret
00000025                      405  _r_uart1_callback_softwareoverrun@1:
00000025                      406  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000025                      407  	;***      184 : {
00000025                      408  	;***      185 :     /* Start user code. Do not edit comment generated here */
00000025                      409  	;***      186 :     /* End user code. Do not edit comment generated here */
00000025                      410  	;***      187 : }
00000025                      411  	;***      188 : 
00000025                      412  	;***      189 : /***********************************************************************************************************************
00000025                      413  	;***      190 : * Function Name: r_uart1_callback_softwareoverrun
00000025                      414  	;***      191 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000025                      415  	;***      192 : * Arguments    : rx_data -
00000025                      416  	;***      193 : *                    receive data
00000025                      417  	;***      194 : * Return Value : None
00000025                      418  	;***      195 : ***********************************************************************************************************************/
00000025                      419  	;***      196 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000025                      420  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 196
00000025 D7                   421  	ret
00000026                      422  _r_uart1_callback_sendend@1:
00000026                      423  	.STACK _r_uart1_callback_sendend@1 = 4
00000026                      424  	;***      197 : {
00000026                      425  	;***      198 :     /* Start user code. Do not edit comment generated here */
00000026                      426  	;***      199 :     /* End user code. Do not edit comment generated here */
00000026                      427  	;***      200 : }
00000026                      428  	;***      201 : 
00000026                      429  	;***      202 : /***********************************************************************************************************************
00000026                      430  	;***      203 : * Function Name: r_uart1_callback_sendend
00000026                      431  	;***      204 : * Description  : This function is a callback function when UART1 finishes transmission.
00000026                      432  	;***      205 : * Arguments    : None
00000026                      433  	;***      206 : * Return Value : None
00000026                      434  	;***      207 : ***********************************************************************************************************************/
00000026                      435  	;***      208 : static void r_uart1_callback_sendend(void)
00000026                      436  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 208
00000026 D7                   437  	ret
00000027                      438  _r_uart1_callback_error@1:
00000027                      439  	.STACK _r_uart1_callback_error@1 = 4
00000027                      440  	;***      209 : {
00000027                      441  	;***      210 :     /* Start user code. Do not edit comment generated here */
00000027                      442  	;***      211 :     /* End user code. Do not edit comment generated here */
00000027                      443  	;***      212 : }
00000027                      444  	;***      213 : 
00000027                      445  	;***      214 : /***********************************************************************************************************************
00000027                      446  	;***      215 : * Function Name: r_uart1_callback_error
00000027                      447  	;***      216 : * Description  : This function is a callback function when UART1 reception error occurs.
00000027                      448  	;***      217 : * Arguments    : err_type -
00000027                      449  	;***      218 : *                    error type value
00000027                      450  	;***      219 : * Return Value : None
00000027                      451  	;***      220 : ***********************************************************************************************************************/
00000027                      452  	;***      221 : static void r_uart1_callback_error(uint8_t err_type)
00000027                      453  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 221
00000027 D7                   454  	ret
00000090                      455  	.SECTION .text,TEXT
00000090                      456  _r_csi00_interrupt@1	.vector 0x001E
00000090                      457  _r_csi00_interrupt@1:
00000090                      458  	.STACK _r_csi00_interrupt@1 = 16
00000090                      459  	;***      222 : {
00000090                      460  	;***      223 :     /* Start user code. Do not edit comment generated here */
00000090                      461  	;***      224 :     /* End user code. Do not edit comment generated here */
00000090                      462  	;***      225 : }
00000090                      463  	;***      226 : 
00000090                      464  	;***      227 : /***********************************************************************************************************************
00000090                      465  	;***      228 : * Function Name: r_csi00_interrupt
00000090                      466  	;***      229 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      467  	;***      230 : * Arguments    : None
00000090                      468  	;***      231 : * Return Value : None
00000090                      469  	;***      232 : ***********************************************************************************************************************/
00000090                      470  	;***      233 : static void __near r_csi00_interrupt(void)
00000090                      471  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 233
00000090 C1                   472  	push ax
00000091 C3                   473  	push bc
00000092 C5                   474  	push de
00000093 C7                   475  	push hl
00000094 8EFD                 476  	mov a, es
00000096 70                   477  	mov x, a
00000097 8EFC                 478  	mov a, cs
00000099 C1                   479  	push ax
0000009A C7                   480  	push hl
0000009B                      481  	;***      234 : {
0000009B                      482  	;***      235 :     volatile uint8_t err_type;
0000009B                      483  	;***      236 : 
0000009B                      484  	;***      237 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      485  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 237
0000009B AF0001               486  	movw ax, !0x0100
0000009E 60                   487  	mov a, x
0000009F 5C01                 488  	and a, #0x01
000000A1 9800                 489  	mov [sp+0x00], a
000000A3                      490  	;***      238 :     SIR00 = (uint16_t)err_type;
000000A3                      491  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 238
000000A3 8800                 492  	mov a, [sp+0x00]
000000A5 318E                 493  	shrw ax, 8+0x00000
000000A7 BF0801               494  	movw !0x0108, ax
000000AA                      495  	;***      239 : 
000000AA                      496  	;***      240 :     if (err_type != 1U)
000000AA                      497  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 240
000000AA 8800                 498  	mov a, [sp+0x00]
000000AC 91                   499  	dec a
000000AD DF00                 500  	bnz $.BB@LABEL@8_2
000000AF                      501  .BB@LABEL@8_1:	; return
000000AF C6                   502  	pop hl
000000B0 C0                   503  	pop ax
000000B1 9EFC                 504  	mov cs, a
000000B3 60                   505  	mov a, x
000000B4 9EFD                 506  	mov es, a
000000B6 C6                   507  	pop hl
000000B7 C4                   508  	pop de
000000B8 C2                   509  	pop bc
000000B9 C0                   510  	pop ax
000000BA                      511  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 253
000000BA 61FC                 512  	reti
000000BC                      513  .BB@LABEL@8_2:	; if_then_bb
000000BC                      514  	;***      241 :     {
000000BC                      515  	;***      242 :         if (g_csi00_tx_count > 0U)
000000BC                      516  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 242
000000BC AF0000               517  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   518  	clrw bc
000000C0 43                   519  	cmpw ax, bc
000000C1 DF00                 520  	bnz $.BB@LABEL@8_4
000000C3                      521  .BB@LABEL@8_3:	; if_else_bb
000000C3                      522  	;***      243 :         {
000000C3                      523  	;***      244 :             SIO00 = *gp_csi00_tx_address;
000000C3                      524  	;***      245 :             gp_csi00_tx_address++;
000000C3                      525  	;***      246 :             g_csi00_tx_count--;
000000C3                      526  	;***      247 :         }
000000C3                      527  	;***      248 :         else
000000C3                      528  	;***      249 :         {
000000C3                      529  	;***      250 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      530  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 250
000000C3 FC000000             531  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 532  	br $.BB@LABEL@8_1
000000C9                      533  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      534  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 244
000000C9 EB0000               535  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   536  	mov a, [de]
000000CD 9D10                 537  	mov 0xFFF10, a
000000CF                      538  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 245
000000CF A5                   539  	incw de
000000D0 15                   540  	movw ax, de
000000D1 BF0000               541  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      542  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 246
000000D4 B20000               543  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 544  	br $.BB@LABEL@8_1
00000028                      545  	.SECTION .textf,TEXTF
00000028                      546  _r_csi00_callback_sendend@1:
00000028                      547  	.STACK _r_csi00_callback_sendend@1 = 4
00000028                      548  	;***      251 :         }
00000028                      549  	;***      252 :     }
00000028                      550  	;***      253 : }
00000028                      551  	;***      254 : 
00000028                      552  	;***      255 : /***********************************************************************************************************************
00000028                      553  	;***      256 : * Function Name: r_csi00_callback_sendend
00000028                      554  	;***      257 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000028                      555  	;***      258 : * Arguments    : None
00000028                      556  	;***      259 : * Return Value : None
00000028                      557  	;***      260 : ***********************************************************************************************************************/
00000028                      558  	;***      261 : static void r_csi00_callback_sendend(void)
00000028                      559  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 261
00000028 D7                   560  	ret
000000D9                      561  	.SECTION .text,TEXT
000000D9                      562  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      563  _r_csi01_interrupt@1:
000000D9                      564  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      565  	;***      262 : {
000000D9                      566  	;***      263 :     /* Start user code. Do not edit comment generated here */
000000D9                      567  	;***      264 :     /* End user code. Do not edit comment generated here */
000000D9                      568  	;***      265 : }
000000D9                      569  	;***      266 : 
000000D9                      570  	;***      267 : /***********************************************************************************************************************
000000D9                      571  	;***      268 : * Function Name: r_csi01_interrupt
000000D9                      572  	;***      269 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      573  	;***      270 : * Arguments    : None
000000D9                      574  	;***      271 : * Return Value : None
000000D9                      575  	;***      272 : ***********************************************************************************************************************/
000000D9                      576  	;***      273 : static void __near r_csi01_interrupt(void)
000000D9                      577  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 273
000000D9 C1                   578  	push ax
000000DA C3                   579  	push bc
000000DB C5                   580  	push de
000000DC C7                   581  	push hl
000000DD 8EFD                 582  	mov a, es
000000DF 70                   583  	mov x, a
000000E0 8EFC                 584  	mov a, cs
000000E2 C1                   585  	push ax
000000E3 C7                   586  	push hl
000000E4                      587  	;***      274 : {
000000E4                      588  	;***      275 :     volatile uint8_t err_type;
000000E4                      589  	;***      276 :     volatile uint8_t sio_dummy;
000000E4                      590  	;***      277 : 
000000E4                      591  	;***      278 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      592  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 278
000000E4 AF0201               593  	movw ax, !0x0102
000000E7 60                   594  	mov a, x
000000E8 5C01                 595  	and a, #0x01
000000EA 9800                 596  	mov [sp+0x00], a
000000EC                      597  	;***      279 :     SIR01 = (uint16_t)err_type;
000000EC                      598  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 279
000000EC 8800                 599  	mov a, [sp+0x00]
000000EE 318E                 600  	shrw ax, 8+0x00000
000000F0 BF0A01               601  	movw !0x010A, ax
000000F3                      602  	;***      280 : 
000000F3                      603  	;***      281 :     if (1U == err_type)
000000F3                      604  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 281
000000F3 8800                 605  	mov a, [sp+0x00]
000000F5 91                   606  	dec a
000000F6 DF00                 607  	bnz $.BB@LABEL@10_2
000000F8                      608  .BB@LABEL@10_1:	; if_then_bb
000000F8                      609  	;***      282 :     {
000000F8                      610  	;***      283 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      611  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 283
000000F8 8800                 612  	mov a, [sp+0x00]
000000FA FC000000             613  	call !!_r_csi01_callback_error@1
000000FE EF00                 614  	br $.BB@LABEL@10_15
00000100                      615  .BB@LABEL@10_2:	; if_else_bb
00000100                      616  	;***      284 :     }
00000100                      617  	;***      285 :     else
00000100                      618  	;***      286 :     {
00000100                      619  	;***      287 :         if (g_csi01_tx_count > 0U)
00000100                      620  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 287
00000100 AF0000               621  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   622  	clrw bc
00000104 43                   623  	cmpw ax, bc
00000105 DF00                 624  	bnz $.BB@LABEL@10_8
00000107                      625  .BB@LABEL@10_3:	; if_else_bb42
00000107                      626  	;***      288 :         {
00000107                      627  	;***      289 :             if (0U != gp_csi01_rx_address)
00000107                      628  	;***      290 :             {
00000107                      629  	;***      291 :                 *gp_csi01_rx_address = SIO01;
00000107                      630  	;***      292 :                 gp_csi01_rx_address++;
00000107                      631  	;***      293 :             }
00000107                      632  	;***      294 :             else
00000107                      633  	;***      295 :             {
00000107                      634  	;***      296 :                 sio_dummy = SIO01;
00000107                      635  	;***      297 :             }
00000107                      636  	;***      298 : 
00000107                      637  	;***      299 :             if (0U != gp_csi01_tx_address)
00000107                      638  	;***      300 :             {
00000107                      639  	;***      301 :                 SIO01 = *gp_csi01_tx_address;
00000107                      640  	;***      302 :                 gp_csi01_tx_address++;
00000107                      641  	;***      303 :             }
00000107                      642  	;***      304 :             else
00000107                      643  	;***      305 :             {
00000107                      644  	;***      306 :                 SIO01 = 0xFFU;
00000107                      645  	;***      307 :             }
00000107                      646  	;***      308 : 
00000107                      647  	;***      309 :             g_csi01_tx_count--;
00000107                      648  	;***      310 :         }
00000107                      649  	;***      311 :         else 
00000107                      650  	;***      312 :         {
00000107                      651  	;***      313 :             if (0U == g_csi01_tx_count)
00000107                      652  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 313
00000107 AF0000               653  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   654  	cmpw ax, bc
0000010B DF00                 655  	bnz $.BB@LABEL@10_7
0000010D                      656  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      657  	;***      314 :             {
0000010D                      658  	;***      315 :                 if (0U != gp_csi01_rx_address)
0000010D                      659  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 315
0000010D AF0000               660  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   661  	cmpw ax, bc
00000111 DF00                 662  	bnz $.BB@LABEL@10_6
00000113                      663  .BB@LABEL@10_5:	; if_else_bb55
00000113                      664  	;***      316 :                 {
00000113                      665  	;***      317 :                     *gp_csi01_rx_address = SIO01;
00000113                      666  	;***      318 :                 }
00000113                      667  	;***      319 :                 else
00000113                      668  	;***      320 :                 {
00000113                      669  	;***      321 :                     sio_dummy = SIO01;
00000113                      670  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 321
00000113 8D12                 671  	mov a, 0xFFF12
00000115 9801                 672  	mov [sp+0x01], a
00000117 EF00                 673  	br $.BB@LABEL@10_7
00000119                      674  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   675  	movw de, ax
0000011A                      676  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 317
0000011A 8D12                 677  	mov a, 0xFFF12
0000011C 99                   678  	mov [de], a
0000011D                      679  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      680  	;***      322 :                 }
0000011D                      681  	;***      323 :             }
0000011D                      682  	;***      324 : 
0000011D                      683  	;***      325 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      684  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 325
0000011D FC000000             685  	call !!_r_csi01_callback_sendend@1
00000121                      686  	;***      326 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      687  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 326
00000121 FC000000             688  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 689  	br $.BB@LABEL@10_15
00000127                      690  .BB@LABEL@10_8:	; if_then_bb16
00000127                      691  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 289
00000127 AF0000               692  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   693  	cmpw ax, bc
0000012B DF00                 694  	bnz $.BB@LABEL@10_10
0000012D                      695  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      696  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 296
0000012D 8D12                 697  	mov a, 0xFFF12
0000012F 9801                 698  	mov [sp+0x01], a
00000131 EF00                 699  	br $.BB@LABEL@10_11
00000133                      700  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   701  	movw de, ax
00000134                      702  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 291
00000134 8D12                 703  	mov a, 0xFFF12
00000136 99                   704  	mov [de], a
00000137                      705  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 292
00000137 A20000               706  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      707  .BB@LABEL@10_11:	; if_break_bb
0000013A                      708  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 299
0000013A AF0000               709  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   710  	cmpw ax, bc
0000013E DF00                 711  	bnz $.BB@LABEL@10_13
00000140                      712  .BB@LABEL@10_12:	; if_else_bb38
00000140                      713  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 306
00000140 CD12FF               714  	mov 0xFFF12, #0xFF
00000143 EF00                 715  	br $.BB@LABEL@10_14
00000145                      716  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   717  	movw de, ax
00000146                      718  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 301
00000146 89                   719  	mov a, [de]
00000147 9D12                 720  	mov 0xFFF12, a
00000149                      721  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 302
00000149 A5                   722  	incw de
0000014A 15                   723  	movw ax, de
0000014B BF0000               724  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      725  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      726  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 309
0000014E B20000               727  	decw !LOWW(_g_csi01_tx_count)
00000151                      728  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   729  	pop hl
00000152 C0                   730  	pop ax
00000153 9EFC                 731  	mov cs, a
00000155 60                   732  	mov a, x
00000156 9EFD                 733  	mov es, a
00000158 C6                   734  	pop hl
00000159 C4                   735  	pop de
0000015A C2                   736  	pop bc
0000015B C0                   737  	pop ax
0000015C                      738  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 329
0000015C 61FC                 739  	reti
00000029                      740  	.SECTION .textf,TEXTF
00000029                      741  _r_csi01_callback_receiveend@1:
00000029                      742  	.STACK _r_csi01_callback_receiveend@1 = 4
00000029                      743  	;***      327 :         }
00000029                      744  	;***      328 :     }
00000029                      745  	;***      329 : }
00000029                      746  	;***      330 : 
00000029                      747  	;***      331 : /***********************************************************************************************************************
00000029                      748  	;***      332 : * Function Name: r_csi01_callback_receiveend
00000029                      749  	;***      333 : * Description  : This function is a callback function when CSI01 finishes reception.
00000029                      750  	;***      334 : * Arguments    : None
00000029                      751  	;***      335 : * Return Value : None
00000029                      752  	;***      336 : ***********************************************************************************************************************/
00000029                      753  	;***      337 : static void r_csi01_callback_receiveend(void)
00000029                      754  	;***      338 : {
00000029                      755  	;***      339 :     /* Start user code. Do not edit comment generated here */
00000029                      756  	;***      340 : 	g_csi_rev_end++;
00000029                      757  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 340
00000029 A00000               758  	inc !LOWW(_g_csi_rev_end)
0000002C                      759  	;***      341 : 	R_CSI01_Stop();
0000002C                      760  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 341
0000002C EC000000             761  	br !!_R_CSI01_Stop
00000030                      762  _r_csi01_callback_error@1:
00000030                      763  	.STACK _r_csi01_callback_error@1 = 4
00000030                      764  	;***      342 :     /* End user code. Do not edit comment generated here */
00000030                      765  	;***      343 : }
00000030                      766  	;***      344 : 
00000030                      767  	;***      345 : /***********************************************************************************************************************
00000030                      768  	;***      346 : * Function Name: r_csi01_callback_error
00000030                      769  	;***      347 : * Description  : This function is a callback function when CSI01 reception error occurs.
00000030                      770  	;***      348 : * Arguments    : err_type -
00000030                      771  	;***      349 : *                    error type value
00000030                      772  	;***      350 : * Return Value : None
00000030                      773  	;***      351 : ***********************************************************************************************************************/
00000030                      774  	;***      352 : static void r_csi01_callback_error(uint8_t err_type)
00000030                      775  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 352
00000030 D7                   776  	ret
00000031                      777  _r_csi01_callback_sendend@1:
00000031                      778  	.STACK _r_csi01_callback_sendend@1 = 4
00000031                      779  	;***      353 : {
00000031                      780  	;***      354 :     /* Start user code. Do not edit comment generated here */
00000031                      781  	;***      355 : 
00000031                      782  	;***      356 :     /* End user code. Do not edit comment generated here */
00000031                      783  	;***      357 : }
00000031                      784  	;***      358 : 
00000031                      785  	;***      359 : /***********************************************************************************************************************
00000031                      786  	;***      360 : * Function Name: r_csi01_callback_sendend
00000031                      787  	;***      361 : * Description  : This function is a callback function when CSI01 finishes transmission.
00000031                      788  	;***      362 : * Arguments    : None
00000031                      789  	;***      363 : * Return Value : None
00000031                      790  	;***      364 : ***********************************************************************************************************************/
00000031                      791  	;***      365 : static void r_csi01_callback_sendend(void)
00000031                      792  	;***      366 : {
00000031                      793  	;***      367 :     /* Start user code. Do not edit comment generated here */
00000031                      794  	;***      368 : 	g_csi_send_end++;
00000031                      795  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 368
00000031 A00000               796  	inc !LOWW(_g_csi_send_end)
00000034 D7                   797  	ret
0000015E                      798  	.SECTION .text,TEXT
0000015E                      799  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      800  _r_uart2_interrupt_receive@1:
0000015E                      801  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      802  	;***      369 :     /* End user code. Do not edit comment generated here */
0000015E                      803  	;***      370 : }
0000015E                      804  	;***      371 : 
0000015E                      805  	;***      372 : /***********************************************************************************************************************
0000015E                      806  	;***      373 : * Function Name: r_uart2_interrupt_receive
0000015E                      807  	;***      374 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      808  	;***      375 : * Arguments    : None
0000015E                      809  	;***      376 : * Return Value : None
0000015E                      810  	;***      377 : ***********************************************************************************************************************/
0000015E                      811  	;***      378 : static void __near r_uart2_interrupt_receive(void)
0000015E                      812  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 378
0000015E C1                   813  	push ax
0000015F C3                   814  	push bc
00000160 C5                   815  	push de
00000161 C7                   816  	push hl
00000162 8EFD                 817  	mov a, es
00000164 70                   818  	mov x, a
00000165 8EFC                 819  	mov a, cs
00000167 C1                   820  	push ax
00000168 C7                   821  	push hl
00000169                      822  	;***      379 : {
00000169                      823  	;***      380 :     volatile uint8_t rx_data;
00000169                      824  	;***      381 :     volatile uint8_t err_type;
00000169                      825  	;***      382 :     
00000169                      826  	;***      383 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      827  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 383
00000169 AF4201               828  	movw ax, !0x0142
0000016C 60                   829  	mov a, x
0000016D 5C07                 830  	and a, #0x07
0000016F 9800                 831  	mov [sp+0x00], a
00000171                      832  	;***      384 :     SIR11 = (uint16_t)err_type;
00000171                      833  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 384
00000171 8800                 834  	mov a, [sp+0x00]
00000173 318E                 835  	shrw ax, 8+0x00000
00000175 BF4A01               836  	movw !0x014A, ax
00000178                      837  	;***      385 : 
00000178                      838  	;***      386 :     if (err_type != 0U)
00000178                      839  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 386
00000178 8800                 840  	mov a, [sp+0x00]
0000017A D1                   841  	cmp0 a
0000017B DD00                 842  	bz $.BB@LABEL@14_2
0000017D                      843  .BB@LABEL@14_1:	; if_then_bb
0000017D                      844  	;***      387 :     {
0000017D                      845  	;***      388 :         r_uart2_callback_error(err_type);
0000017D                      846  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 388
0000017D 8800                 847  	mov a, [sp+0x00]
0000017F FC000000             848  	call !!_r_uart2_callback_error@1
00000183                      849  .BB@LABEL@14_2:	; if_break_bb
00000183                      850  	;***      389 :     }
00000183                      851  	;***      390 :     
00000183                      852  	;***      391 :     rx_data = RXD2;
00000183                      853  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 391
00000183 8E4A                 854  	mov a, 0xFFF4A
00000185 9801                 855  	mov [sp+0x01], a
00000187                      856  	;***      392 : 
00000187                      857  	;***      393 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      858  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 393
00000187 AF0000               859  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               860  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 861  	mov a, [sp+0x01]
0000018F 61D300               862  	bnh $.BB@LABEL@14_6
00000192                      863  .BB@LABEL@14_3:	; if_then_bb18
00000192                      864  	;***      394 :     {
00000192                      865  	;***      395 :         *gp_uart2_rx_address = rx_data;
00000192                      866  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
00000192 EB0000               867  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   868  	mov [de], a
00000196                      869  	;***      396 :         gp_uart2_rx_address++;
00000196                      870  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 396
00000196 A20000               871  	incw !LOWW(_gp_uart2_rx_address)
00000199                      872  	;***      397 :         g_uart2_rx_count++;
00000199                      873  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
00000199 A20000               874  	incw !LOWW(_g_uart2_rx_count)
0000019C                      875  	;***      398 : 
0000019C                      876  	;***      399 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      877  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 399
0000019C AF0000               878  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               879  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 880  	sknz
000001A4                      881  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      882  	;***      400 :         {
000001A4                      883  	;***      401 :             r_uart2_callback_receiveend();
000001A4                      884  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 401
000001A4 FC000000             885  	call !!_r_uart2_callback_receiveend@1
000001A8                      886  .BB@LABEL@14_5:	; return
000001A8 C6                   887  	pop hl
000001A9 C0                   888  	pop ax
000001AA 9EFC                 889  	mov cs, a
000001AC 60                   890  	mov a, x
000001AD 9EFD                 891  	mov es, a
000001AF C6                   892  	pop hl
000001B0 C4                   893  	pop de
000001B1 C2                   894  	pop bc
000001B2 C0                   895  	pop ax
000001B3                      896  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 408
000001B3 61FC                 897  	reti
000001B5                      898  .BB@LABEL@14_6:	; if_else_bb
000001B5                      899  	;***      402 :         }
000001B5                      900  	;***      403 :     }
000001B5                      901  	;***      404 :     else
000001B5                      902  	;***      405 :     {
000001B5                      903  	;***      406 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      904  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 406
000001B5 318E                 905  	shrw ax, 8+0x00000
000001B7 FC000000             906  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 907  	br $.BB@LABEL@14_5
000001BD                      908  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      909  _r_uart2_interrupt_send@1:
000001BD                      910  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      911  	;***      407 :     }
000001BD                      912  	;***      408 : }
000001BD                      913  	;***      409 : 
000001BD                      914  	;***      410 : /***********************************************************************************************************************
000001BD                      915  	;***      411 : * Function Name: r_uart2_interrupt_send
000001BD                      916  	;***      412 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      917  	;***      413 : * Arguments    : None
000001BD                      918  	;***      414 : * Return Value : None
000001BD                      919  	;***      415 : ***********************************************************************************************************************/
000001BD                      920  	;***      416 : static void __near r_uart2_interrupt_send(void)
000001BD                      921  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 416
000001BD C1                   922  	push ax
000001BE C3                   923  	push bc
000001BF C5                   924  	push de
000001C0 C7                   925  	push hl
000001C1 8EFD                 926  	mov a, es
000001C3 70                   927  	mov x, a
000001C4 8EFC                 928  	mov a, cs
000001C6 C1                   929  	push ax
000001C7                      930  	;***      417 : {
000001C7                      931  	;***      418 :     if (g_uart2_tx_count > 0U)
000001C7                      932  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
000001C7 AF0000               933  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   934  	clrw bc
000001CB 43                   935  	cmpw ax, bc
000001CC DF00                 936  	bnz $.BB@LABEL@15_3
000001CE                      937  .BB@LABEL@15_1:	; if_else_bb
000001CE                      938  	;***      419 :     {
000001CE                      939  	;***      420 :         TXD2 = *gp_uart2_tx_address;
000001CE                      940  	;***      421 :         gp_uart2_tx_address++;
000001CE                      941  	;***      422 :         g_uart2_tx_count--;
000001CE                      942  	;***      423 :     }
000001CE                      943  	;***      424 :     else
000001CE                      944  	;***      425 :     {
000001CE                      945  	;***      426 :         r_uart2_callback_sendend();
000001CE                      946  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 426
000001CE FC000000             947  	call !!_r_uart2_callback_sendend@1
000001D2                      948  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   949  	pop ax
000001D3 9EFC                 950  	mov cs, a
000001D5 60                   951  	mov a, x
000001D6 9EFD                 952  	mov es, a
000001D8 C6                   953  	pop hl
000001D9 C4                   954  	pop de
000001DA C2                   955  	pop bc
000001DB C0                   956  	pop ax
000001DC                      957  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 428
000001DC 61FC                 958  	reti
000001DE                      959  .BB@LABEL@15_3:	; if_then_bb
000001DE                      960  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 420
000001DE EB0000               961  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   962  	mov a, [de]
000001E2 9E48                 963  	mov 0xFFF48, a
000001E4                      964  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
000001E4 A5                   965  	incw de
000001E5 15                   966  	movw ax, de
000001E6 BF0000               967  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      968  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 422
000001E9 B20000               969  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 970  	br $.BB@LABEL@15_2
00000035                      971  	.SECTION .textf,TEXTF
00000035                      972  _r_uart2_callback_receiveend@1:
00000035                      973  	.STACK _r_uart2_callback_receiveend@1 = 8
00000035                      974  	;***      427 :     }
00000035                      975  	;***      428 : }
00000035                      976  	;***      429 : 
00000035                      977  	;***      430 : /***********************************************************************************************************************
00000035                      978  	;***      431 : * Function Name: r_uart2_callback_receiveend
00000035                      979  	;***      432 : * Description  : This function is a callback function when UART2 finishes reception.
00000035                      980  	;***      433 : * Arguments    : None
00000035                      981  	;***      434 : * Return Value : None
00000035                      982  	;***      435 : ***********************************************************************************************************************/
00000035                      983  	;***      436 : static void r_uart2_callback_receiveend(void)
00000035                      984  	;***      437 : {
00000035                      985  	;***      438 :     /* Start user code. Do not edit comment generated here */
00000035                      986  	;***      439 : 
00000035                      987  	;***      440 : 	R_UART2_Receive(g_rx_data, 6);
00000035                      988  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 440
00000035 320600               989  	movw bc, #0x0006
00000038 300000               990  	movw ax, #LOWW(_g_rx_data)
0000003B FC000000             991  	call !!_R_UART2_Receive
0000003F                      992  	;***      441 : 	commnunication_flag.recived_time_setting_flag = commnunication_flag.recived_time_setting_flag == 1 ? 2: commnunication_flag.recived_time_setting_flag;
0000003F                      993  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
0000003F 40000001             994  	cmp !LOWW(_commnunication_flag+0x00004), #0x01
00000043 5102                 995  	mov a, #0x02
00000045 61E8                 996  	skz
00000047                      997  .BB@LABEL@16_1:	; bb5
00000047 8F0000               998  	mov a, !LOWW(_commnunication_flag+0x00004)
0000004A                      999  .BB@LABEL@16_2:	; bb8
0000004A 9F0000              1000  	mov !LOWW(_commnunication_flag+0x00004), a
0000004D                     1001  	;***      442 : 	commnunication_flag.recived_number_setting_flag = commnunication_flag.recived_number_setting_flag == 1 ? 2: commnunication_flag.recived_number_setting_flag;
0000004D                     1002  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
0000004D 40000001            1003  	cmp !LOWW(_commnunication_flag+0x00003), #0x01
00000051 5102                1004  	mov a, #0x02
00000053 61E8                1005  	skz
00000055                     1006  .BB@LABEL@16_3:	; bb16
00000055 8F0000              1007  	mov a, !LOWW(_commnunication_flag+0x00003)
00000058                     1008  .BB@LABEL@16_4:	; bb20
00000058 9F0000              1009  	mov !LOWW(_commnunication_flag+0x00003), a
0000005B                     1010  	;***      443 : 	if(isCommand(g_rx_data)){
0000005B                     1011  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
0000005B 300000              1012  	movw ax, #LOWW(_g_rx_data)
0000005E FE0000              1013  	call $!_isCommand
00000061 D1                  1014  	cmp0 a
00000062 DF00                1015  	bnz $.BB@LABEL@16_10
00000064                     1016  .BB@LABEL@16_5:	; if_else_bb197
00000064                     1017  	;***      444 : 		if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_TIME)){
00000064                     1018  	;***      445 : 			commnunication_flag.send_response_time_flag = 1;
00000064                     1019  	;***      446 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_TIME)){
00000064                     1020  	;***      447 : 			R_UART2_Receive(g_rx_data, timeSettingSize);
00000064                     1021  	;***      448 : 			commnunication_flag.recived_time_setting_flag = 1;
00000064                     1022  	;***      449 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_MACHINE_STATUS)){
00000064                     1023  	;***      450 : 			commnunication_flag.send_respone_status_flag = 1;
00000064                     1024  	;***      451 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_NUMBER)){
00000064                     1025  	;***      452 : 			commnunication_flag.send_response_number_flag = 1;
00000064                     1026  	;***      453 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_NUMBER)){
00000064                     1027  	;***      454 : 			R_UART2_Receive(g_rx_data, numberSettingSize);
00000064                     1028  	;***      455 : 			commnunication_flag.recived_number_setting_flag = 1;
00000064                     1029  	;***      456 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == WASHING_MODE)){
00000064                     1030  	;***      457 : 			commnunication_flag.send_response_mode_flag = 1;
00000064                     1031  	;***      458 : //			commnunication_flag.send_response_flag = 0;
00000064                     1032  	;***      459 : 		}else if((g_rx_data[0] == H_CLEAR)){
00000064                     1033  	;***      460 : 			commnunication_flag.alarm_clear_flag = g_rx_data[1];
00000064                     1034  	;***      461 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == NEXT_ANIMATION)){
00000064                     1035  	;***      462 : //			g_machine_state.waitAnimationRes = 0;
00000064                     1036  	;***      463 : 		}
00000064                     1037  	;***      464 : 		if(isThisCommand(g_rx_data, H_SET, WASHING_MODE, 0xff) != 0){
00000064                     1038  	;***      465 : 			g_machine_mode = g_rx_data[5];
00000064                     1039  	;***      466 : 		}
00000064                     1040  	;***      467 : 		if (isThisCommand(g_rx_data, H_SET, OK_USER, 0xff) != 0) {
00000064                     1041  	;***      468 : 			g_machine_state.user = 2;
00000064                     1042  	;***      469 : 		}
00000064                     1043  	;***      470 : 	}else if(commnunication_flag.recived_time_setting_flag != 0 || commnunication_flag.recived_number_setting_flag != 0){
00000064                     1044  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 470
00000064 D50000              1045  	cmp0 !LOWW(_commnunication_flag+0x00004)
00000067 DF00                1046  	bnz $.BB@LABEL@16_8
00000069                     1047  .BB@LABEL@16_6:	; bb202
00000069 D50000              1048  	cmp0 !LOWW(_commnunication_flag+0x00003)
0000006C DF00                1049  	bnz $.BB@LABEL@16_8
0000006E                     1050  .BB@LABEL@16_7:	; if_else_bb217
0000006E                     1051  	;***      471 : 		R_UART2_Receive(g_rx_data, 6);
0000006E                     1052  	;***      472 : 	}else{
0000006E                     1053  	;***      473 : 		g_uart2_fault = 1;
0000006E                     1054  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 473
0000006E E50000              1055  	oneb !LOWW(_g_uart2_fault)
00000071 EF00                1056  	br $.BB@LABEL@16_9
00000073                     1057  .BB@LABEL@16_8:	; if_then_bb215
00000073                     1058  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 471
00000073 320600              1059  	movw bc, #0x0006
00000076 300000              1060  	movw ax, #LOWW(_g_rx_data)
00000079 FC000000            1061  	call !!_R_UART2_Receive
0000007D                     1062  .BB@LABEL@16_9:	; if_then_bb215
0000007D EE0000              1063  	br $!.BB@LABEL@16_34
00000080                     1064  .BB@LABEL@16_10:	; if_then_bb
00000080                     1065  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
00000080 8F0000              1066  	mov a, !LOWW(_g_rx_data)
00000083 4C52                1067  	cmp a, #0x52
00000085 DF00                1068  	bnz $.BB@LABEL@16_13
00000087                     1069  .BB@LABEL@16_11:	; bb33
00000087 40000002            1070  	cmp !LOWW(_g_rx_data+0x00001), #0x02
0000008B DF00                1071  	bnz $.BB@LABEL@16_13
0000008D                     1072  .BB@LABEL@16_12:	; if_then_bb46
0000008D                     1073  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
0000008D E50000              1074  	oneb !LOWW(_commnunication_flag+0x00001)
00000090 EF00                1075  	br $.BB@LABEL@16_27
00000092                     1076  .BB@LABEL@16_13:	; if_else_bb
00000092                     1077  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
00000092 4C53                1078  	cmp a, #0x53
00000094 DF00                1079  	bnz $.BB@LABEL@16_16
00000096                     1080  .BB@LABEL@16_14:	; bb51
00000096 40000014            1081  	cmp !LOWW(_g_rx_data+0x00001), #0x14
0000009A DF00                1082  	bnz $.BB@LABEL@16_16
0000009C                     1083  .BB@LABEL@16_15:	; if_then_bb64
0000009C                     1084  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 447
0000009C 328D00              1085  	movw bc, #0x008D
0000009F 300000              1086  	movw ax, #LOWW(_g_rx_data)
000000A2 FC000000            1087  	call !!_R_UART2_Receive
000000A6                     1088  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 448
000000A6 E50000              1089  	oneb !LOWW(_commnunication_flag+0x00004)
000000A9 EF00                1090  	br $.BB@LABEL@16_30
000000AB                     1091  .BB@LABEL@16_16:	; if_else_bb69
000000AB                     1092  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
000000AB 4C52                1093  	cmp a, #0x52
000000AD DF00                1094  	bnz $.BB@LABEL@16_21
000000AF                     1095  .BB@LABEL@16_17:	; bb74
000000AF 40000017            1096  	cmp !LOWW(_g_rx_data+0x00001), #0x17
000000B3 DF00                1097  	bnz $.BB@LABEL@16_19
000000B5                     1098  .BB@LABEL@16_18:	; if_then_bb87
000000B5                     1099  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 450
000000B5 E50000              1100  	oneb !LOWW(_commnunication_flag+0x00005)
000000B8 EF00                1101  	br $.BB@LABEL@16_30
000000BA                     1102  .BB@LABEL@16_19:	; bb93
000000BA                     1103  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 451
000000BA 40000003            1104  	cmp !LOWW(_g_rx_data+0x00001), #0x03
000000BE DF00                1105  	bnz $.BB@LABEL@16_21
000000C0                     1106  .BB@LABEL@16_20:	; if_then_bb106
000000C0                     1107  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 452
000000C0 E50000              1108  	oneb !LOWW(_commnunication_flag+0x00002)
000000C3 EF00                1109  	br $.BB@LABEL@16_30
000000C5                     1110  .BB@LABEL@16_21:	; if_else_bb107
000000C5                     1111  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 453
000000C5 4C53                1112  	cmp a, #0x53
000000C7 DF00                1113  	bnz $.BB@LABEL@16_24
000000C9                     1114  .BB@LABEL@16_22:	; bb112
000000C9 40000015            1115  	cmp !LOWW(_g_rx_data+0x00001), #0x15
000000CD DF00                1116  	bnz $.BB@LABEL@16_24
000000CF                     1117  .BB@LABEL@16_23:	; if_then_bb125
000000CF                     1118  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 454
000000CF 322500              1119  	movw bc, #0x0025
000000D2 300000              1120  	movw ax, #LOWW(_g_rx_data)
000000D5 FC000000            1121  	call !!_R_UART2_Receive
000000D9                     1122  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
000000D9 E50000              1123  	oneb !LOWW(_commnunication_flag+0x00003)
000000DC EF00                1124  	br $.BB@LABEL@16_30
000000DE                     1125  .BB@LABEL@16_24:	; if_else_bb129
000000DE                     1126  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 456
000000DE 4C52                1127  	cmp a, #0x52
000000E0 DF00                1128  	bnz $.BB@LABEL@16_28
000000E2                     1129  .BB@LABEL@16_25:	; bb134
000000E2 40000018            1130  	cmp !LOWW(_g_rx_data+0x00001), #0x18
000000E6 DF00                1131  	bnz $.BB@LABEL@16_28
000000E8                     1132  .BB@LABEL@16_26:	; if_then_bb147
000000E8                     1133  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 457
000000E8 E50000              1134  	oneb !LOWW(_commnunication_flag+0x00006)
000000EB                     1135  .BB@LABEL@16_27:	; if_then_bb147
000000EB EF00                1136  	br $.BB@LABEL@16_30
000000ED                     1137  .BB@LABEL@16_28:	; if_else_bb148
000000ED                     1138  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 459
000000ED 4C43                1139  	cmp a, #0x43
000000EF DF00                1140  	bnz $.BB@LABEL@16_30
000000F1                     1141  .BB@LABEL@16_29:	; if_then_bb154
000000F1                     1142  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 460
000000F1 8F0000              1143  	mov a, !LOWW(_g_rx_data+0x00001)
000000F4 9F0000              1144  	mov !LOWW(_commnunication_flag+0x00007), a
000000F7                     1145  .BB@LABEL@16_30:	; if_break_bb181
000000F7 F6                  1146  	clrw ax
000000F8                     1147  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 464
000000F8 C1                  1148  	push ax
000000F9 50FF                1149  	mov x, #0xFF
000000FB C1                  1150  	push ax
000000FC 325318              1151  	movw bc, #0x1853
000000FF 300000              1152  	movw ax, #LOWW(_g_rx_data)
00000102 FC000000            1153  	call !!_isThisCommand
00000106 1004                1154  	addw sp, #0x04
00000108 D1                  1155  	cmp0 a
00000109 DD00                1156  	bz $.BB@LABEL@16_32
0000010B                     1157  .BB@LABEL@16_31:	; if_then_bb187
0000010B                     1158  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 465
0000010B 8F0000              1159  	mov a, !LOWW(_g_rx_data+0x00005)
0000010E 9F0000              1160  	mov !LOWW(_g_machine_mode), a
00000111                     1161  .BB@LABEL@16_32:	; if_break_bb189
00000111 F6                  1162  	clrw ax
00000112                     1163  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 467
00000112 C1                  1164  	push ax
00000113 50FF                1165  	mov x, #0xFF
00000115 C1                  1166  	push ax
00000116 325301              1167  	movw bc, #0x0153
00000119 300000              1168  	movw ax, #LOWW(_g_rx_data)
0000011C FC000000            1169  	call !!_isThisCommand
00000120 1004                1170  	addw sp, #0x04
00000122 D1                  1171  	cmp0 a
00000123 61E8                1172  	skz
00000125                     1173  .BB@LABEL@16_33:	; if_then_bb195
00000125                     1174  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 468
00000125 CF000002            1175  	mov !LOWW(_g_machine_state+0x00009), #0x02
00000129                     1176  .BB@LABEL@16_34:	; if_break_bb219
00000129                     1177  	;***      474 : 	}
00000129                     1178  	;***      475 : 	g_uart2_receive++;
00000129                     1179  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 475
00000129 A00000              1180  	inc !LOWW(_g_uart2_receive)
0000012C D7                  1181  	ret
0000012D                     1182  _r_uart2_callback_softwareoverrun@1:
0000012D                     1183  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
0000012D                     1184  	;***      476 : 
0000012D                     1185  	;***      477 :     /* End user code. Do not edit comment generated here */
0000012D                     1186  	;***      478 : }
0000012D                     1187  	;***      479 : 
0000012D                     1188  	;***      480 : /***********************************************************************************************************************
0000012D                     1189  	;***      481 : * Function Name: r_uart2_callback_softwareoverrun
0000012D                     1190  	;***      482 : * Description  : This function is a callback function when UART2 receives an overflow data.
0000012D                     1191  	;***      483 : * Arguments    : rx_data -
0000012D                     1192  	;***      484 : *                    receive data
0000012D                     1193  	;***      485 : * Return Value : None
0000012D                     1194  	;***      486 : ***********************************************************************************************************************/
0000012D                     1195  	;***      487 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
0000012D                     1196  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 487
0000012D D7                  1197  	ret
0000012E                     1198  _r_uart2_callback_sendend@1:
0000012E                     1199  	.STACK _r_uart2_callback_sendend@1 = 4
0000012E                     1200  	;***      488 : {
0000012E                     1201  	;***      489 :     /* Start user code. Do not edit comment generated here */
0000012E                     1202  	;***      490 :     /* End user code. Do not edit comment generated here */
0000012E                     1203  	;***      491 : }
0000012E                     1204  	;***      492 : 
0000012E                     1205  	;***      493 : /***********************************************************************************************************************
0000012E                     1206  	;***      494 : * Function Name: r_uart2_callback_sendend
0000012E                     1207  	;***      495 : * Description  : This function is a callback function when UART2 finishes transmission.
0000012E                     1208  	;***      496 : * Arguments    : None
0000012E                     1209  	;***      497 : * Return Value : None
0000012E                     1210  	;***      498 : ***********************************************************************************************************************/
0000012E                     1211  	;***      499 : static void r_uart2_callback_sendend(void)
0000012E                     1212  	;***      500 : {
0000012E                     1213  	;***      501 :     /* Start user code. Do not edit comment generated here */
0000012E                     1214  	;***      502 : 	g_uart2_sendend++;
0000012E                     1215  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 502
0000012E A00000              1216  	inc !LOWW(_g_uart2_sendend)
00000131 D7                  1217  	ret
00000132                     1218  _r_uart2_callback_error@1:
00000132                     1219  	.STACK _r_uart2_callback_error@1 = 4
00000132                     1220  	;***      503 :     /* End user code. Do not edit comment generated here */
00000132                     1221  	;***      504 : }
00000132                     1222  	;***      505 : 
00000132                     1223  	;***      506 : /***********************************************************************************************************************
00000132                     1224  	;***      507 : * Function Name: r_uart2_callback_error
00000132                     1225  	;***      508 : * Description  : This function is a callback function when UART2 reception error occurs.
00000132                     1226  	;***      509 : * Arguments    : err_type -
00000132                     1227  	;***      510 : *                    error type value
00000132                     1228  	;***      511 : * Return Value : None
00000132                     1229  	;***      512 : ***********************************************************************************************************************/
00000132                     1230  	;***      513 : static void r_uart2_callback_error(uint8_t err_type)
00000132                     1231  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 513
00000132 D7                  1232  	ret
000001EE                     1233  	.SECTION .text,TEXT
000001EE                     1234  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1235  _r_uart3_interrupt_receive@1:
000001EE                     1236  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1237  	;***      514 : {
000001EE                     1238  	;***      515 :     /* Start user code. Do not edit comment generated here */
000001EE                     1239  	;***      516 :     /* End user code. Do not edit comment generated here */
000001EE                     1240  	;***      517 : }
000001EE                     1241  	;***      518 : 
000001EE                     1242  	;***      519 : /***********************************************************************************************************************
000001EE                     1243  	;***      520 : * Function Name: r_uart3_interrupt_receive
000001EE                     1244  	;***      521 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1245  	;***      522 : * Arguments    : None
000001EE                     1246  	;***      523 : * Return Value : None
000001EE                     1247  	;***      524 : ***********************************************************************************************************************/
000001EE                     1248  	;***      525 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1249  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 525
000001EE C1                  1250  	push ax
000001EF C3                  1251  	push bc
000001F0 C5                  1252  	push de
000001F1 C7                  1253  	push hl
000001F2 8EFD                1254  	mov a, es
000001F4 70                  1255  	mov x, a
000001F5 8EFC                1256  	mov a, cs
000001F7 C1                  1257  	push ax
000001F8 C7                  1258  	push hl
000001F9                     1259  	;***      526 : {
000001F9                     1260  	;***      527 :     volatile uint8_t rx_data;
000001F9                     1261  	;***      528 :     volatile uint8_t err_type;
000001F9                     1262  	;***      529 :     
000001F9                     1263  	;***      530 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1264  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 530
000001F9 AF4601              1265  	movw ax, !0x0146
000001FC 60                  1266  	mov a, x
000001FD 5C07                1267  	and a, #0x07
000001FF 9800                1268  	mov [sp+0x00], a
00000201                     1269  	;***      531 :     SIR13 = (uint16_t)err_type;
00000201                     1270  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 531
00000201 8800                1271  	mov a, [sp+0x00]
00000203 318E                1272  	shrw ax, 8+0x00000
00000205 BF4E01              1273  	movw !0x014E, ax
00000208                     1274  	;***      532 : 
00000208                     1275  	;***      533 :     if (err_type != 0U)
00000208                     1276  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 533
00000208 8800                1277  	mov a, [sp+0x00]
0000020A D1                  1278  	cmp0 a
0000020B DD00                1279  	bz $.BB@LABEL@20_2
0000020D                     1280  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1281  	;***      534 :     {
0000020D                     1282  	;***      535 :         r_uart3_callback_error(err_type);
0000020D                     1283  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 535
0000020D 8800                1284  	mov a, [sp+0x00]
0000020F FC000000            1285  	call !!_r_uart3_callback_error@1
00000213                     1286  .BB@LABEL@20_2:	; if_break_bb
00000213                     1287  	;***      536 :     }
00000213                     1288  	;***      537 :     
00000213                     1289  	;***      538 :     rx_data = RXD3;
00000213                     1290  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 538
00000213 8D16                1291  	mov a, 0xFFF16
00000215 9801                1292  	mov [sp+0x01], a
00000217                     1293  	;***      539 : 
00000217                     1294  	;***      540 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1295  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 540
00000217 AF0000              1296  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1297  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1298  	mov a, [sp+0x01]
0000021F 61D300              1299  	bnh $.BB@LABEL@20_6
00000222                     1300  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1301  	;***      541 :     {
00000222                     1302  	;***      542 :         *gp_uart3_rx_address = rx_data;
00000222                     1303  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 542
00000222 EB0000              1304  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1305  	mov [de], a
00000226                     1306  	;***      543 :         gp_uart3_rx_address++;
00000226                     1307  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 543
00000226 A20000              1308  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1309  	;***      544 :         g_uart3_rx_count++;
00000229                     1310  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000229 A20000              1311  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1312  	;***      545 : 
0000022C                     1313  	;***      546 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1314  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 546
0000022C AF0000              1315  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1316  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1317  	sknz
00000234                     1318  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1319  	;***      547 :         {
00000234                     1320  	;***      548 :             r_uart3_callback_receiveend();
00000234                     1321  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 548
00000234 FC000000            1322  	call !!_r_uart3_callback_receiveend@1
00000238                     1323  .BB@LABEL@20_5:	; return
00000238 C6                  1324  	pop hl
00000239 C0                  1325  	pop ax
0000023A 9EFC                1326  	mov cs, a
0000023C 60                  1327  	mov a, x
0000023D 9EFD                1328  	mov es, a
0000023F C6                  1329  	pop hl
00000240 C4                  1330  	pop de
00000241 C2                  1331  	pop bc
00000242 C0                  1332  	pop ax
00000243                     1333  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 555
00000243 61FC                1334  	reti
00000245                     1335  .BB@LABEL@20_6:	; if_else_bb
00000245                     1336  	;***      549 :         }
00000245                     1337  	;***      550 :     }
00000245                     1338  	;***      551 :     else
00000245                     1339  	;***      552 :     {
00000245                     1340  	;***      553 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1341  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 553
00000245 318E                1342  	shrw ax, 8+0x00000
00000247 FC000000            1343  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1344  	br $.BB@LABEL@20_5
0000024D                     1345  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1346  _r_uart3_interrupt_send@1:
0000024D                     1347  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1348  	;***      554 :     }
0000024D                     1349  	;***      555 : }
0000024D                     1350  	;***      556 : 
0000024D                     1351  	;***      557 : /***********************************************************************************************************************
0000024D                     1352  	;***      558 : * Function Name: r_uart3_interrupt_send
0000024D                     1353  	;***      559 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1354  	;***      560 : * Arguments    : None
0000024D                     1355  	;***      561 : * Return Value : None
0000024D                     1356  	;***      562 : ***********************************************************************************************************************/
0000024D                     1357  	;***      563 : static void __near r_uart3_interrupt_send(void)
0000024D                     1358  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 563
0000024D C1                  1359  	push ax
0000024E C3                  1360  	push bc
0000024F C5                  1361  	push de
00000250 C7                  1362  	push hl
00000251 8EFD                1363  	mov a, es
00000253 70                  1364  	mov x, a
00000254 8EFC                1365  	mov a, cs
00000256 C1                  1366  	push ax
00000257                     1367  	;***      564 : {
00000257                     1368  	;***      565 :     if (g_uart3_tx_count > 0U)
00000257                     1369  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 565
00000257 AF0000              1370  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1371  	clrw bc
0000025B 43                  1372  	cmpw ax, bc
0000025C DF00                1373  	bnz $.BB@LABEL@21_3
0000025E                     1374  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1375  	;***      566 :     {
0000025E                     1376  	;***      567 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1377  	;***      568 :         gp_uart3_tx_address++;
0000025E                     1378  	;***      569 :         g_uart3_tx_count--;
0000025E                     1379  	;***      570 :     }
0000025E                     1380  	;***      571 :     else
0000025E                     1381  	;***      572 :     {
0000025E                     1382  	;***      573 :         r_uart3_callback_sendend();
0000025E                     1383  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 573
0000025E FC000000            1384  	call !!_r_uart3_callback_sendend@1
00000262                     1385  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1386  	pop ax
00000263 9EFC                1387  	mov cs, a
00000265 60                  1388  	mov a, x
00000266 9EFD                1389  	mov es, a
00000268 C6                  1390  	pop hl
00000269 C4                  1391  	pop de
0000026A C2                  1392  	pop bc
0000026B C0                  1393  	pop ax
0000026C                     1394  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 575
0000026C 61FC                1395  	reti
0000026E                     1396  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1397  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 567
0000026E EB0000              1398  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1399  	mov a, [de]
00000272 9D14                1400  	mov 0xFFF14, a
00000274                     1401  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 568
00000274 A5                  1402  	incw de
00000275 15                  1403  	movw ax, de
00000276 BF0000              1404  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1405  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 569
00000279 B20000              1406  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1407  	br $.BB@LABEL@21_2
00000133                     1408  	.SECTION .textf,TEXTF
00000133                     1409  _r_uart3_callback_receiveend@1:
00000133                     1410  	.STACK _r_uart3_callback_receiveend@1 = 4
00000133                     1411  	;***      574 :     }
00000133                     1412  	;***      575 : }
00000133                     1413  	;***      576 : 
00000133                     1414  	;***      577 : /***********************************************************************************************************************
00000133                     1415  	;***      578 : * Function Name: r_uart3_callback_receiveend
00000133                     1416  	;***      579 : * Description  : This function is a callback function when UART3 finishes reception.
00000133                     1417  	;***      580 : * Arguments    : None
00000133                     1418  	;***      581 : * Return Value : None
00000133                     1419  	;***      582 : ***********************************************************************************************************************/
00000133                     1420  	;***      583 : static void r_uart3_callback_receiveend(void)
00000133                     1421  	;***      584 : {
00000133                     1422  	;***      585 :     /* Start user code. Do not edit comment generated here */
00000133                     1423  	;***      586 : 	R_UART3_Receive(g_uart3_rx_data, 7);
00000133                     1424  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 586
00000133 320700              1425  	movw bc, #0x0007
00000136 300000              1426  	movw ax, #LOWW(_g_uart3_rx_data)
00000139 FC000000            1427  	call !!_R_UART3_Receive
0000013D                     1428  	;***      587 : 	if(g_uart3_rx_data[0] == 1){
0000013D                     1429  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 587
0000013D 8F0000              1430  	mov a, !LOWW(_g_uart3_rx_data)
00000140 4C01                1431  	cmp a, #0x01
00000142 DF00                1432  	bnz $.BB@LABEL@22_7
00000144                     1433  .BB@LABEL@22_1:	; if_then_bb
00000144                     1434  	;***      588 : 		//Read timer setting
00000144                     1435  	;***      589 : 		if((rs485_rx_p[0] == H_READ) && (rs485_rx_p[1] == READ_TIME)){
00000144                     1436  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 589
00000144 40000052            1437  	cmp !LOWW(_g_uart3_rx_data+0x00001), #0x52
00000148 DF00                1438  	bnz $.BB@LABEL@22_6
0000014A                     1439  .BB@LABEL@22_2:	; bb
0000014A 40000002            1440  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x02
0000014E DF00                1441  	bnz $.BB@LABEL@22_4
00000150                     1442  .BB@LABEL@22_3:	; if_then_bb25
00000150                     1443  	;***      590 : 			commnunication_flag.rs485_send_to_watersolfner_response_flag = 1;
00000150                     1444  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 590
00000150 E50000              1445  	oneb !LOWW(_commnunication_flag+0x00008)
00000153 D7                  1446  	ret
00000154                     1447  .BB@LABEL@22_4:	; bb32
00000154                     1448  	;***      591 : 		}else if((rs485_rx_p[0] == 82) && (rs485_rx_p[1] == 24)){
00000154                     1449  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 591
00000154 40000018            1450  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x18
00000158 61F8                1451  	sknz
0000015A                     1452  .BB@LABEL@22_5:	; if_then_bb47
0000015A                     1453  	;***      592 : 			commnunication_flag.rs485_send_to_watersolfner_SV1_flag = 1;
0000015A                     1454  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 592
0000015A E50000              1455  	oneb !LOWW(_commnunication_flag+0x00009)
0000015D                     1456  .BB@LABEL@22_6:	; if_else_bb.if_else_bb48_crit_edge.critedge
0000015D                     1457  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 609
0000015D D7                  1458  	ret
0000015E                     1459  .BB@LABEL@22_7:	; if_else_bb97
0000015E                     1460  	;***      593 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 70)){
0000015E                     1461  	;***      594 : 			//TODO: Start Water Softener
0000015E                     1462  	;***      595 : 
0000015E                     1463  	;***      596 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 80)){
0000015E                     1464  	;***      597 : 			//TODO: Stop Water Softener + Time of SNP ON (4 bytes)
0000015E                     1465  	;***      598 : 		}
0000015E                     1466  	;***      599 : 	}else if(g_uart3_rx_data[0] == 2){
0000015E                     1467  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 599
0000015E 4C02                1468  	cmp a, #0x02
00000160 DF00                1469  	bnz $.BB@LABEL@22_12
00000162                     1470  .BB@LABEL@22_8:	; if_then_bb103
00000162                     1471  	;***      600 : 		if((rs485_rx_p[0] == 11)){
00000162                     1472  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 600
00000162 8F0000              1473  	mov a, !LOWW(_g_uart3_rx_data+0x00001)
00000165 4C0B                1474  	cmp a, #0x0B
00000167 DF00                1475  	bnz $.BB@LABEL@22_10
00000169                     1476  .BB@LABEL@22_9:	; if_then_bb111
00000169                     1477  	;***      601 : 			commnunication_flag.rs485_send_to_valve_response_flag = 1;
00000169                     1478  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 601
00000169 E50000              1479  	oneb !LOWW(_commnunication_flag+0x0000A)
0000016C D7                  1480  	ret
0000016D                     1481  .BB@LABEL@22_10:	; if_else_bb112
0000016D                     1482  	;***      602 : 		}else if((rs485_rx_p[0] == 12)){
0000016D                     1483  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 602
0000016D 4C0C                1484  	cmp a, #0x0C
0000016F DF00                1485  	bnz $.BB@LABEL@22_14
00000171                     1486  .BB@LABEL@22_11:	; if_then_bb120
00000171                     1487  	;***      603 : 			commnunication_flag.rs485_get_valve_gesture_flag = 1;
00000171                     1488  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
00000171 E50000              1489  	oneb !LOWW(_commnunication_flag+0x0000B)
00000174 D7                  1490  	ret
00000175                     1491  .BB@LABEL@22_12:	; if_else_bb123
00000175                     1492  	;***      604 : 		}
00000175                     1493  	;***      605 : 	}else if(g_uart3_rx_data[0] != 0xff){
00000175                     1494  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 605
00000175 81                  1495  	inc a
00000176 61E8                1496  	skz
00000178                     1497  .BB@LABEL@22_13:	; if_then_bb129
00000178                     1498  	;***      606 : 		commnunication_flag.rs485_fault = 1;
00000178                     1499  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 606
00000178 E50000              1500  	oneb !LOWW(_commnunication_flag+0x0000C)
0000017B                     1501  .BB@LABEL@22_14:	; return
0000017B                     1502  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 609
0000017B D7                  1503  	ret
0000017C                     1504  _r_uart3_callback_softwareoverrun@1:
0000017C                     1505  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
0000017C                     1506  	;***      607 : 	}
0000017C                     1507  	;***      608 :     /* End user code. Do not edit comment generated here */
0000017C                     1508  	;***      609 : }
0000017C                     1509  	;***      610 : 
0000017C                     1510  	;***      611 : /***********************************************************************************************************************
0000017C                     1511  	;***      612 : * Function Name: r_uart3_callback_softwareoverrun
0000017C                     1512  	;***      613 : * Description  : This function is a callback function when UART3 receives an overflow data.
0000017C                     1513  	;***      614 : * Arguments    : rx_data -
0000017C                     1514  	;***      615 : *                    receive data
0000017C                     1515  	;***      616 : * Return Value : None
0000017C                     1516  	;***      617 : ***********************************************************************************************************************/
0000017C                     1517  	;***      618 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
0000017C                     1518  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 618
0000017C D7                  1519  	ret
0000017D                     1520  _r_uart3_callback_sendend@1:
0000017D                     1521  	.STACK _r_uart3_callback_sendend@1 = 4
0000017D                     1522  	;***      619 : {
0000017D                     1523  	;***      620 :     /* Start user code. Do not edit comment generated here */
0000017D                     1524  	;***      621 :     /* End user code. Do not edit comment generated here */
0000017D                     1525  	;***      622 : }
0000017D                     1526  	;***      623 : 
0000017D                     1527  	;***      624 : /***********************************************************************************************************************
0000017D                     1528  	;***      625 : * Function Name: r_uart3_callback_sendend
0000017D                     1529  	;***      626 : * Description  : This function is a callback function when UART3 finishes transmission.
0000017D                     1530  	;***      627 : * Arguments    : None
0000017D                     1531  	;***      628 : * Return Value : None
0000017D                     1532  	;***      629 : ***********************************************************************************************************************/
0000017D                     1533  	;***      630 : static void r_uart3_callback_sendend(void)
0000017D                     1534  	;***      631 : {
0000017D                     1535  	;***      632 :     /* Start user code. Do not edit comment generated here */
0000017D                     1536  	;***      633 : 	g_uart3_sendend++;
0000017D                     1537  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 633
0000017D A00000              1538  	inc !LOWW(_g_uart3_sendend)
00000180                     1539  	;***      634 : 	O_RS485_MODE_PIN = 0U;
00000180                     1540  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 634
00000180 710300              1541  	clr1 0xFFF00.0
00000183 D7                  1542  	ret
00000184                     1543  _r_uart3_callback_error@1:
00000184                     1544  	.STACK _r_uart3_callback_error@1 = 4
00000184                     1545  	;***      635 :     /* End user code. Do not edit comment generated here */
00000184                     1546  	;***      636 : }
00000184                     1547  	;***      637 : 
00000184                     1548  	;***      638 : /***********************************************************************************************************************
00000184                     1549  	;***      639 : * Function Name: r_uart3_callback_error
00000184                     1550  	;***      640 : * Description  : This function is a callback function when UART3 reception error occurs.
00000184                     1551  	;***      641 : * Arguments    : err_type -
00000184                     1552  	;***      642 : *                    error type value
00000184                     1553  	;***      643 : * Return Value : None
00000184                     1554  	;***      644 : ***********************************************************************************************************************/
00000184                     1555  	;***      645 : static void r_uart3_callback_error(uint8_t err_type)
00000184                     1556  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 645
00000184 D7                  1557  	ret
00000185                     1558  	;***      646 : {
00000185                     1559  	;***      647 :     /* Start user code. Do not edit comment generated here */
00000185                     1560  	;***      648 :     /* End user code. Do not edit comment generated here */
00000185                     1561  	;***      649 : }
00000185                     1562  	;***      650 : 
00000185                     1563  	;***      651 : /* Start user code for adding. Do not edit comment generated here */
00000185                     1564  	;***      652 : /* End user code. Do not edit comment generated here */
00000000                     1565  	.SECTION .bss,BSS
00000000                     1566  _g_uart3_rx_data:
00000000                     1567  	.DS (8)
00000008                     1568  _send_response_flag:
00000008                     1569  	.DS (1)
00000009                     1570  _send_response_time_flag:
00000009                     1571  	.DS (1)
0000000A                     1572  _send_response_number_flag:
0000000A                     1573  	.DS (1)
0000000B                     1574  _recived_time_setting_flag:
0000000B                     1575  	.DS (1)
0000000C                     1576  _send_respone_status_flag:
0000000C                     1577  	.DS (1)
0000000D                     1578  _recived_number_setting_flag:
0000000D                     1579  	.DS (1)
0000000E                     1580  _commnunication_flag:
0000000E                     1581  	.DS (13)
0000001B                     1582  _g_csi_count:
0000001B                     1583  	.DS (1)
0000001C                     1584  _g_csi_err:
0000001C                     1585  	.DS (1)
0000001D                     1586  _g_csi_send_end:
0000001D                     1587  	.DS (1)
0000001E                     1588  _g_csi_rev_end:
0000001E                     1589  	.DS (1)
0000001F                     1590  _g_uart1_send:
0000001F                     1591  	.DS (1)
00000020                     1592  _g_uart2_sendend:
00000020                     1593  	.DS (1)
00000021                     1594  _g_uart2_receive:
00000021                     1595  	.DS (1)
00000022                     1596  _g_rx_data:
00000022                     1597  	.DS (160)
000000C2                     1598  _g_uart2_fault:
000000C2                     1599  	.DS (1)
000000C3                     1600  _g_uart3_sendend:
000000C3                     1601  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               389 (00000185) .textf
BSS                 196 (000000C4) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

