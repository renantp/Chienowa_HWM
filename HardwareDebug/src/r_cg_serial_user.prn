RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1223251604/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Tue Aug 23 10:01:01 2022
00000000                       19  
00000000                       20  	.PUBLIC _g_uart3_rx_data
00000000                       21  	.EXTERN _gp_uart1_tx_address
00000000                       22  	.EXTERN _g_uart1_tx_count
00000000                       23  	.EXTERN _gp_uart1_rx_address
00000000                       24  	.EXTERN _g_uart1_rx_count
00000000                       25  	.EXTERN _g_uart1_rx_length
00000000                       26  	.EXTERN _gp_csi00_tx_address
00000000                       27  	.EXTERN _g_csi00_tx_count
00000000                       28  	.EXTERN _gp_csi01_rx_address
00000000                       29  	.EXTERN _gp_csi01_tx_address
00000000                       30  	.EXTERN _g_csi01_tx_count
00000000                       31  	.EXTERN _gp_uart2_tx_address
00000000                       32  	.EXTERN _g_uart2_tx_count
00000000                       33  	.EXTERN _gp_uart2_rx_address
00000000                       34  	.EXTERN _g_uart2_rx_count
00000000                       35  	.EXTERN _g_uart2_rx_length
00000000                       36  	.EXTERN _gp_uart3_tx_address
00000000                       37  	.EXTERN _g_uart3_tx_count
00000000                       38  	.EXTERN _gp_uart3_rx_address
00000000                       39  	.EXTERN _g_uart3_rx_count
00000000                       40  	.EXTERN _g_uart3_rx_length
00000000                       41  	.PUBLIC _send_response_flag
00000000                       42  	.PUBLIC _send_response_time_flag
00000000                       43  	.PUBLIC _send_response_number_flag
00000000                       44  	.PUBLIC _recived_time_setting_flag
00000000                       45  	.PUBLIC _send_respone_status_flag
00000000                       46  	.PUBLIC _recived_number_setting_flag
00000000                       47  	.PUBLIC _g_commnunication_flag
00000000                       48  	.PUBLIC _g_csi_count
00000000                       49  	.PUBLIC _g_csi_err
00000000                       50  	.PUBLIC _g_csi_send_end
00000000                       51  	.PUBLIC _g_csi_rev_end
00000000                       52  	.PUBLIC _g_uart1_send
00000000                       53  	.PUBLIC _g_uart2_sendend
00000000                       54  	.PUBLIC _g_uart2_receive
00000000                       55  	.PUBLIC _g_rx_data
00000000                       56  	.PUBLIC _g_uart2_fault
00000000                       57  	.PUBLIC _g_uart3_sendend
00000000                       58  	.EXTERN _R_CSI01_Stop
00000000                       59  	.EXTERN _Raspberry_uart2_handle
00000000                       60  	.EXTERN _R_UART3_Receive
00000000                       61  
00000000                       62  	.SECTION .text,TEXT
00000000                       63  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                       64  _r_uart1_interrupt_receive@1:
00000000                       65  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                       66  	;***        1 : /***********************************************************************************************************************
00000000                       67  	;***        2 : * DISCLAIMER
00000000                       68  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       69  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       70  	;***        5 : * applicable laws, including copyright laws. 
00000000                       71  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       72  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       73  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       74  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       75  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       76  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       77  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       78  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       79  	;***       14 : * following link:
00000000                       80  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       81  	;***       16 : *
00000000                       82  	;***       17 : * Copyright (C) 2011, 2021 Renesas Electronics Corporation. All rights reserved.
00000000                       83  	;***       18 : ***********************************************************************************************************************/
00000000                       84  	;***       19 : 
00000000                       85  	;***       20 : /***********************************************************************************************************************
00000000                       86  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       87  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.06.02 [08 Nov 2021]
00000000                       88  	;***       23 : * Device(s)    : R5F104ML
00000000                       89  	;***       24 : * Tool-Chain   : CCRL
00000000                       90  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       91  	;***       26 : * Creation Date: 8/23/2022
00000000                       92  	;***       27 : ***********************************************************************************************************************/
00000000                       93  	;***       28 : 
00000000                       94  	;***       29 : /***********************************************************************************************************************
00000000                       95  	;***       30 : Includes
00000000                       96  	;***       31 : ***********************************************************************************************************************/
00000000                       97  	;***       32 : #include "r_cg_macrodriver.h"
00000000                       98  	;***       33 : #include "r_cg_serial.h"
00000000                       99  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                      100  	;***       35 : #include "r_cg_wdt.h"
00000000                      101  	;***       36 : #include "r_cg_userdefine.h"
00000000                      102  	;***       37 : /* End user code. Do not edit comment generated here */
00000000                      103  	;***       38 : #include "r_cg_userdefine.h"
00000000                      104  	;***       39 : 
00000000                      105  	;***       40 : /***********************************************************************************************************************
00000000                      106  	;***       41 : Pragma directive
00000000                      107  	;***       42 : ***********************************************************************************************************************/
00000000                      108  	;***       43 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      109  	;***       44 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      110  	;***       45 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      111  	;***       46 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      112  	;***       47 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      113  	;***       48 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      114  	;***       49 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      115  	;***       50 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      116  	;***       51 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      117  	;***       52 : /* End user code. Do not edit comment generated here */
00000000                      118  	;***       53 : 
00000000                      119  	;***       54 : /***********************************************************************************************************************
00000000                      120  	;***       55 : Global variables and functions
00000000                      121  	;***       56 : ***********************************************************************************************************************/
00000000                      122  	;***       57 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      123  	;***       58 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      124  	;***       59 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      125  	;***       60 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      126  	;***       61 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      127  	;***       62 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      128  	;***       63 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      129  	;***       64 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      130  	;***       65 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      131  	;***       66 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      132  	;***       67 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      133  	;***       68 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      134  	;***       69 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      135  	;***       70 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      136  	;***       71 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      137  	;***       72 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      138  	;***       73 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      139  	;***       74 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      140  	;***       75 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      141  	;***       76 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      142  	;***       77 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      143  	;***       78 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      144  	;***       79 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      145  	;***       80 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      146  	;***       81 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      147  	;***       82 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      148  	;***       83 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      149  	;***       84 : /* Start user code for global. Do not edit comment generated here */
00000000                      150  	;***       85 : volatile uint8_t send_response_flag, send_response_time_flag,
00000000                      151  	;***       86 : 		send_response_number_flag, recived_time_setting_flag,
00000000                      152  	;***       87 : 		send_respone_status_flag, recived_number_setting_flag;
00000000                      153  	;***       88 : volatile struct Communicaition_flag_s g_commnunication_flag;
00000000                      154  	;***       89 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end,
00000000                      155  	;***       90 : 		g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      156  	;***       91 : uint8_t g_rx_data[4 * 40];
00000000                      157  	;***       92 : uint8_t g_uart3_rx_data[8];
00000000                      158  	;***       93 : volatile uint8_t g_uart2_fault;
00000000                      159  	;***       94 : volatile uint8_t g_uart3_sendend;
00000000                      160  	;***       95 : 
00000000                      161  	;***       96 : /* End user code. Do not edit comment generated here */
00000000                      162  	;***       97 : 
00000000                      163  	;***       98 : /***********************************************************************************************************************
00000000                      164  	;***       99 : * Function Name: r_uart1_interrupt_receive
00000000                      165  	;***      100 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      166  	;***      101 : * Arguments    : None
00000000                      167  	;***      102 : * Return Value : None
00000000                      168  	;***      103 : ***********************************************************************************************************************/
00000000                      169  	;***      104 : static void __near r_uart1_interrupt_receive(void)
00000000                      170  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 104
00000000 C1                   171  	push ax
00000001 C3                   172  	push bc
00000002 C5                   173  	push de
00000003 C7                   174  	push hl
00000004 8EFD                 175  	mov a, es
00000006 70                   176  	mov x, a
00000007 8EFC                 177  	mov a, cs
00000009 C1                   178  	push ax
0000000A C7                   179  	push hl
0000000B                      180  	;***      105 : {
0000000B                      181  	;***      106 :     volatile uint8_t rx_data;
0000000B                      182  	;***      107 :     volatile uint8_t err_type;
0000000B                      183  	;***      108 :     
0000000B                      184  	;***      109 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      185  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 109
0000000B AF0601               186  	movw ax, !0x0106
0000000E 60                   187  	mov a, x
0000000F 5C07                 188  	and a, #0x07
00000011 9800                 189  	mov [sp+0x00], a
00000013                      190  	;***      110 :     SIR03 = (uint16_t)err_type;
00000013                      191  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 110
00000013 8800                 192  	mov a, [sp+0x00]
00000015 318E                 193  	shrw ax, 8+0x00000
00000017 BF0E01               194  	movw !0x010E, ax
0000001A                      195  	;***      111 : 
0000001A                      196  	;***      112 :     if (err_type != 0U)
0000001A                      197  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 112
0000001A 8800                 198  	mov a, [sp+0x00]
0000001C D1                   199  	cmp0 a
0000001D DD00                 200  	bz $.BB@LABEL@1_2
0000001F                      201  .BB@LABEL@1_1:	; if_then_bb
0000001F                      202  	;***      113 :     {
0000001F                      203  	;***      114 :         r_uart1_callback_error(err_type);
0000001F                      204  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 114
0000001F 8800                 205  	mov a, [sp+0x00]
00000021 FC000000             206  	call !!_r_uart1_callback_error@1
00000025                      207  .BB@LABEL@1_2:	; if_break_bb
00000025                      208  	;***      115 :     }
00000025                      209  	;***      116 :     
00000025                      210  	;***      117 :     rx_data = RXD1;
00000025                      211  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 117
00000025 8E46                 212  	mov a, 0xFFF46
00000027 9801                 213  	mov [sp+0x01], a
00000029                      214  	;***      118 : 
00000029                      215  	;***      119 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      216  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 119
00000029 AF0000               217  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               218  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 219  	mov a, [sp+0x01]
00000031 61D300               220  	bnh $.BB@LABEL@1_6
00000034                      221  .BB@LABEL@1_3:	; if_then_bb18
00000034                      222  	;***      120 :     {
00000034                      223  	;***      121 :         *gp_uart1_rx_address = rx_data;
00000034                      224  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 121
00000034 EB0000               225  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   226  	mov [de], a
00000038                      227  	;***      122 :         gp_uart1_rx_address++;
00000038                      228  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 122
00000038 A20000               229  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      230  	;***      123 :         g_uart1_rx_count++;
0000003B                      231  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 123
0000003B A20000               232  	incw !LOWW(_g_uart1_rx_count)
0000003E                      233  	;***      124 : 
0000003E                      234  	;***      125 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      235  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 125
0000003E AF0000               236  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               237  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 238  	sknz
00000046                      239  .BB@LABEL@1_4:	; if_then_bb30
00000046                      240  	;***      126 :         {
00000046                      241  	;***      127 :             r_uart1_callback_receiveend();
00000046                      242  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 127
00000046 FC000000             243  	call !!_r_uart1_callback_receiveend@1
0000004A                      244  .BB@LABEL@1_5:	; return
0000004A C6                   245  	pop hl
0000004B C0                   246  	pop ax
0000004C 9EFC                 247  	mov cs, a
0000004E 60                   248  	mov a, x
0000004F 9EFD                 249  	mov es, a
00000051 C6                   250  	pop hl
00000052 C4                   251  	pop de
00000053 C2                   252  	pop bc
00000054 C0                   253  	pop ax
00000055                      254  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 134
00000055 61FC                 255  	reti
00000057                      256  .BB@LABEL@1_6:	; if_else_bb
00000057                      257  	;***      128 :         }
00000057                      258  	;***      129 :     }
00000057                      259  	;***      130 :     else
00000057                      260  	;***      131 :     {
00000057                      261  	;***      132 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      262  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 132
00000057 318E                 263  	shrw ax, 8+0x00000
00000059 FC000000             264  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 265  	br $.BB@LABEL@1_5
0000005F                      266  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      267  _r_uart1_interrupt_send@1:
0000005F                      268  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      269  	;***      133 :     }
0000005F                      270  	;***      134 : }
0000005F                      271  	;***      135 : 
0000005F                      272  	;***      136 : /***********************************************************************************************************************
0000005F                      273  	;***      137 : * Function Name: r_uart1_interrupt_send
0000005F                      274  	;***      138 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      275  	;***      139 : * Arguments    : None
0000005F                      276  	;***      140 : * Return Value : None
0000005F                      277  	;***      141 : ***********************************************************************************************************************/
0000005F                      278  	;***      142 : static void __near r_uart1_interrupt_send(void)
0000005F                      279  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 142
0000005F C1                   280  	push ax
00000060 C3                   281  	push bc
00000061 C5                   282  	push de
00000062 C7                   283  	push hl
00000063 8EFD                 284  	mov a, es
00000065 70                   285  	mov x, a
00000066 8EFC                 286  	mov a, cs
00000068 C1                   287  	push ax
00000069                      288  	;***      143 : {
00000069                      289  	;***      144 :     if (g_uart1_tx_count > 0U)
00000069                      290  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
00000069 AF0000               291  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   292  	clrw bc
0000006D 43                   293  	cmpw ax, bc
0000006E DF00                 294  	bnz $.BB@LABEL@2_3
00000070                      295  .BB@LABEL@2_1:	; if_else_bb
00000070                      296  	;***      145 :     {
00000070                      297  	;***      146 :         TXD1 = *gp_uart1_tx_address;
00000070                      298  	;***      147 :         gp_uart1_tx_address++;
00000070                      299  	;***      148 :         g_uart1_tx_count--;
00000070                      300  	;***      149 :     }
00000070                      301  	;***      150 :     else
00000070                      302  	;***      151 :     {
00000070                      303  	;***      152 :         r_uart1_callback_sendend();
00000070                      304  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 152
00000070 FC000000             305  	call !!_r_uart1_callback_sendend@1
00000074                      306  .BB@LABEL@2_2:	; if_else_bb
00000074 C0                   307  	pop ax
00000075 9EFC                 308  	mov cs, a
00000077 60                   309  	mov a, x
00000078 9EFD                 310  	mov es, a
0000007A C6                   311  	pop hl
0000007B C4                   312  	pop de
0000007C C2                   313  	pop bc
0000007D C0                   314  	pop ax
0000007E                      315  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 154
0000007E 61FC                 316  	reti
00000080                      317  .BB@LABEL@2_3:	; if_then_bb
00000080                      318  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 146
00000080 EB0000               319  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   320  	mov a, [de]
00000084 9E44                 321  	mov 0xFFF44, a
00000086                      322  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 147
00000086 A5                   323  	incw de
00000087 15                   324  	movw ax, de
00000088 BF0000               325  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      326  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 148
0000008B B20000               327  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 328  	br $.BB@LABEL@2_2
00000000                      329  	.SECTION .textf,TEXTF
00000000                      330  _r_uart1_callback_receiveend@1:
00000000                      331  	.STACK _r_uart1_callback_receiveend@1 = 4
00000000                      332  	;***      153 :     }
00000000                      333  	;***      154 : }
00000000                      334  	;***      155 : 
00000000                      335  	;***      156 : /***********************************************************************************************************************
00000000                      336  	;***      157 : * Function Name: r_uart1_callback_receiveend
00000000                      337  	;***      158 : * Description  : This function is a callback function when UART1 finishes reception.
00000000                      338  	;***      159 : * Arguments    : None
00000000                      339  	;***      160 : * Return Value : None
00000000                      340  	;***      161 : ***********************************************************************************************************************/
00000000                      341  	;***      162 : static void r_uart1_callback_receiveend(void)
00000000                      342  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 162
00000000 D7                   343  	ret
00000001                      344  _r_uart1_callback_softwareoverrun@1:
00000001                      345  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000001                      346  	;***      163 : {
00000001                      347  	;***      164 :     /* Start user code. Do not edit comment generated here */
00000001                      348  	;***      165 : 	/* End user code. Do not edit comment generated here */
00000001                      349  	;***      166 : }
00000001                      350  	;***      167 : 
00000001                      351  	;***      168 : /***********************************************************************************************************************
00000001                      352  	;***      169 : * Function Name: r_uart1_callback_softwareoverrun
00000001                      353  	;***      170 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000001                      354  	;***      171 : * Arguments    : rx_data -
00000001                      355  	;***      172 : *                    receive data
00000001                      356  	;***      173 : * Return Value : None
00000001                      357  	;***      174 : ***********************************************************************************************************************/
00000001                      358  	;***      175 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000001                      359  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 175
00000001 D7                   360  	ret
00000002                      361  _r_uart1_callback_sendend@1:
00000002                      362  	.STACK _r_uart1_callback_sendend@1 = 4
00000002                      363  	;***      176 : {
00000002                      364  	;***      177 :     /* Start user code. Do not edit comment generated here */
00000002                      365  	;***      178 : 	/* End user code. Do not edit comment generated here */
00000002                      366  	;***      179 : }
00000002                      367  	;***      180 : 
00000002                      368  	;***      181 : /***********************************************************************************************************************
00000002                      369  	;***      182 : * Function Name: r_uart1_callback_sendend
00000002                      370  	;***      183 : * Description  : This function is a callback function when UART1 finishes transmission.
00000002                      371  	;***      184 : * Arguments    : None
00000002                      372  	;***      185 : * Return Value : None
00000002                      373  	;***      186 : ***********************************************************************************************************************/
00000002                      374  	;***      187 : static void r_uart1_callback_sendend(void)
00000002                      375  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 187
00000002 D7                   376  	ret
00000003                      377  _r_uart1_callback_error@1:
00000003                      378  	.STACK _r_uart1_callback_error@1 = 4
00000003                      379  	;***      188 : {
00000003                      380  	;***      189 :     /* Start user code. Do not edit comment generated here */
00000003                      381  	;***      190 : 	/* End user code. Do not edit comment generated here */
00000003                      382  	;***      191 : }
00000003                      383  	;***      192 : 
00000003                      384  	;***      193 : /***********************************************************************************************************************
00000003                      385  	;***      194 : * Function Name: r_uart1_callback_error
00000003                      386  	;***      195 : * Description  : This function is a callback function when UART1 reception error occurs.
00000003                      387  	;***      196 : * Arguments    : err_type -
00000003                      388  	;***      197 : *                    error type value
00000003                      389  	;***      198 : * Return Value : None
00000003                      390  	;***      199 : ***********************************************************************************************************************/
00000003                      391  	;***      200 : static void r_uart1_callback_error(uint8_t err_type)
00000003                      392  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 200
00000003 D7                   393  	ret
00000090                      394  	.SECTION .text,TEXT
00000090                      395  _r_csi00_interrupt@1	.vector 0x001E
00000090                      396  _r_csi00_interrupt@1:
00000090                      397  	.STACK _r_csi00_interrupt@1 = 16
00000090                      398  	;***      201 : {
00000090                      399  	;***      202 :     /* Start user code. Do not edit comment generated here */
00000090                      400  	;***      203 : 	/* End user code. Do not edit comment generated here */
00000090                      401  	;***      204 : }
00000090                      402  	;***      205 : 
00000090                      403  	;***      206 : /***********************************************************************************************************************
00000090                      404  	;***      207 : * Function Name: r_csi00_interrupt
00000090                      405  	;***      208 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      406  	;***      209 : * Arguments    : None
00000090                      407  	;***      210 : * Return Value : None
00000090                      408  	;***      211 : ***********************************************************************************************************************/
00000090                      409  	;***      212 : static void __near r_csi00_interrupt(void)
00000090                      410  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 212
00000090 C1                   411  	push ax
00000091 C3                   412  	push bc
00000092 C5                   413  	push de
00000093 C7                   414  	push hl
00000094 8EFD                 415  	mov a, es
00000096 70                   416  	mov x, a
00000097 8EFC                 417  	mov a, cs
00000099 C1                   418  	push ax
0000009A C7                   419  	push hl
0000009B                      420  	;***      213 : {
0000009B                      421  	;***      214 :     volatile uint8_t err_type;
0000009B                      422  	;***      215 : 
0000009B                      423  	;***      216 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      424  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 216
0000009B AF0001               425  	movw ax, !0x0100
0000009E 60                   426  	mov a, x
0000009F 5C01                 427  	and a, #0x01
000000A1 9800                 428  	mov [sp+0x00], a
000000A3                      429  	;***      217 :     SIR00 = (uint16_t)err_type;
000000A3                      430  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 217
000000A3 8800                 431  	mov a, [sp+0x00]
000000A5 318E                 432  	shrw ax, 8+0x00000
000000A7 BF0801               433  	movw !0x0108, ax
000000AA                      434  	;***      218 : 
000000AA                      435  	;***      219 :     if (err_type != 1U)
000000AA                      436  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 219
000000AA 8800                 437  	mov a, [sp+0x00]
000000AC 91                   438  	dec a
000000AD DF00                 439  	bnz $.BB@LABEL@7_2
000000AF                      440  .BB@LABEL@7_1:	; return
000000AF C6                   441  	pop hl
000000B0 C0                   442  	pop ax
000000B1 9EFC                 443  	mov cs, a
000000B3 60                   444  	mov a, x
000000B4 9EFD                 445  	mov es, a
000000B6 C6                   446  	pop hl
000000B7 C4                   447  	pop de
000000B8 C2                   448  	pop bc
000000B9 C0                   449  	pop ax
000000BA                      450  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 232
000000BA 61FC                 451  	reti
000000BC                      452  .BB@LABEL@7_2:	; if_then_bb
000000BC                      453  	;***      220 :     {
000000BC                      454  	;***      221 :         if (g_csi00_tx_count > 0U)
000000BC                      455  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 221
000000BC AF0000               456  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   457  	clrw bc
000000C0 43                   458  	cmpw ax, bc
000000C1 DF00                 459  	bnz $.BB@LABEL@7_4
000000C3                      460  .BB@LABEL@7_3:	; if_else_bb
000000C3                      461  	;***      222 :         {
000000C3                      462  	;***      223 :             SIO00 = *gp_csi00_tx_address;
000000C3                      463  	;***      224 :             gp_csi00_tx_address++;
000000C3                      464  	;***      225 :             g_csi00_tx_count--;
000000C3                      465  	;***      226 :         }
000000C3                      466  	;***      227 :         else
000000C3                      467  	;***      228 :         {
000000C3                      468  	;***      229 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      469  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 229
000000C3 FC000000             470  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 471  	br $.BB@LABEL@7_1
000000C9                      472  .BB@LABEL@7_4:	; if_then_bb14
000000C9                      473  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 223
000000C9 EB0000               474  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   475  	mov a, [de]
000000CD 9D10                 476  	mov 0xFFF10, a
000000CF                      477  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 224
000000CF A5                   478  	incw de
000000D0 15                   479  	movw ax, de
000000D1 BF0000               480  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      481  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 225
000000D4 B20000               482  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 483  	br $.BB@LABEL@7_1
00000004                      484  	.SECTION .textf,TEXTF
00000004                      485  _r_csi00_callback_sendend@1:
00000004                      486  	.STACK _r_csi00_callback_sendend@1 = 4
00000004                      487  	;***      230 :         }
00000004                      488  	;***      231 :     }
00000004                      489  	;***      232 : }
00000004                      490  	;***      233 : 
00000004                      491  	;***      234 : /***********************************************************************************************************************
00000004                      492  	;***      235 : * Function Name: r_csi00_callback_sendend
00000004                      493  	;***      236 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000004                      494  	;***      237 : * Arguments    : None
00000004                      495  	;***      238 : * Return Value : None
00000004                      496  	;***      239 : ***********************************************************************************************************************/
00000004                      497  	;***      240 : static void r_csi00_callback_sendend(void)
00000004                      498  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 240
00000004 D7                   499  	ret
000000D9                      500  	.SECTION .text,TEXT
000000D9                      501  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      502  _r_csi01_interrupt@1:
000000D9                      503  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      504  	;***      241 : {
000000D9                      505  	;***      242 :     /* Start user code. Do not edit comment generated here */
000000D9                      506  	;***      243 : 	/* End user code. Do not edit comment generated here */
000000D9                      507  	;***      244 : }
000000D9                      508  	;***      245 : 
000000D9                      509  	;***      246 : /***********************************************************************************************************************
000000D9                      510  	;***      247 : * Function Name: r_csi01_interrupt
000000D9                      511  	;***      248 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      512  	;***      249 : * Arguments    : None
000000D9                      513  	;***      250 : * Return Value : None
000000D9                      514  	;***      251 : ***********************************************************************************************************************/
000000D9                      515  	;***      252 : static void __near r_csi01_interrupt(void)
000000D9                      516  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 252
000000D9 C1                   517  	push ax
000000DA C3                   518  	push bc
000000DB C5                   519  	push de
000000DC C7                   520  	push hl
000000DD 8EFD                 521  	mov a, es
000000DF 70                   522  	mov x, a
000000E0 8EFC                 523  	mov a, cs
000000E2 C1                   524  	push ax
000000E3 C7                   525  	push hl
000000E4                      526  	;***      253 : {
000000E4                      527  	;***      254 :     volatile uint8_t err_type;
000000E4                      528  	;***      255 :     volatile uint8_t sio_dummy;
000000E4                      529  	;***      256 : 
000000E4                      530  	;***      257 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      531  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 257
000000E4 AF0201               532  	movw ax, !0x0102
000000E7 60                   533  	mov a, x
000000E8 5C01                 534  	and a, #0x01
000000EA 9800                 535  	mov [sp+0x00], a
000000EC                      536  	;***      258 :     SIR01 = (uint16_t)err_type;
000000EC                      537  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 258
000000EC 8800                 538  	mov a, [sp+0x00]
000000EE 318E                 539  	shrw ax, 8+0x00000
000000F0 BF0A01               540  	movw !0x010A, ax
000000F3                      541  	;***      259 : 
000000F3                      542  	;***      260 :     if (1U == err_type)
000000F3                      543  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 260
000000F3 8800                 544  	mov a, [sp+0x00]
000000F5 91                   545  	dec a
000000F6 DF00                 546  	bnz $.BB@LABEL@9_2
000000F8                      547  .BB@LABEL@9_1:	; if_then_bb
000000F8                      548  	;***      261 :     {
000000F8                      549  	;***      262 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      550  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 262
000000F8 8800                 551  	mov a, [sp+0x00]
000000FA FC000000             552  	call !!_r_csi01_callback_error@1
000000FE EF00                 553  	br $.BB@LABEL@9_15
00000100                      554  .BB@LABEL@9_2:	; if_else_bb
00000100                      555  	;***      263 :     }
00000100                      556  	;***      264 :     else
00000100                      557  	;***      265 :     {
00000100                      558  	;***      266 :         if (g_csi01_tx_count > 0U)
00000100                      559  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 266
00000100 AF0000               560  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   561  	clrw bc
00000104 43                   562  	cmpw ax, bc
00000105 DF00                 563  	bnz $.BB@LABEL@9_8
00000107                      564  .BB@LABEL@9_3:	; if_else_bb42
00000107                      565  	;***      267 :         {
00000107                      566  	;***      268 :             if (0U != gp_csi01_rx_address)
00000107                      567  	;***      269 :             {
00000107                      568  	;***      270 :                 *gp_csi01_rx_address = SIO01;
00000107                      569  	;***      271 :                 gp_csi01_rx_address++;
00000107                      570  	;***      272 :             }
00000107                      571  	;***      273 :             else
00000107                      572  	;***      274 :             {
00000107                      573  	;***      275 :                 sio_dummy = SIO01;
00000107                      574  	;***      276 :             }
00000107                      575  	;***      277 : 
00000107                      576  	;***      278 :             if (0U != gp_csi01_tx_address)
00000107                      577  	;***      279 :             {
00000107                      578  	;***      280 :                 SIO01 = *gp_csi01_tx_address;
00000107                      579  	;***      281 :                 gp_csi01_tx_address++;
00000107                      580  	;***      282 :             }
00000107                      581  	;***      283 :             else
00000107                      582  	;***      284 :             {
00000107                      583  	;***      285 :                 SIO01 = 0xFFU;
00000107                      584  	;***      286 :             }
00000107                      585  	;***      287 : 
00000107                      586  	;***      288 :             g_csi01_tx_count--;
00000107                      587  	;***      289 :         }
00000107                      588  	;***      290 :         else 
00000107                      589  	;***      291 :         {
00000107                      590  	;***      292 :             if (0U == g_csi01_tx_count)
00000107                      591  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 292
00000107 AF0000               592  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   593  	cmpw ax, bc
0000010B DF00                 594  	bnz $.BB@LABEL@9_7
0000010D                      595  .BB@LABEL@9_4:	; if_then_bb47
0000010D                      596  	;***      293 :             {
0000010D                      597  	;***      294 :                 if (0U != gp_csi01_rx_address)
0000010D                      598  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 294
0000010D AF0000               599  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   600  	cmpw ax, bc
00000111 DF00                 601  	bnz $.BB@LABEL@9_6
00000113                      602  .BB@LABEL@9_5:	; if_else_bb55
00000113                      603  	;***      295 :                 {
00000113                      604  	;***      296 :                     *gp_csi01_rx_address = SIO01;
00000113                      605  	;***      297 :                 }
00000113                      606  	;***      298 :                 else
00000113                      607  	;***      299 :                 {
00000113                      608  	;***      300 :                     sio_dummy = SIO01;
00000113                      609  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 300
00000113 8D12                 610  	mov a, 0xFFF12
00000115 9801                 611  	mov [sp+0x01], a
00000117 EF00                 612  	br $.BB@LABEL@9_7
00000119                      613  .BB@LABEL@9_6:	; if_then_bb52
00000119 14                   614  	movw de, ax
0000011A                      615  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 296
0000011A 8D12                 616  	mov a, 0xFFF12
0000011C 99                   617  	mov [de], a
0000011D                      618  .BB@LABEL@9_7:	; if_break_bb59
0000011D                      619  	;***      301 :                 }
0000011D                      620  	;***      302 :             }
0000011D                      621  	;***      303 : 
0000011D                      622  	;***      304 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      623  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 304
0000011D FC000000             624  	call !!_r_csi01_callback_sendend@1
00000121                      625  	;***      305 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      626  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 305
00000121 FC000000             627  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 628  	br $.BB@LABEL@9_15
00000127                      629  .BB@LABEL@9_8:	; if_then_bb16
00000127                      630  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 268
00000127 AF0000               631  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   632  	cmpw ax, bc
0000012B DF00                 633  	bnz $.BB@LABEL@9_10
0000012D                      634  .BB@LABEL@9_9:	; if_else_bb26
0000012D                      635  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 275
0000012D 8D12                 636  	mov a, 0xFFF12
0000012F 9801                 637  	mov [sp+0x01], a
00000131 EF00                 638  	br $.BB@LABEL@9_11
00000133                      639  .BB@LABEL@9_10:	; if_then_bb21
00000133 14                   640  	movw de, ax
00000134                      641  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 270
00000134 8D12                 642  	mov a, 0xFFF12
00000136 99                   643  	mov [de], a
00000137                      644  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 271
00000137 A20000               645  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      646  .BB@LABEL@9_11:	; if_break_bb
0000013A                      647  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 278
0000013A AF0000               648  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   649  	cmpw ax, bc
0000013E DF00                 650  	bnz $.BB@LABEL@9_13
00000140                      651  .BB@LABEL@9_12:	; if_else_bb38
00000140                      652  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 285
00000140 CD12FF               653  	mov 0xFFF12, #0xFF
00000143 EF00                 654  	br $.BB@LABEL@9_14
00000145                      655  .BB@LABEL@9_13:	; if_then_bb32
00000145 14                   656  	movw de, ax
00000146                      657  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 280
00000146 89                   658  	mov a, [de]
00000147 9D12                 659  	mov 0xFFF12, a
00000149                      660  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 281
00000149 A5                   661  	incw de
0000014A 15                   662  	movw ax, de
0000014B BF0000               663  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      664  .BB@LABEL@9_14:	; if_break_bb39
0000014E                      665  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 288
0000014E B20000               666  	decw !LOWW(_g_csi01_tx_count)
00000151                      667  .BB@LABEL@9_15:	; if_break_bb39
00000151 C6                   668  	pop hl
00000152 C0                   669  	pop ax
00000153 9EFC                 670  	mov cs, a
00000155 60                   671  	mov a, x
00000156 9EFD                 672  	mov es, a
00000158 C6                   673  	pop hl
00000159 C4                   674  	pop de
0000015A C2                   675  	pop bc
0000015B C0                   676  	pop ax
0000015C                      677  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 308
0000015C 61FC                 678  	reti
00000005                      679  	.SECTION .textf,TEXTF
00000005                      680  _r_csi01_callback_receiveend@1:
00000005                      681  	.STACK _r_csi01_callback_receiveend@1 = 4
00000005                      682  	;***      306 :         }
00000005                      683  	;***      307 :     }
00000005                      684  	;***      308 : }
00000005                      685  	;***      309 : 
00000005                      686  	;***      310 : /***********************************************************************************************************************
00000005                      687  	;***      311 : * Function Name: r_csi01_callback_receiveend
00000005                      688  	;***      312 : * Description  : This function is a callback function when CSI01 finishes reception.
00000005                      689  	;***      313 : * Arguments    : None
00000005                      690  	;***      314 : * Return Value : None
00000005                      691  	;***      315 : ***********************************************************************************************************************/
00000005                      692  	;***      316 : static void r_csi01_callback_receiveend(void)
00000005                      693  	;***      317 : {
00000005                      694  	;***      318 :     /* Start user code. Do not edit comment generated here */
00000005                      695  	;***      319 : 	g_csi_rev_end++;
00000005                      696  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 319
00000005 A00000               697  	inc !LOWW(_g_csi_rev_end)
00000008                      698  	;***      320 : 	R_CSI01_Stop();
00000008                      699  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 320
00000008 EC000000             700  	br !!_R_CSI01_Stop
0000000C                      701  _r_csi01_callback_error@1:
0000000C                      702  	.STACK _r_csi01_callback_error@1 = 4
0000000C                      703  	;***      321 : 	/* End user code. Do not edit comment generated here */
0000000C                      704  	;***      322 : }
0000000C                      705  	;***      323 : 
0000000C                      706  	;***      324 : /***********************************************************************************************************************
0000000C                      707  	;***      325 : * Function Name: r_csi01_callback_error
0000000C                      708  	;***      326 : * Description  : This function is a callback function when CSI01 reception error occurs.
0000000C                      709  	;***      327 : * Arguments    : err_type -
0000000C                      710  	;***      328 : *                    error type value
0000000C                      711  	;***      329 : * Return Value : None
0000000C                      712  	;***      330 : ***********************************************************************************************************************/
0000000C                      713  	;***      331 : static void r_csi01_callback_error(uint8_t err_type)
0000000C                      714  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 331
0000000C D7                   715  	ret
0000000D                      716  _r_csi01_callback_sendend@1:
0000000D                      717  	.STACK _r_csi01_callback_sendend@1 = 4
0000000D                      718  	;***      332 : {
0000000D                      719  	;***      333 :     /* Start user code. Do not edit comment generated here */
0000000D                      720  	;***      334 : 
0000000D                      721  	;***      335 : 	/* End user code. Do not edit comment generated here */
0000000D                      722  	;***      336 : }
0000000D                      723  	;***      337 : 
0000000D                      724  	;***      338 : /***********************************************************************************************************************
0000000D                      725  	;***      339 : * Function Name: r_csi01_callback_sendend
0000000D                      726  	;***      340 : * Description  : This function is a callback function when CSI01 finishes transmission.
0000000D                      727  	;***      341 : * Arguments    : None
0000000D                      728  	;***      342 : * Return Value : None
0000000D                      729  	;***      343 : ***********************************************************************************************************************/
0000000D                      730  	;***      344 : static void r_csi01_callback_sendend(void)
0000000D                      731  	;***      345 : {
0000000D                      732  	;***      346 :     /* Start user code. Do not edit comment generated here */
0000000D                      733  	;***      347 : 	g_csi_send_end++;
0000000D                      734  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 347
0000000D A00000               735  	inc !LOWW(_g_csi_send_end)
00000010 D7                   736  	ret
0000015E                      737  	.SECTION .text,TEXT
0000015E                      738  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      739  _r_uart2_interrupt_receive@1:
0000015E                      740  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      741  	;***      348 : 	/* End user code. Do not edit comment generated here */
0000015E                      742  	;***      349 : }
0000015E                      743  	;***      350 : 
0000015E                      744  	;***      351 : /***********************************************************************************************************************
0000015E                      745  	;***      352 : * Function Name: r_uart2_interrupt_receive
0000015E                      746  	;***      353 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      747  	;***      354 : * Arguments    : None
0000015E                      748  	;***      355 : * Return Value : None
0000015E                      749  	;***      356 : ***********************************************************************************************************************/
0000015E                      750  	;***      357 : static void __near r_uart2_interrupt_receive(void)
0000015E                      751  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 357
0000015E C1                   752  	push ax
0000015F C3                   753  	push bc
00000160 C5                   754  	push de
00000161 C7                   755  	push hl
00000162 8EFD                 756  	mov a, es
00000164 70                   757  	mov x, a
00000165 8EFC                 758  	mov a, cs
00000167 C1                   759  	push ax
00000168 C7                   760  	push hl
00000169                      761  	;***      358 : {
00000169                      762  	;***      359 :     volatile uint8_t rx_data;
00000169                      763  	;***      360 :     volatile uint8_t err_type;
00000169                      764  	;***      361 :     
00000169                      765  	;***      362 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      766  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 362
00000169 AF4201               767  	movw ax, !0x0142
0000016C 60                   768  	mov a, x
0000016D 5C07                 769  	and a, #0x07
0000016F 9800                 770  	mov [sp+0x00], a
00000171                      771  	;***      363 :     SIR11 = (uint16_t)err_type;
00000171                      772  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 363
00000171 8800                 773  	mov a, [sp+0x00]
00000173 318E                 774  	shrw ax, 8+0x00000
00000175 BF4A01               775  	movw !0x014A, ax
00000178                      776  	;***      364 : 
00000178                      777  	;***      365 :     if (err_type != 0U)
00000178                      778  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 365
00000178 8800                 779  	mov a, [sp+0x00]
0000017A D1                   780  	cmp0 a
0000017B DD00                 781  	bz $.BB@LABEL@13_2
0000017D                      782  .BB@LABEL@13_1:	; if_then_bb
0000017D                      783  	;***      366 :     {
0000017D                      784  	;***      367 :         r_uart2_callback_error(err_type);
0000017D                      785  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 367
0000017D 8800                 786  	mov a, [sp+0x00]
0000017F FC000000             787  	call !!_r_uart2_callback_error@1
00000183                      788  .BB@LABEL@13_2:	; if_break_bb
00000183                      789  	;***      368 :     }
00000183                      790  	;***      369 :     
00000183                      791  	;***      370 :     rx_data = RXD2;
00000183                      792  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 370
00000183 8E4A                 793  	mov a, 0xFFF4A
00000185 9801                 794  	mov [sp+0x01], a
00000187                      795  	;***      371 : 
00000187                      796  	;***      372 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      797  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 372
00000187 AF0000               798  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               799  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 800  	mov a, [sp+0x01]
0000018F 61D300               801  	bnh $.BB@LABEL@13_6
00000192                      802  .BB@LABEL@13_3:	; if_then_bb18
00000192                      803  	;***      373 :     {
00000192                      804  	;***      374 :         *gp_uart2_rx_address = rx_data;
00000192                      805  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 374
00000192 EB0000               806  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   807  	mov [de], a
00000196                      808  	;***      375 :         gp_uart2_rx_address++;
00000196                      809  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 375
00000196 A20000               810  	incw !LOWW(_gp_uart2_rx_address)
00000199                      811  	;***      376 :         g_uart2_rx_count++;
00000199                      812  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 376
00000199 A20000               813  	incw !LOWW(_g_uart2_rx_count)
0000019C                      814  	;***      377 : 
0000019C                      815  	;***      378 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      816  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 378
0000019C AF0000               817  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               818  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 819  	sknz
000001A4                      820  .BB@LABEL@13_4:	; if_then_bb30
000001A4                      821  	;***      379 :         {
000001A4                      822  	;***      380 :             r_uart2_callback_receiveend();
000001A4                      823  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 380
000001A4 FC000000             824  	call !!_r_uart2_callback_receiveend@1
000001A8                      825  .BB@LABEL@13_5:	; return
000001A8 C6                   826  	pop hl
000001A9 C0                   827  	pop ax
000001AA 9EFC                 828  	mov cs, a
000001AC 60                   829  	mov a, x
000001AD 9EFD                 830  	mov es, a
000001AF C6                   831  	pop hl
000001B0 C4                   832  	pop de
000001B1 C2                   833  	pop bc
000001B2 C0                   834  	pop ax
000001B3                      835  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 387
000001B3 61FC                 836  	reti
000001B5                      837  .BB@LABEL@13_6:	; if_else_bb
000001B5                      838  	;***      381 :         }
000001B5                      839  	;***      382 :     }
000001B5                      840  	;***      383 :     else
000001B5                      841  	;***      384 :     {
000001B5                      842  	;***      385 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      843  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 385
000001B5 318E                 844  	shrw ax, 8+0x00000
000001B7 FC000000             845  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 846  	br $.BB@LABEL@13_5
000001BD                      847  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      848  _r_uart2_interrupt_send@1:
000001BD                      849  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      850  	;***      386 :     }
000001BD                      851  	;***      387 : }
000001BD                      852  	;***      388 : 
000001BD                      853  	;***      389 : /***********************************************************************************************************************
000001BD                      854  	;***      390 : * Function Name: r_uart2_interrupt_send
000001BD                      855  	;***      391 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      856  	;***      392 : * Arguments    : None
000001BD                      857  	;***      393 : * Return Value : None
000001BD                      858  	;***      394 : ***********************************************************************************************************************/
000001BD                      859  	;***      395 : static void __near r_uart2_interrupt_send(void)
000001BD                      860  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 395
000001BD C1                   861  	push ax
000001BE C3                   862  	push bc
000001BF C5                   863  	push de
000001C0 C7                   864  	push hl
000001C1 8EFD                 865  	mov a, es
000001C3 70                   866  	mov x, a
000001C4 8EFC                 867  	mov a, cs
000001C6 C1                   868  	push ax
000001C7                      869  	;***      396 : {
000001C7                      870  	;***      397 :     if (g_uart2_tx_count > 0U)
000001C7                      871  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
000001C7 AF0000               872  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   873  	clrw bc
000001CB 43                   874  	cmpw ax, bc
000001CC DF00                 875  	bnz $.BB@LABEL@14_3
000001CE                      876  .BB@LABEL@14_1:	; if_else_bb
000001CE                      877  	;***      398 :     {
000001CE                      878  	;***      399 :         TXD2 = *gp_uart2_tx_address;
000001CE                      879  	;***      400 :         gp_uart2_tx_address++;
000001CE                      880  	;***      401 :         g_uart2_tx_count--;
000001CE                      881  	;***      402 :     }
000001CE                      882  	;***      403 :     else
000001CE                      883  	;***      404 :     {
000001CE                      884  	;***      405 :         r_uart2_callback_sendend();
000001CE                      885  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 405
000001CE FC000000             886  	call !!_r_uart2_callback_sendend@1
000001D2                      887  .BB@LABEL@14_2:	; if_else_bb
000001D2 C0                   888  	pop ax
000001D3 9EFC                 889  	mov cs, a
000001D5 60                   890  	mov a, x
000001D6 9EFD                 891  	mov es, a
000001D8 C6                   892  	pop hl
000001D9 C4                   893  	pop de
000001DA C2                   894  	pop bc
000001DB C0                   895  	pop ax
000001DC                      896  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 407
000001DC 61FC                 897  	reti
000001DE                      898  .BB@LABEL@14_3:	; if_then_bb
000001DE                      899  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 399
000001DE EB0000               900  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   901  	mov a, [de]
000001E2 9E48                 902  	mov 0xFFF48, a
000001E4                      903  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 400
000001E4 A5                   904  	incw de
000001E5 15                   905  	movw ax, de
000001E6 BF0000               906  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      907  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 401
000001E9 B20000               908  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 909  	br $.BB@LABEL@14_2
00000011                      910  	.SECTION .textf,TEXTF
00000011                      911  _r_uart2_callback_receiveend@1:
00000011                      912  	.STACK _r_uart2_callback_receiveend@1 = 4
00000011                      913  	;***      406 :     }
00000011                      914  	;***      407 : }
00000011                      915  	;***      408 : 
00000011                      916  	;***      409 : /***********************************************************************************************************************
00000011                      917  	;***      410 : * Function Name: r_uart2_callback_receiveend
00000011                      918  	;***      411 : * Description  : This function is a callback function when UART2 finishes reception.
00000011                      919  	;***      412 : * Arguments    : None
00000011                      920  	;***      413 : * Return Value : None
00000011                      921  	;***      414 : ***********************************************************************************************************************/
00000011                      922  	;***      415 : static void r_uart2_callback_receiveend(void)
00000011                      923  	;***      416 : {
00000011                      924  	;***      417 :     /* Start user code. Do not edit comment generated here */
00000011                      925  	;***      418 : 	Raspberry_uart2_handle();
00000011                      926  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 418
00000011 EC000000             927  	br !!_Raspberry_uart2_handle
00000015                      928  _r_uart2_callback_softwareoverrun@1:
00000015                      929  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
00000015                      930  	;***      419 : 	/* End user code. Do not edit comment generated here */
00000015                      931  	;***      420 : }
00000015                      932  	;***      421 : 
00000015                      933  	;***      422 : /***********************************************************************************************************************
00000015                      934  	;***      423 : * Function Name: r_uart2_callback_softwareoverrun
00000015                      935  	;***      424 : * Description  : This function is a callback function when UART2 receives an overflow data.
00000015                      936  	;***      425 : * Arguments    : rx_data -
00000015                      937  	;***      426 : *                    receive data
00000015                      938  	;***      427 : * Return Value : None
00000015                      939  	;***      428 : ***********************************************************************************************************************/
00000015                      940  	;***      429 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
00000015                      941  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 429
00000015 D7                   942  	ret
00000016                      943  _r_uart2_callback_sendend@1:
00000016                      944  	.STACK _r_uart2_callback_sendend@1 = 4
00000016                      945  	;***      430 : {
00000016                      946  	;***      431 :     /* Start user code. Do not edit comment generated here */
00000016                      947  	;***      432 : 	/* End user code. Do not edit comment generated here */
00000016                      948  	;***      433 : }
00000016                      949  	;***      434 : 
00000016                      950  	;***      435 : /***********************************************************************************************************************
00000016                      951  	;***      436 : * Function Name: r_uart2_callback_sendend
00000016                      952  	;***      437 : * Description  : This function is a callback function when UART2 finishes transmission.
00000016                      953  	;***      438 : * Arguments    : None
00000016                      954  	;***      439 : * Return Value : None
00000016                      955  	;***      440 : ***********************************************************************************************************************/
00000016                      956  	;***      441 : static void r_uart2_callback_sendend(void)
00000016                      957  	;***      442 : {
00000016                      958  	;***      443 :     /* Start user code. Do not edit comment generated here */
00000016                      959  	;***      444 : 	g_uart2_sendend++;
00000016                      960  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
00000016 A00000               961  	inc !LOWW(_g_uart2_sendend)
00000019 D7                   962  	ret
0000001A                      963  _r_uart2_callback_error@1:
0000001A                      964  	.STACK _r_uart2_callback_error@1 = 4
0000001A                      965  	;***      445 : 	/* End user code. Do not edit comment generated here */
0000001A                      966  	;***      446 : }
0000001A                      967  	;***      447 : 
0000001A                      968  	;***      448 : /***********************************************************************************************************************
0000001A                      969  	;***      449 : * Function Name: r_uart2_callback_error
0000001A                      970  	;***      450 : * Description  : This function is a callback function when UART2 reception error occurs.
0000001A                      971  	;***      451 : * Arguments    : err_type -
0000001A                      972  	;***      452 : *                    error type value
0000001A                      973  	;***      453 : * Return Value : None
0000001A                      974  	;***      454 : ***********************************************************************************************************************/
0000001A                      975  	;***      455 : static void r_uart2_callback_error(uint8_t err_type)
0000001A                      976  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
0000001A D7                   977  	ret
000001EE                      978  	.SECTION .text,TEXT
000001EE                      979  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                      980  _r_uart3_interrupt_receive@1:
000001EE                      981  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                      982  	;***      456 : {
000001EE                      983  	;***      457 :     /* Start user code. Do not edit comment generated here */
000001EE                      984  	;***      458 : 	/* End user code. Do not edit comment generated here */
000001EE                      985  	;***      459 : }
000001EE                      986  	;***      460 : 
000001EE                      987  	;***      461 : /***********************************************************************************************************************
000001EE                      988  	;***      462 : * Function Name: r_uart3_interrupt_receive
000001EE                      989  	;***      463 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                      990  	;***      464 : * Arguments    : None
000001EE                      991  	;***      465 : * Return Value : None
000001EE                      992  	;***      466 : ***********************************************************************************************************************/
000001EE                      993  	;***      467 : static void __near r_uart3_interrupt_receive(void)
000001EE                      994  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 467
000001EE C1                   995  	push ax
000001EF C3                   996  	push bc
000001F0 C5                   997  	push de
000001F1 C7                   998  	push hl
000001F2 8EFD                 999  	mov a, es
000001F4 70                  1000  	mov x, a
000001F5 8EFC                1001  	mov a, cs
000001F7 C1                  1002  	push ax
000001F8 C7                  1003  	push hl
000001F9                     1004  	;***      468 : {
000001F9                     1005  	;***      469 :     volatile uint8_t rx_data;
000001F9                     1006  	;***      470 :     volatile uint8_t err_type;
000001F9                     1007  	;***      471 :     
000001F9                     1008  	;***      472 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1009  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 472
000001F9 AF4601              1010  	movw ax, !0x0146
000001FC 60                  1011  	mov a, x
000001FD 5C07                1012  	and a, #0x07
000001FF 9800                1013  	mov [sp+0x00], a
00000201                     1014  	;***      473 :     SIR13 = (uint16_t)err_type;
00000201                     1015  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 473
00000201 8800                1016  	mov a, [sp+0x00]
00000203 318E                1017  	shrw ax, 8+0x00000
00000205 BF4E01              1018  	movw !0x014E, ax
00000208                     1019  	;***      474 : 
00000208                     1020  	;***      475 :     if (err_type != 0U)
00000208                     1021  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 475
00000208 8800                1022  	mov a, [sp+0x00]
0000020A D1                  1023  	cmp0 a
0000020B DD00                1024  	bz $.BB@LABEL@19_2
0000020D                     1025  .BB@LABEL@19_1:	; if_then_bb
0000020D                     1026  	;***      476 :     {
0000020D                     1027  	;***      477 :         r_uart3_callback_error(err_type);
0000020D                     1028  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 477
0000020D 8800                1029  	mov a, [sp+0x00]
0000020F FC000000            1030  	call !!_r_uart3_callback_error@1
00000213                     1031  .BB@LABEL@19_2:	; if_break_bb
00000213                     1032  	;***      478 :     }
00000213                     1033  	;***      479 :     
00000213                     1034  	;***      480 :     rx_data = RXD3;
00000213                     1035  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 480
00000213 8D16                1036  	mov a, 0xFFF16
00000215 9801                1037  	mov [sp+0x01], a
00000217                     1038  	;***      481 : 
00000217                     1039  	;***      482 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1040  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 482
00000217 AF0000              1041  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1042  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1043  	mov a, [sp+0x01]
0000021F 61D300              1044  	bnh $.BB@LABEL@19_6
00000222                     1045  .BB@LABEL@19_3:	; if_then_bb18
00000222                     1046  	;***      483 :     {
00000222                     1047  	;***      484 :         *gp_uart3_rx_address = rx_data;
00000222                     1048  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 484
00000222 EB0000              1049  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1050  	mov [de], a
00000226                     1051  	;***      485 :         gp_uart3_rx_address++;
00000226                     1052  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 485
00000226 A20000              1053  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1054  	;***      486 :         g_uart3_rx_count++;
00000229                     1055  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 486
00000229 A20000              1056  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1057  	;***      487 : 
0000022C                     1058  	;***      488 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1059  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 488
0000022C AF0000              1060  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1061  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1062  	sknz
00000234                     1063  .BB@LABEL@19_4:	; if_then_bb30
00000234                     1064  	;***      489 :         {
00000234                     1065  	;***      490 :             r_uart3_callback_receiveend();
00000234                     1066  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 490
00000234 FC000000            1067  	call !!_r_uart3_callback_receiveend@1
00000238                     1068  .BB@LABEL@19_5:	; return
00000238 C6                  1069  	pop hl
00000239 C0                  1070  	pop ax
0000023A 9EFC                1071  	mov cs, a
0000023C 60                  1072  	mov a, x
0000023D 9EFD                1073  	mov es, a
0000023F C6                  1074  	pop hl
00000240 C4                  1075  	pop de
00000241 C2                  1076  	pop bc
00000242 C0                  1077  	pop ax
00000243                     1078  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 497
00000243 61FC                1079  	reti
00000245                     1080  .BB@LABEL@19_6:	; if_else_bb
00000245                     1081  	;***      491 :         }
00000245                     1082  	;***      492 :     }
00000245                     1083  	;***      493 :     else
00000245                     1084  	;***      494 :     {
00000245                     1085  	;***      495 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1086  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 495
00000245 318E                1087  	shrw ax, 8+0x00000
00000247 FC000000            1088  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1089  	br $.BB@LABEL@19_5
0000024D                     1090  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1091  _r_uart3_interrupt_send@1:
0000024D                     1092  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1093  	;***      496 :     }
0000024D                     1094  	;***      497 : }
0000024D                     1095  	;***      498 : 
0000024D                     1096  	;***      499 : /***********************************************************************************************************************
0000024D                     1097  	;***      500 : * Function Name: r_uart3_interrupt_send
0000024D                     1098  	;***      501 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1099  	;***      502 : * Arguments    : None
0000024D                     1100  	;***      503 : * Return Value : None
0000024D                     1101  	;***      504 : ***********************************************************************************************************************/
0000024D                     1102  	;***      505 : static void __near r_uart3_interrupt_send(void)
0000024D                     1103  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 505
0000024D C1                  1104  	push ax
0000024E C3                  1105  	push bc
0000024F C5                  1106  	push de
00000250 C7                  1107  	push hl
00000251 8EFD                1108  	mov a, es
00000253 70                  1109  	mov x, a
00000254 8EFC                1110  	mov a, cs
00000256 C1                  1111  	push ax
00000257                     1112  	;***      506 : {
00000257                     1113  	;***      507 :     if (g_uart3_tx_count > 0U)
00000257                     1114  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 507
00000257 AF0000              1115  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1116  	clrw bc
0000025B 43                  1117  	cmpw ax, bc
0000025C DF00                1118  	bnz $.BB@LABEL@20_3
0000025E                     1119  .BB@LABEL@20_1:	; if_else_bb
0000025E                     1120  	;***      508 :     {
0000025E                     1121  	;***      509 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1122  	;***      510 :         gp_uart3_tx_address++;
0000025E                     1123  	;***      511 :         g_uart3_tx_count--;
0000025E                     1124  	;***      512 :     }
0000025E                     1125  	;***      513 :     else
0000025E                     1126  	;***      514 :     {
0000025E                     1127  	;***      515 :         r_uart3_callback_sendend();
0000025E                     1128  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 515
0000025E FC000000            1129  	call !!_r_uart3_callback_sendend@1
00000262                     1130  .BB@LABEL@20_2:	; if_else_bb
00000262 C0                  1131  	pop ax
00000263 9EFC                1132  	mov cs, a
00000265 60                  1133  	mov a, x
00000266 9EFD                1134  	mov es, a
00000268 C6                  1135  	pop hl
00000269 C4                  1136  	pop de
0000026A C2                  1137  	pop bc
0000026B C0                  1138  	pop ax
0000026C                     1139  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 517
0000026C 61FC                1140  	reti
0000026E                     1141  .BB@LABEL@20_3:	; if_then_bb
0000026E                     1142  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 509
0000026E EB0000              1143  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1144  	mov a, [de]
00000272 9D14                1145  	mov 0xFFF14, a
00000274                     1146  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 510
00000274 A5                  1147  	incw de
00000275 15                  1148  	movw ax, de
00000276 BF0000              1149  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1150  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 511
00000279 B20000              1151  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1152  	br $.BB@LABEL@20_2
0000001B                     1153  	.SECTION .textf,TEXTF
0000001B                     1154  _r_uart3_callback_receiveend@1:
0000001B                     1155  	.STACK _r_uart3_callback_receiveend@1 = 4
0000001B                     1156  	;***      516 :     }
0000001B                     1157  	;***      517 : }
0000001B                     1158  	;***      518 : 
0000001B                     1159  	;***      519 : /***********************************************************************************************************************
0000001B                     1160  	;***      520 : * Function Name: r_uart3_callback_receiveend
0000001B                     1161  	;***      521 : * Description  : This function is a callback function when UART3 finishes reception.
0000001B                     1162  	;***      522 : * Arguments    : None
0000001B                     1163  	;***      523 : * Return Value : None
0000001B                     1164  	;***      524 : ***********************************************************************************************************************/
0000001B                     1165  	;***      525 : static void r_uart3_callback_receiveend(void)
0000001B                     1166  	;***      526 : {
0000001B                     1167  	;***      527 :     /* Start user code. Do not edit comment generated here */
0000001B                     1168  	;***      528 : 	R_UART3_Receive(g_uart3_rx_data, 7);
0000001B                     1169  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 528
0000001B 320700              1170  	movw bc, #0x0007
0000001E 300000              1171  	movw ax, #LOWW(_g_uart3_rx_data)
00000021 FC000000            1172  	call !!_R_UART3_Receive
00000025                     1173  	;***      529 : 	if (g_uart3_rx_data[0] == 1) {
00000025                     1174  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 529
00000025 8F0000              1175  	mov a, !LOWW(_g_uart3_rx_data)
00000028 4C01                1176  	cmp a, #0x01
0000002A DF00                1177  	bnz $.BB@LABEL@21_7
0000002C                     1178  .BB@LABEL@21_1:	; if_then_bb
0000002C                     1179  	;***      530 : 		//Read timer setting
0000002C                     1180  	;***      531 : 		if ((rs485_rx_p[0] == H_READ) && (rs485_rx_p[1] == READ_TIME)) {
0000002C                     1181  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 531
0000002C 40000052            1182  	cmp !LOWW(_g_uart3_rx_data+0x00001), #0x52
00000030 DF00                1183  	bnz $.BB@LABEL@21_6
00000032                     1184  .BB@LABEL@21_2:	; bb
00000032 40000002            1185  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x02
00000036 DF00                1186  	bnz $.BB@LABEL@21_4
00000038                     1187  .BB@LABEL@21_3:	; if_then_bb25
00000038                     1188  	;***      532 : 			g_commnunication_flag.rs485_send_to_watersolfner_response_flag = 1;
00000038                     1189  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 532
00000038 E50000              1190  	oneb !LOWW(_g_commnunication_flag+0x00011)
0000003B D7                  1191  	ret
0000003C                     1192  .BB@LABEL@21_4:	; bb32
0000003C                     1193  	;***      533 : 		} else if ((rs485_rx_p[0] == 82) && (rs485_rx_p[1] == 24)) {
0000003C                     1194  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 533
0000003C 40000018            1195  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x18
00000040 61F8                1196  	sknz
00000042                     1197  .BB@LABEL@21_5:	; if_then_bb47
00000042                     1198  	;***      534 : 			g_commnunication_flag.rs485_send_to_watersolfner_SV1_flag = 1;
00000042                     1199  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 534
00000042 E50000              1200  	oneb !LOWW(_g_commnunication_flag+0x00012)
00000045                     1201  .BB@LABEL@21_6:	; if_else_bb.if_else_bb48_crit_edge.critedge
00000045                     1202  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 551
00000045 D7                  1203  	ret
00000046                     1204  .BB@LABEL@21_7:	; if_else_bb97
00000046                     1205  	;***      535 : 		} else if ((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 70)) {
00000046                     1206  	;***      536 : 			//TODO: Start Water Softener
00000046                     1207  	;***      537 : 
00000046                     1208  	;***      538 : 		} else if ((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 80)) {
00000046                     1209  	;***      539 : 			//TODO: Stop Water Softener + Time of SNP ON (4 bytes)
00000046                     1210  	;***      540 : 		}
00000046                     1211  	;***      541 : 	} else if (g_uart3_rx_data[0] == 2) {
00000046                     1212  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 541
00000046 4C02                1213  	cmp a, #0x02
00000048 DF00                1214  	bnz $.BB@LABEL@21_12
0000004A                     1215  .BB@LABEL@21_8:	; if_then_bb103
0000004A                     1216  	;***      542 : 		if ((rs485_rx_p[0] == 11)) {
0000004A                     1217  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 542
0000004A 8F0000              1218  	mov a, !LOWW(_g_uart3_rx_data+0x00001)
0000004D 4C0B                1219  	cmp a, #0x0B
0000004F DF00                1220  	bnz $.BB@LABEL@21_10
00000051                     1221  .BB@LABEL@21_9:	; if_then_bb111
00000051                     1222  	;***      543 : 			g_commnunication_flag.rs485_send_to_valve_response_flag = 1;
00000051                     1223  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 543
00000051 E50000              1224  	oneb !LOWW(_g_commnunication_flag+0x00013)
00000054 D7                  1225  	ret
00000055                     1226  .BB@LABEL@21_10:	; if_else_bb112
00000055                     1227  	;***      544 : 		} else if ((rs485_rx_p[0] == 12)) {
00000055                     1228  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000055 4C0C                1229  	cmp a, #0x0C
00000057 DF00                1230  	bnz $.BB@LABEL@21_14
00000059                     1231  .BB@LABEL@21_11:	; if_then_bb120
00000059                     1232  	;***      545 : 			g_commnunication_flag.rs485_get_valve_gesture_flag = 1;
00000059                     1233  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 545
00000059 E50000              1234  	oneb !LOWW(_g_commnunication_flag+0x00014)
0000005C D7                  1235  	ret
0000005D                     1236  .BB@LABEL@21_12:	; if_else_bb123
0000005D                     1237  	;***      546 : 		}
0000005D                     1238  	;***      547 : 	} else if (g_uart3_rx_data[0] != 0xff) {
0000005D                     1239  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 547
0000005D 81                  1240  	inc a
0000005E 61E8                1241  	skz
00000060                     1242  .BB@LABEL@21_13:	; if_then_bb129
00000060                     1243  	;***      548 : 		g_commnunication_flag.rs485_fault = 1;
00000060                     1244  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 548
00000060 E50000              1245  	oneb !LOWW(_g_commnunication_flag+0x00015)
00000063                     1246  .BB@LABEL@21_14:	; return
00000063                     1247  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 551
00000063 D7                  1248  	ret
00000064                     1249  _r_uart3_callback_softwareoverrun@1:
00000064                     1250  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
00000064                     1251  	;***      549 : 	}
00000064                     1252  	;***      550 : 	/* End user code. Do not edit comment generated here */
00000064                     1253  	;***      551 : }
00000064                     1254  	;***      552 : 
00000064                     1255  	;***      553 : /***********************************************************************************************************************
00000064                     1256  	;***      554 : * Function Name: r_uart3_callback_softwareoverrun
00000064                     1257  	;***      555 : * Description  : This function is a callback function when UART3 receives an overflow data.
00000064                     1258  	;***      556 : * Arguments    : rx_data -
00000064                     1259  	;***      557 : *                    receive data
00000064                     1260  	;***      558 : * Return Value : None
00000064                     1261  	;***      559 : ***********************************************************************************************************************/
00000064                     1262  	;***      560 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
00000064                     1263  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 560
00000064 D7                  1264  	ret
00000065                     1265  _r_uart3_callback_sendend@1:
00000065                     1266  	.STACK _r_uart3_callback_sendend@1 = 4
00000065                     1267  	;***      561 : {
00000065                     1268  	;***      562 :     /* Start user code. Do not edit comment generated here */
00000065                     1269  	;***      563 : 	/* End user code. Do not edit comment generated here */
00000065                     1270  	;***      564 : }
00000065                     1271  	;***      565 : 
00000065                     1272  	;***      566 : /***********************************************************************************************************************
00000065                     1273  	;***      567 : * Function Name: r_uart3_callback_sendend
00000065                     1274  	;***      568 : * Description  : This function is a callback function when UART3 finishes transmission.
00000065                     1275  	;***      569 : * Arguments    : None
00000065                     1276  	;***      570 : * Return Value : None
00000065                     1277  	;***      571 : ***********************************************************************************************************************/
00000065                     1278  	;***      572 : static void r_uart3_callback_sendend(void)
00000065                     1279  	;***      573 : {
00000065                     1280  	;***      574 :     /* Start user code. Do not edit comment generated here */
00000065                     1281  	;***      575 : 	g_uart3_sendend++;
00000065                     1282  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 575
00000065 A00000              1283  	inc !LOWW(_g_uart3_sendend)
00000068                     1284  	;***      576 : 	O_RS485_MODE_PIN = 0U;
00000068                     1285  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 576
00000068 710300              1286  	clr1 0xFFF00.0
0000006B D7                  1287  	ret
0000006C                     1288  _r_uart3_callback_error@1:
0000006C                     1289  	.STACK _r_uart3_callback_error@1 = 4
0000006C                     1290  	;***      577 : 	/* End user code. Do not edit comment generated here */
0000006C                     1291  	;***      578 : }
0000006C                     1292  	;***      579 : 
0000006C                     1293  	;***      580 : /***********************************************************************************************************************
0000006C                     1294  	;***      581 : * Function Name: r_uart3_callback_error
0000006C                     1295  	;***      582 : * Description  : This function is a callback function when UART3 reception error occurs.
0000006C                     1296  	;***      583 : * Arguments    : err_type -
0000006C                     1297  	;***      584 : *                    error type value
0000006C                     1298  	;***      585 : * Return Value : None
0000006C                     1299  	;***      586 : ***********************************************************************************************************************/
0000006C                     1300  	;***      587 : static void r_uart3_callback_error(uint8_t err_type)
0000006C                     1301  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 587
0000006C D7                  1302  	ret
0000006D                     1303  	;***      588 : {
0000006D                     1304  	;***      589 :     /* Start user code. Do not edit comment generated here */
0000006D                     1305  	;***      590 : 	/* End user code. Do not edit comment generated here */
0000006D                     1306  	;***      591 : }
0000006D                     1307  	;***      592 : 
0000006D                     1308  	;***      593 : /* Start user code for adding. Do not edit comment generated here */
0000006D                     1309  	;***      594 : /* End user code. Do not edit comment generated here */
00000000                     1310  	.SECTION .bss,BSS
00000000                     1311  _g_uart3_rx_data:
00000000                     1312  	.DS (8)
00000008                     1313  _send_response_flag:
00000008                     1314  	.DS (1)
00000009                     1315  _send_response_time_flag:
00000009                     1316  	.DS (1)
0000000A                     1317  _send_response_number_flag:
0000000A                     1318  	.DS (1)
0000000B                     1319  _recived_time_setting_flag:
0000000B                     1320  	.DS (1)
0000000C                     1321  _send_respone_status_flag:
0000000C                     1322  	.DS (1)
0000000D                     1323  _recived_number_setting_flag:
0000000D                     1324  	.DS (1)
0000000E                     1325  _g_commnunication_flag:
0000000E                     1326  	.DS (25)
00000027                     1327  _g_csi_count:
00000027                     1328  	.DS (1)
00000028                     1329  _g_csi_err:
00000028                     1330  	.DS (1)
00000029                     1331  _g_csi_send_end:
00000029                     1332  	.DS (1)
0000002A                     1333  _g_csi_rev_end:
0000002A                     1334  	.DS (1)
0000002B                     1335  _g_uart1_send:
0000002B                     1336  	.DS (1)
0000002C                     1337  _g_uart2_sendend:
0000002C                     1338  	.DS (1)
0000002D                     1339  _g_uart2_receive:
0000002D                     1340  	.DS (1)
0000002E                     1341  _g_rx_data:
0000002E                     1342  	.DS (160)
000000CE                     1343  _g_uart2_fault:
000000CE                     1344  	.DS (1)
000000CF                     1345  _g_uart3_sendend:
000000CF                     1346  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               109 (0000006D) .textf
BSS                 208 (000000D0) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl001\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1223251604\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

