RL78 Family Assembler V1.10.00.01 Assemble Source List

OFFSET   CODE                  NO  SOURCE STATEMENT

00000000                        1  #CC-RL Compiler RL78 Assembler Source
00000000                        2  #@  CC-RL Version : V1.10.00 [20 Nov 2020]
00000000                        3  #@  Commmand :
00000000                        4  #@   -cpu=S3
00000000                        5  #@   -c
00000000                        6  #@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
00000000                        7  #@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
00000000                        8  #@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
00000000                        9  #@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
00000000                       10  #@   -character_set=utf8
00000000                       11  #@   -lang=c99
00000000                       12  #@   -g
00000000                       13  #@   -asmopt=-prn_path=src
00000000                       14  #@   -asm_path=src/
00000000                       15  #@   -pass_source
00000000                       16  #@   -o src/r_cg_serial_user.obj
00000000                       17  #@   ../src/r_cg_serial_user.c
00000000                       18  #@  compiled at Thu Dec 30 13:18:42 2021
00000000                       19  
00000000                       20  	.EXTERN _g_machine_state
00000000                       21  	.EXTERN _g_machine_mode
00000000                       22  	.PUBLIC _g_uart3_rx_data
00000000                       23  	.EXTERN _gp_uart1_tx_address
00000000                       24  	.EXTERN _g_uart1_tx_count
00000000                       25  	.EXTERN _gp_uart1_rx_address
00000000                       26  	.EXTERN _g_uart1_rx_count
00000000                       27  	.EXTERN _g_uart1_rx_length
00000000                       28  	.EXTERN _gp_csi00_tx_address
00000000                       29  	.EXTERN _g_csi00_tx_count
00000000                       30  	.EXTERN _gp_csi01_rx_address
00000000                       31  	.EXTERN _gp_csi01_tx_address
00000000                       32  	.EXTERN _g_csi01_tx_count
00000000                       33  	.EXTERN _gp_uart2_tx_address
00000000                       34  	.EXTERN _g_uart2_tx_count
00000000                       35  	.EXTERN _gp_uart2_rx_address
00000000                       36  	.EXTERN _g_uart2_rx_count
00000000                       37  	.EXTERN _g_uart2_rx_length
00000000                       38  	.EXTERN _gp_uart3_tx_address
00000000                       39  	.EXTERN _g_uart3_tx_count
00000000                       40  	.EXTERN _gp_uart3_rx_address
00000000                       41  	.EXTERN _g_uart3_rx_count
00000000                       42  	.EXTERN _g_uart3_rx_length
00000000                       43  	.PUBLIC _send_response_flag
00000000                       44  	.PUBLIC _send_response_time_flag
00000000                       45  	.PUBLIC _send_response_number_flag
00000000                       46  	.PUBLIC _recived_time_setting_flag
00000000                       47  	.PUBLIC _send_respone_status_flag
00000000                       48  	.PUBLIC _recived_number_setting_flag
00000000                       49  	.PUBLIC _commnunication_flag
00000000                       50  	.PUBLIC _g_csi_count
00000000                       51  	.PUBLIC _g_csi_err
00000000                       52  	.PUBLIC _g_csi_send_end
00000000                       53  	.PUBLIC _g_csi_rev_end
00000000                       54  	.PUBLIC _g_uart1_send
00000000                       55  	.PUBLIC _g_uart2_sendend
00000000                       56  	.PUBLIC _g_uart2_receive
00000000                       57  	.PUBLIC _g_rx_data
00000000                       58  	.PUBLIC _g_uart2_fault
00000000                       59  	.PUBLIC _g_uart3_sendend
00000000                       60  	.PUBLIC _isCommandNeedResponse
00000000                       61  	.EXTERN _R_CSI01_Stop
00000000                       62  	.EXTERN _R_UART2_Receive
00000000                       63  	.EXTERN _isThisCommand
00000000                       64  	.EXTERN _R_UART3_Receive
00000000                       65  
00000000                       66  	.SECTION .textf,TEXTF
00000000                       67  _isCommandNeedResponse:
00000000                       68  	.STACK _isCommandNeedResponse = 4
00000000                       69  	;***        1 : /***********************************************************************************************************************
00000000                       70  	;***        2 : * DISCLAIMER
00000000                       71  	;***        3 : * This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
00000000                       72  	;***        4 : * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
00000000                       73  	;***        5 : * applicable laws, including copyright laws. 
00000000                       74  	;***        6 : * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
00000000                       75  	;***        7 : * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                       76  	;***        8 : * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
00000000                       77  	;***        9 : * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
00000000                       78  	;***       10 : * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
00000000                       79  	;***       11 : * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
00000000                       80  	;***       12 : * Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
00000000                       81  	;***       13 : * of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
00000000                       82  	;***       14 : * following link:
00000000                       83  	;***       15 : * http://www.renesas.com/disclaimer
00000000                       84  	;***       16 : *
00000000                       85  	;***       17 : * Copyright (C) 2011, 2020 Renesas Electronics Corporation. All rights reserved.
00000000                       86  	;***       18 : ***********************************************************************************************************************/
00000000                       87  	;***       19 : 
00000000                       88  	;***       20 : /***********************************************************************************************************************
00000000                       89  	;***       21 : * File Name    : r_cg_serial_user.c
00000000                       90  	;***       22 : * Version      : CodeGenerator for RL78/G14 V2.05.05.01 [25 Nov 2020]
00000000                       91  	;***       23 : * Device(s)    : R5F104ML
00000000                       92  	;***       24 : * Tool-Chain   : CCRL
00000000                       93  	;***       25 : * Description  : This file implements device driver for Serial module.
00000000                       94  	;***       26 : * Creation Date: 30/11/2021
00000000                       95  	;***       27 : ***********************************************************************************************************************/
00000000                       96  	;***       28 : 
00000000                       97  	;***       29 : /***********************************************************************************************************************
00000000                       98  	;***       30 : Includes
00000000                       99  	;***       31 : ***********************************************************************************************************************/
00000000                      100  	;***       32 : #include "r_cg_macrodriver.h"
00000000                      101  	;***       33 : #include "r_cg_serial.h"
00000000                      102  	;***       34 : /* Start user code for include. Do not edit comment generated here */
00000000                      103  	;***       35 : #include "r_cg_wdt.h"
00000000                      104  	;***       36 : #include "main.h"
00000000                      105  	;***       37 : /* End user code. Do not edit comment generated here */
00000000                      106  	;***       38 : #include "r_cg_userdefine.h"
00000000                      107  	;***       39 : 
00000000                      108  	;***       40 : /***********************************************************************************************************************
00000000                      109  	;***       41 : Pragma directive
00000000                      110  	;***       42 : ***********************************************************************************************************************/
00000000                      111  	;***       43 : #pragma interrupt r_uart1_interrupt_send(vect=INTST1)
00000000                      112  	;***       44 : #pragma interrupt r_uart1_interrupt_receive(vect=INTSR1)
00000000                      113  	;***       45 : #pragma interrupt r_csi00_interrupt(vect=INTCSI00)
00000000                      114  	;***       46 : #pragma interrupt r_csi01_interrupt(vect=INTCSI01)
00000000                      115  	;***       47 : #pragma interrupt r_uart2_interrupt_send(vect=INTST2)
00000000                      116  	;***       48 : #pragma interrupt r_uart2_interrupt_receive(vect=INTSR2)
00000000                      117  	;***       49 : #pragma interrupt r_uart3_interrupt_send(vect=INTST3)
00000000                      118  	;***       50 : #pragma interrupt r_uart3_interrupt_receive(vect=INTSR3)
00000000                      119  	;***       51 : /* Start user code for pragma. Do not edit comment generated here */
00000000                      120  	;***       52 : /* End user code. Do not edit comment generated here */
00000000                      121  	;***       53 : 
00000000                      122  	;***       54 : /***********************************************************************************************************************
00000000                      123  	;***       55 : Global variables and functions
00000000                      124  	;***       56 : ***********************************************************************************************************************/
00000000                      125  	;***       57 : extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
00000000                      126  	;***       58 : extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
00000000                      127  	;***       59 : extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
00000000                      128  	;***       60 : extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
00000000                      129  	;***       61 : extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
00000000                      130  	;***       62 : extern volatile uint8_t * gp_csi00_rx_address;         /* csi00 receive buffer address */
00000000                      131  	;***       63 : extern volatile uint16_t  g_csi00_rx_length;           /* csi00 receive data length */
00000000                      132  	;***       64 : extern volatile uint16_t  g_csi00_rx_count;            /* csi00 receive data count */
00000000                      133  	;***       65 : extern volatile uint8_t * gp_csi00_tx_address;         /* csi00 send buffer address */
00000000                      134  	;***       66 : extern volatile uint16_t  g_csi00_send_length;         /* csi00 send data length */
00000000                      135  	;***       67 : extern volatile uint16_t  g_csi00_tx_count;            /* csi00 send data count */
00000000                      136  	;***       68 : extern volatile uint8_t * gp_csi01_rx_address;         /* csi01 receive buffer address */
00000000                      137  	;***       69 : extern volatile uint16_t  g_csi01_rx_length;           /* csi01 receive data length */
00000000                      138  	;***       70 : extern volatile uint16_t  g_csi01_rx_count;            /* csi01 receive data count */
00000000                      139  	;***       71 : extern volatile uint8_t * gp_csi01_tx_address;         /* csi01 send buffer address */
00000000                      140  	;***       72 : extern volatile uint16_t  g_csi01_send_length;         /* csi01 send data length */
00000000                      141  	;***       73 : extern volatile uint16_t  g_csi01_tx_count;            /* csi01 send data count */
00000000                      142  	;***       74 : extern volatile uint8_t * gp_uart2_tx_address;         /* uart2 send buffer address */
00000000                      143  	;***       75 : extern volatile uint16_t  g_uart2_tx_count;            /* uart2 send data number */
00000000                      144  	;***       76 : extern volatile uint8_t * gp_uart2_rx_address;         /* uart2 receive buffer address */
00000000                      145  	;***       77 : extern volatile uint16_t  g_uart2_rx_count;            /* uart2 receive data number */
00000000                      146  	;***       78 : extern volatile uint16_t  g_uart2_rx_length;           /* uart2 receive data length */
00000000                      147  	;***       79 : extern volatile uint8_t * gp_uart3_tx_address;         /* uart3 send buffer address */
00000000                      148  	;***       80 : extern volatile uint16_t  g_uart3_tx_count;            /* uart3 send data number */
00000000                      149  	;***       81 : extern volatile uint8_t * gp_uart3_rx_address;         /* uart3 receive buffer address */
00000000                      150  	;***       82 : extern volatile uint16_t  g_uart3_rx_count;            /* uart3 receive data number */
00000000                      151  	;***       83 : extern volatile uint16_t  g_uart3_rx_length;           /* uart3 receive data length */
00000000                      152  	;***       84 : /* Start user code for global. Do not edit comment generated here */
00000000                      153  	;***       85 : volatile uint8_t send_response_flag, send_response_time_flag, send_response_number_flag, recived_time_setting_flag
00000000                      154  	;***       86 : ,send_respone_status_flag, recived_number_setting_flag;
00000000                      155  	;***       87 : volatile struct Communicaition_flag_s commnunication_flag;
00000000                      156  	;***       88 : volatile uint8_t g_csi_count, g_csi_err, g_csi_send_end, g_csi_rev_end, g_uart1_send, g_uart2_sendend, g_uart2_receive;
00000000                      157  	;***       89 : uint8_t g_rx_data[4*40];
00000000                      158  	;***       90 : uint8_t g_uart3_rx_data[8];
00000000                      159  	;***       91 : volatile uint8_t g_uart2_fault;
00000000                      160  	;***       92 : volatile uint8_t g_uart3_sendend;
00000000                      161  	;***       93 : uint8_t isCommandNeedResponse(uint8_t *data){
00000000                      162  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 93
00000000 14                   163  	movw de, ax
00000001                      164  	;***       94 : 	if((data[0] == H_SET)&&(data[1] == NEXT_ANIMATION)){
00000001                      165  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 94
00000001 89                   166  	mov a, [de]
00000002 70                   167  	mov x, a
00000003 4C53                 168  	cmp a, #0x53
00000005 DF00                 169  	bnz $.BB@LABEL@1_2
00000007                      170  .BB@LABEL@1_1:	; bb
00000007 8A01                 171  	mov a, [de+0x01]
00000009 4C13                 172  	cmp a, #0x13
0000000B DD00                 173  	bz $.BB@LABEL@1_7
0000000D                      174  .BB@LABEL@1_2:	; if_break_bb
0000000D 60                   175  	mov a, x
0000000E                      176  	;***       95 : 		return 0;
0000000E                      177  	;***       96 : 	}
0000000E                      178  	;***       97 : 	switch ((enum UART_header_e)*data) {
0000000E                      179  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 97
0000000E 0CBD                 180  	add a, #0xBD
00000010 DD00                 181  	bz $.BB@LABEL@1_6
00000012                      182  .BB@LABEL@1_3:	; if_break_bb
00000012 0CFE                 183  	add a, #0xFE
00000014 DD00                 184  	bz $.BB@LABEL@1_6
00000016                      185  .BB@LABEL@1_4:	; if_break_bb
00000016 0CF3                 186  	add a, #0xF3
00000018 DD00                 187  	bz $.BB@LABEL@1_6
0000001A                      188  .BB@LABEL@1_5:	; if_break_bb
0000001A 91                   189  	dec a
0000001B DF00                 190  	bnz $.BB@LABEL@1_7
0000001D                      191  .BB@LABEL@1_6:	; switch_clause_bb26
0000001D E50000               192  	oneb !LOWW(_commnunication_flag)
00000020 E1                   193  	oneb a
00000021                      194  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 117
00000021 D7                   195  	ret
00000022                      196  .BB@LABEL@1_7:	; bb30
00000022                      197  	;***       98 : //		case H_ALARM:
00000022                      198  	;***       99 : //			commnunication_flag.send_response_flag = 1;
00000022                      199  	;***      100 : //			break;
00000022                      200  	;***      101 : 		case H_CLEAR:
00000022                      201  	;***      102 : 			commnunication_flag.send_response_flag = 1;
00000022                      202  	;***      103 : 			break;
00000022                      203  	;***      104 : 		case H_ERROR:
00000022                      204  	;***      105 : 			commnunication_flag.send_response_flag = 1;
00000022                      205  	;***      106 : 			break;
00000022                      206  	;***      107 : 		case H_READ:
00000022                      207  	;***      108 : 			commnunication_flag.send_response_flag = 1;
00000022                      208  	;***      109 : 			break;
00000022                      209  	;***      110 : 		case H_SET:
00000022                      210  	;***      111 : 			commnunication_flag.send_response_flag = 1;
00000022                      211  	;***      112 : 			break;
00000022                      212  	;***      113 : 		default:
00000022                      213  	;***      114 : 			return 0;
00000022                      214  	;***      115 : 	}
00000022                      215  	;***      116 : 	return 1;
00000022                      216  	;***      117 : }
00000022 F1                   217  	clrb a
00000023 D7                   218  	ret
00000000                      219  	.SECTION .text,TEXT
00000000                      220  _r_uart1_interrupt_receive@1	.vector 0x0026
00000000                      221  _r_uart1_interrupt_receive@1:
00000000                      222  	.STACK _r_uart1_interrupt_receive@1 = 16
00000000                      223  	;***      118 : /* End user code. Do not edit comment generated here */
00000000                      224  	;***      119 : 
00000000                      225  	;***      120 : /***********************************************************************************************************************
00000000                      226  	;***      121 : * Function Name: r_uart1_interrupt_receive
00000000                      227  	;***      122 : * Description  : This function is INTSR1 interrupt service routine.
00000000                      228  	;***      123 : * Arguments    : None
00000000                      229  	;***      124 : * Return Value : None
00000000                      230  	;***      125 : ***********************************************************************************************************************/
00000000                      231  	;***      126 : static void __near r_uart1_interrupt_receive(void)
00000000                      232  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 126
00000000 C1                   233  	push ax
00000001 C3                   234  	push bc
00000002 C5                   235  	push de
00000003 C7                   236  	push hl
00000004 8EFD                 237  	mov a, es
00000006 70                   238  	mov x, a
00000007 8EFC                 239  	mov a, cs
00000009 C1                   240  	push ax
0000000A C7                   241  	push hl
0000000B                      242  	;***      127 : {
0000000B                      243  	;***      128 :     volatile uint8_t rx_data;
0000000B                      244  	;***      129 :     volatile uint8_t err_type;
0000000B                      245  	;***      130 :     
0000000B                      246  	;***      131 :     err_type = (uint8_t)(SSR03 & 0x0007U);
0000000B                      247  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 131
0000000B AF0601               248  	movw ax, !0x0106
0000000E 60                   249  	mov a, x
0000000F 5C07                 250  	and a, #0x07
00000011 9800                 251  	mov [sp+0x00], a
00000013                      252  	;***      132 :     SIR03 = (uint16_t)err_type;
00000013                      253  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 132
00000013 8800                 254  	mov a, [sp+0x00]
00000015 318E                 255  	shrw ax, 8+0x00000
00000017 BF0E01               256  	movw !0x010E, ax
0000001A                      257  	;***      133 : 
0000001A                      258  	;***      134 :     if (err_type != 0U)
0000001A                      259  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 134
0000001A 8800                 260  	mov a, [sp+0x00]
0000001C D1                   261  	cmp0 a
0000001D DD00                 262  	bz $.BB@LABEL@2_2
0000001F                      263  .BB@LABEL@2_1:	; if_then_bb
0000001F                      264  	;***      135 :     {
0000001F                      265  	;***      136 :         r_uart1_callback_error(err_type);
0000001F                      266  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 136
0000001F 8800                 267  	mov a, [sp+0x00]
00000021 FC000000             268  	call !!_r_uart1_callback_error@1
00000025                      269  .BB@LABEL@2_2:	; if_break_bb
00000025                      270  	;***      137 :     }
00000025                      271  	;***      138 :     
00000025                      272  	;***      139 :     rx_data = RXD1;
00000025                      273  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 139
00000025 8E46                 274  	mov a, 0xFFF46
00000027 9801                 275  	mov [sp+0x01], a
00000029                      276  	;***      140 : 
00000029                      277  	;***      141 :     if (g_uart1_rx_length > g_uart1_rx_count)
00000029                      278  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 141
00000029 AF0000               279  	movw ax, !LOWW(_g_uart1_rx_length)
0000002C 420000               280  	cmpw ax, !LOWW(_g_uart1_rx_count)
0000002F 8801                 281  	mov a, [sp+0x01]
00000031 61D300               282  	bnh $.BB@LABEL@2_6
00000034                      283  .BB@LABEL@2_3:	; if_then_bb18
00000034                      284  	;***      142 :     {
00000034                      285  	;***      143 :         *gp_uart1_rx_address = rx_data;
00000034                      286  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 143
00000034 EB0000               287  	movw de, !LOWW(_gp_uart1_rx_address)
00000037 99                   288  	mov [de], a
00000038                      289  	;***      144 :         gp_uart1_rx_address++;
00000038                      290  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 144
00000038 A20000               291  	incw !LOWW(_gp_uart1_rx_address)
0000003B                      292  	;***      145 :         g_uart1_rx_count++;
0000003B                      293  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 145
0000003B A20000               294  	incw !LOWW(_g_uart1_rx_count)
0000003E                      295  	;***      146 : 
0000003E                      296  	;***      147 :         if (g_uart1_rx_length == g_uart1_rx_count)
0000003E                      297  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 147
0000003E AF0000               298  	movw ax, !LOWW(_g_uart1_rx_length)
00000041 420000               299  	cmpw ax, !LOWW(_g_uart1_rx_count)
00000044 61F8                 300  	sknz
00000046                      301  .BB@LABEL@2_4:	; if_then_bb30
00000046                      302  	;***      148 :         {
00000046                      303  	;***      149 :             r_uart1_callback_receiveend();
00000046                      304  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 149
00000046 FC000000             305  	call !!_r_uart1_callback_receiveend@1
0000004A                      306  .BB@LABEL@2_5:	; return
0000004A C6                   307  	pop hl
0000004B C0                   308  	pop ax
0000004C 9EFC                 309  	mov cs, a
0000004E 60                   310  	mov a, x
0000004F 9EFD                 311  	mov es, a
00000051 C6                   312  	pop hl
00000052 C4                   313  	pop de
00000053 C2                   314  	pop bc
00000054 C0                   315  	pop ax
00000055                      316  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 156
00000055 61FC                 317  	reti
00000057                      318  .BB@LABEL@2_6:	; if_else_bb
00000057                      319  	;***      150 :         }
00000057                      320  	;***      151 :     }
00000057                      321  	;***      152 :     else
00000057                      322  	;***      153 :     {
00000057                      323  	;***      154 :         r_uart1_callback_softwareoverrun(rx_data);
00000057                      324  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 154
00000057 318E                 325  	shrw ax, 8+0x00000
00000059 FC000000             326  	call !!_r_uart1_callback_softwareoverrun@1
0000005D EF00                 327  	br $.BB@LABEL@2_5
0000005F                      328  _r_uart1_interrupt_send@1	.vector 0x0024
0000005F                      329  _r_uart1_interrupt_send@1:
0000005F                      330  	.STACK _r_uart1_interrupt_send@1 = 14
0000005F                      331  	;***      155 :     }
0000005F                      332  	;***      156 : }
0000005F                      333  	;***      157 : 
0000005F                      334  	;***      158 : /***********************************************************************************************************************
0000005F                      335  	;***      159 : * Function Name: r_uart1_interrupt_send
0000005F                      336  	;***      160 : * Description  : This function is INTST1 interrupt service routine.
0000005F                      337  	;***      161 : * Arguments    : None
0000005F                      338  	;***      162 : * Return Value : None
0000005F                      339  	;***      163 : ***********************************************************************************************************************/
0000005F                      340  	;***      164 : static void __near r_uart1_interrupt_send(void)
0000005F                      341  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 164
0000005F C1                   342  	push ax
00000060 C3                   343  	push bc
00000061 C5                   344  	push de
00000062 C7                   345  	push hl
00000063 8EFD                 346  	mov a, es
00000065 70                   347  	mov x, a
00000066 8EFC                 348  	mov a, cs
00000068 C1                   349  	push ax
00000069                      350  	;***      165 : {
00000069                      351  	;***      166 :     if (g_uart1_tx_count > 0U)
00000069                      352  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 166
00000069 AF0000               353  	movw ax, !LOWW(_g_uart1_tx_count)
0000006C F7                   354  	clrw bc
0000006D 43                   355  	cmpw ax, bc
0000006E DF00                 356  	bnz $.BB@LABEL@3_3
00000070                      357  .BB@LABEL@3_1:	; if_else_bb
00000070                      358  	;***      167 :     {
00000070                      359  	;***      168 :         TXD1 = *gp_uart1_tx_address;
00000070                      360  	;***      169 :         gp_uart1_tx_address++;
00000070                      361  	;***      170 :         g_uart1_tx_count--;
00000070                      362  	;***      171 :     }
00000070                      363  	;***      172 :     else
00000070                      364  	;***      173 :     {
00000070                      365  	;***      174 :         r_uart1_callback_sendend();
00000070                      366  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 174
00000070 FC000000             367  	call !!_r_uart1_callback_sendend@1
00000074                      368  .BB@LABEL@3_2:	; if_else_bb
00000074 C0                   369  	pop ax
00000075 9EFC                 370  	mov cs, a
00000077 60                   371  	mov a, x
00000078 9EFD                 372  	mov es, a
0000007A C6                   373  	pop hl
0000007B C4                   374  	pop de
0000007C C2                   375  	pop bc
0000007D C0                   376  	pop ax
0000007E                      377  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 176
0000007E 61FC                 378  	reti
00000080                      379  .BB@LABEL@3_3:	; if_then_bb
00000080                      380  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 168
00000080 EB0000               381  	movw de, !LOWW(_gp_uart1_tx_address)
00000083 89                   382  	mov a, [de]
00000084 9E44                 383  	mov 0xFFF44, a
00000086                      384  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 169
00000086 A5                   385  	incw de
00000087 15                   386  	movw ax, de
00000088 BF0000               387  	movw !LOWW(_gp_uart1_tx_address), ax
0000008B                      388  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 170
0000008B B20000               389  	decw !LOWW(_g_uart1_tx_count)
0000008E EF00                 390  	br $.BB@LABEL@3_2
00000024                      391  	.SECTION .textf,TEXTF
00000024                      392  _r_uart1_callback_receiveend@1:
00000024                      393  	.STACK _r_uart1_callback_receiveend@1 = 4
00000024                      394  	;***      175 :     }
00000024                      395  	;***      176 : }
00000024                      396  	;***      177 : 
00000024                      397  	;***      178 : /***********************************************************************************************************************
00000024                      398  	;***      179 : * Function Name: r_uart1_callback_receiveend
00000024                      399  	;***      180 : * Description  : This function is a callback function when UART1 finishes reception.
00000024                      400  	;***      181 : * Arguments    : None
00000024                      401  	;***      182 : * Return Value : None
00000024                      402  	;***      183 : ***********************************************************************************************************************/
00000024                      403  	;***      184 : static void r_uart1_callback_receiveend(void)
00000024                      404  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 184
00000024 D7                   405  	ret
00000025                      406  _r_uart1_callback_softwareoverrun@1:
00000025                      407  	.STACK _r_uart1_callback_softwareoverrun@1 = 4
00000025                      408  	;***      185 : {
00000025                      409  	;***      186 :     /* Start user code. Do not edit comment generated here */
00000025                      410  	;***      187 :     /* End user code. Do not edit comment generated here */
00000025                      411  	;***      188 : }
00000025                      412  	;***      189 : 
00000025                      413  	;***      190 : /***********************************************************************************************************************
00000025                      414  	;***      191 : * Function Name: r_uart1_callback_softwareoverrun
00000025                      415  	;***      192 : * Description  : This function is a callback function when UART1 receives an overflow data.
00000025                      416  	;***      193 : * Arguments    : rx_data -
00000025                      417  	;***      194 : *                    receive data
00000025                      418  	;***      195 : * Return Value : None
00000025                      419  	;***      196 : ***********************************************************************************************************************/
00000025                      420  	;***      197 : static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
00000025                      421  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 197
00000025 D7                   422  	ret
00000026                      423  _r_uart1_callback_sendend@1:
00000026                      424  	.STACK _r_uart1_callback_sendend@1 = 4
00000026                      425  	;***      198 : {
00000026                      426  	;***      199 :     /* Start user code. Do not edit comment generated here */
00000026                      427  	;***      200 :     /* End user code. Do not edit comment generated here */
00000026                      428  	;***      201 : }
00000026                      429  	;***      202 : 
00000026                      430  	;***      203 : /***********************************************************************************************************************
00000026                      431  	;***      204 : * Function Name: r_uart1_callback_sendend
00000026                      432  	;***      205 : * Description  : This function is a callback function when UART1 finishes transmission.
00000026                      433  	;***      206 : * Arguments    : None
00000026                      434  	;***      207 : * Return Value : None
00000026                      435  	;***      208 : ***********************************************************************************************************************/
00000026                      436  	;***      209 : static void r_uart1_callback_sendend(void)
00000026                      437  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 209
00000026 D7                   438  	ret
00000027                      439  _r_uart1_callback_error@1:
00000027                      440  	.STACK _r_uart1_callback_error@1 = 4
00000027                      441  	;***      210 : {
00000027                      442  	;***      211 :     /* Start user code. Do not edit comment generated here */
00000027                      443  	;***      212 :     /* End user code. Do not edit comment generated here */
00000027                      444  	;***      213 : }
00000027                      445  	;***      214 : 
00000027                      446  	;***      215 : /***********************************************************************************************************************
00000027                      447  	;***      216 : * Function Name: r_uart1_callback_error
00000027                      448  	;***      217 : * Description  : This function is a callback function when UART1 reception error occurs.
00000027                      449  	;***      218 : * Arguments    : err_type -
00000027                      450  	;***      219 : *                    error type value
00000027                      451  	;***      220 : * Return Value : None
00000027                      452  	;***      221 : ***********************************************************************************************************************/
00000027                      453  	;***      222 : static void r_uart1_callback_error(uint8_t err_type)
00000027                      454  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 222
00000027 D7                   455  	ret
00000090                      456  	.SECTION .text,TEXT
00000090                      457  _r_csi00_interrupt@1	.vector 0x001E
00000090                      458  _r_csi00_interrupt@1:
00000090                      459  	.STACK _r_csi00_interrupt@1 = 16
00000090                      460  	;***      223 : {
00000090                      461  	;***      224 :     /* Start user code. Do not edit comment generated here */
00000090                      462  	;***      225 :     /* End user code. Do not edit comment generated here */
00000090                      463  	;***      226 : }
00000090                      464  	;***      227 : 
00000090                      465  	;***      228 : /***********************************************************************************************************************
00000090                      466  	;***      229 : * Function Name: r_csi00_interrupt
00000090                      467  	;***      230 : * Description  : This function is INTCSI00 interrupt service routine.
00000090                      468  	;***      231 : * Arguments    : None
00000090                      469  	;***      232 : * Return Value : None
00000090                      470  	;***      233 : ***********************************************************************************************************************/
00000090                      471  	;***      234 : static void __near r_csi00_interrupt(void)
00000090                      472  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 234
00000090 C1                   473  	push ax
00000091 C3                   474  	push bc
00000092 C5                   475  	push de
00000093 C7                   476  	push hl
00000094 8EFD                 477  	mov a, es
00000096 70                   478  	mov x, a
00000097 8EFC                 479  	mov a, cs
00000099 C1                   480  	push ax
0000009A C7                   481  	push hl
0000009B                      482  	;***      235 : {
0000009B                      483  	;***      236 :     volatile uint8_t err_type;
0000009B                      484  	;***      237 : 
0000009B                      485  	;***      238 :     err_type = (uint8_t)(SSR00 & _0001_SAU_OVERRUN_ERROR);
0000009B                      486  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 238
0000009B AF0001               487  	movw ax, !0x0100
0000009E 60                   488  	mov a, x
0000009F 5C01                 489  	and a, #0x01
000000A1 9800                 490  	mov [sp+0x00], a
000000A3                      491  	;***      239 :     SIR00 = (uint16_t)err_type;
000000A3                      492  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 239
000000A3 8800                 493  	mov a, [sp+0x00]
000000A5 318E                 494  	shrw ax, 8+0x00000
000000A7 BF0801               495  	movw !0x0108, ax
000000AA                      496  	;***      240 : 
000000AA                      497  	;***      241 :     if (err_type != 1U)
000000AA                      498  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 241
000000AA 8800                 499  	mov a, [sp+0x00]
000000AC 91                   500  	dec a
000000AD DF00                 501  	bnz $.BB@LABEL@8_2
000000AF                      502  .BB@LABEL@8_1:	; return
000000AF C6                   503  	pop hl
000000B0 C0                   504  	pop ax
000000B1 9EFC                 505  	mov cs, a
000000B3 60                   506  	mov a, x
000000B4 9EFD                 507  	mov es, a
000000B6 C6                   508  	pop hl
000000B7 C4                   509  	pop de
000000B8 C2                   510  	pop bc
000000B9 C0                   511  	pop ax
000000BA                      512  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 254
000000BA 61FC                 513  	reti
000000BC                      514  .BB@LABEL@8_2:	; if_then_bb
000000BC                      515  	;***      242 :     {
000000BC                      516  	;***      243 :         if (g_csi00_tx_count > 0U)
000000BC                      517  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 243
000000BC AF0000               518  	movw ax, !LOWW(_g_csi00_tx_count)
000000BF F7                   519  	clrw bc
000000C0 43                   520  	cmpw ax, bc
000000C1 DF00                 521  	bnz $.BB@LABEL@8_4
000000C3                      522  .BB@LABEL@8_3:	; if_else_bb
000000C3                      523  	;***      244 :         {
000000C3                      524  	;***      245 :             SIO00 = *gp_csi00_tx_address;
000000C3                      525  	;***      246 :             gp_csi00_tx_address++;
000000C3                      526  	;***      247 :             g_csi00_tx_count--;
000000C3                      527  	;***      248 :         }
000000C3                      528  	;***      249 :         else
000000C3                      529  	;***      250 :         {
000000C3                      530  	;***      251 :             r_csi00_callback_sendend();    /* complete send */
000000C3                      531  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 251
000000C3 FC000000             532  	call !!_r_csi00_callback_sendend@1
000000C7 EF00                 533  	br $.BB@LABEL@8_1
000000C9                      534  .BB@LABEL@8_4:	; if_then_bb14
000000C9                      535  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 245
000000C9 EB0000               536  	movw de, !LOWW(_gp_csi00_tx_address)
000000CC 89                   537  	mov a, [de]
000000CD 9D10                 538  	mov 0xFFF10, a
000000CF                      539  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 246
000000CF A5                   540  	incw de
000000D0 15                   541  	movw ax, de
000000D1 BF0000               542  	movw !LOWW(_gp_csi00_tx_address), ax
000000D4                      543  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 247
000000D4 B20000               544  	decw !LOWW(_g_csi00_tx_count)
000000D7 EF00                 545  	br $.BB@LABEL@8_1
00000028                      546  	.SECTION .textf,TEXTF
00000028                      547  _r_csi00_callback_sendend@1:
00000028                      548  	.STACK _r_csi00_callback_sendend@1 = 4
00000028                      549  	;***      252 :         }
00000028                      550  	;***      253 :     }
00000028                      551  	;***      254 : }
00000028                      552  	;***      255 : 
00000028                      553  	;***      256 : /***********************************************************************************************************************
00000028                      554  	;***      257 : * Function Name: r_csi00_callback_sendend
00000028                      555  	;***      258 : * Description  : This function is a callback function when CSI00 finishes transmission.
00000028                      556  	;***      259 : * Arguments    : None
00000028                      557  	;***      260 : * Return Value : None
00000028                      558  	;***      261 : ***********************************************************************************************************************/
00000028                      559  	;***      262 : static void r_csi00_callback_sendend(void)
00000028                      560  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 262
00000028 D7                   561  	ret
000000D9                      562  	.SECTION .text,TEXT
000000D9                      563  _r_csi01_interrupt@1	.vector 0x0020
000000D9                      564  _r_csi01_interrupt@1:
000000D9                      565  	.STACK _r_csi01_interrupt@1 = 16
000000D9                      566  	;***      263 : {
000000D9                      567  	;***      264 :     /* Start user code. Do not edit comment generated here */
000000D9                      568  	;***      265 :     /* End user code. Do not edit comment generated here */
000000D9                      569  	;***      266 : }
000000D9                      570  	;***      267 : 
000000D9                      571  	;***      268 : /***********************************************************************************************************************
000000D9                      572  	;***      269 : * Function Name: r_csi01_interrupt
000000D9                      573  	;***      270 : * Description  : This function is INTCSI01 interrupt service routine.
000000D9                      574  	;***      271 : * Arguments    : None
000000D9                      575  	;***      272 : * Return Value : None
000000D9                      576  	;***      273 : ***********************************************************************************************************************/
000000D9                      577  	;***      274 : static void __near r_csi01_interrupt(void)
000000D9                      578  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 274
000000D9 C1                   579  	push ax
000000DA C3                   580  	push bc
000000DB C5                   581  	push de
000000DC C7                   582  	push hl
000000DD 8EFD                 583  	mov a, es
000000DF 70                   584  	mov x, a
000000E0 8EFC                 585  	mov a, cs
000000E2 C1                   586  	push ax
000000E3 C7                   587  	push hl
000000E4                      588  	;***      275 : {
000000E4                      589  	;***      276 :     volatile uint8_t err_type;
000000E4                      590  	;***      277 :     volatile uint8_t sio_dummy;
000000E4                      591  	;***      278 : 
000000E4                      592  	;***      279 :     err_type = (uint8_t)(SSR01 & _0001_SAU_OVERRUN_ERROR);
000000E4                      593  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 279
000000E4 AF0201               594  	movw ax, !0x0102
000000E7 60                   595  	mov a, x
000000E8 5C01                 596  	and a, #0x01
000000EA 9800                 597  	mov [sp+0x00], a
000000EC                      598  	;***      280 :     SIR01 = (uint16_t)err_type;
000000EC                      599  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 280
000000EC 8800                 600  	mov a, [sp+0x00]
000000EE 318E                 601  	shrw ax, 8+0x00000
000000F0 BF0A01               602  	movw !0x010A, ax
000000F3                      603  	;***      281 : 
000000F3                      604  	;***      282 :     if (1U == err_type)
000000F3                      605  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 282
000000F3 8800                 606  	mov a, [sp+0x00]
000000F5 91                   607  	dec a
000000F6 DF00                 608  	bnz $.BB@LABEL@10_2
000000F8                      609  .BB@LABEL@10_1:	; if_then_bb
000000F8                      610  	;***      283 :     {
000000F8                      611  	;***      284 :         r_csi01_callback_error(err_type);    /* overrun error occurs */
000000F8                      612  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 284
000000F8 8800                 613  	mov a, [sp+0x00]
000000FA FC000000             614  	call !!_r_csi01_callback_error@1
000000FE EF00                 615  	br $.BB@LABEL@10_15
00000100                      616  .BB@LABEL@10_2:	; if_else_bb
00000100                      617  	;***      285 :     }
00000100                      618  	;***      286 :     else
00000100                      619  	;***      287 :     {
00000100                      620  	;***      288 :         if (g_csi01_tx_count > 0U)
00000100                      621  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 288
00000100 AF0000               622  	movw ax, !LOWW(_g_csi01_tx_count)
00000103 F7                   623  	clrw bc
00000104 43                   624  	cmpw ax, bc
00000105 DF00                 625  	bnz $.BB@LABEL@10_8
00000107                      626  .BB@LABEL@10_3:	; if_else_bb42
00000107                      627  	;***      289 :         {
00000107                      628  	;***      290 :             if (0U != gp_csi01_rx_address)
00000107                      629  	;***      291 :             {
00000107                      630  	;***      292 :                 *gp_csi01_rx_address = SIO01;
00000107                      631  	;***      293 :                 gp_csi01_rx_address++;
00000107                      632  	;***      294 :             }
00000107                      633  	;***      295 :             else
00000107                      634  	;***      296 :             {
00000107                      635  	;***      297 :                 sio_dummy = SIO01;
00000107                      636  	;***      298 :             }
00000107                      637  	;***      299 : 
00000107                      638  	;***      300 :             if (0U != gp_csi01_tx_address)
00000107                      639  	;***      301 :             {
00000107                      640  	;***      302 :                 SIO01 = *gp_csi01_tx_address;
00000107                      641  	;***      303 :                 gp_csi01_tx_address++;
00000107                      642  	;***      304 :             }
00000107                      643  	;***      305 :             else
00000107                      644  	;***      306 :             {
00000107                      645  	;***      307 :                 SIO01 = 0xFFU;
00000107                      646  	;***      308 :             }
00000107                      647  	;***      309 : 
00000107                      648  	;***      310 :             g_csi01_tx_count--;
00000107                      649  	;***      311 :         }
00000107                      650  	;***      312 :         else 
00000107                      651  	;***      313 :         {
00000107                      652  	;***      314 :             if (0U == g_csi01_tx_count)
00000107                      653  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 314
00000107 AF0000               654  	movw ax, !LOWW(_g_csi01_tx_count)
0000010A 43                   655  	cmpw ax, bc
0000010B DF00                 656  	bnz $.BB@LABEL@10_7
0000010D                      657  .BB@LABEL@10_4:	; if_then_bb47
0000010D                      658  	;***      315 :             {
0000010D                      659  	;***      316 :                 if (0U != gp_csi01_rx_address)
0000010D                      660  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 316
0000010D AF0000               661  	movw ax, !LOWW(_gp_csi01_rx_address)
00000110 43                   662  	cmpw ax, bc
00000111 DF00                 663  	bnz $.BB@LABEL@10_6
00000113                      664  .BB@LABEL@10_5:	; if_else_bb55
00000113                      665  	;***      317 :                 {
00000113                      666  	;***      318 :                     *gp_csi01_rx_address = SIO01;
00000113                      667  	;***      319 :                 }
00000113                      668  	;***      320 :                 else
00000113                      669  	;***      321 :                 {
00000113                      670  	;***      322 :                     sio_dummy = SIO01;
00000113                      671  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 322
00000113 8D12                 672  	mov a, 0xFFF12
00000115 9801                 673  	mov [sp+0x01], a
00000117 EF00                 674  	br $.BB@LABEL@10_7
00000119                      675  .BB@LABEL@10_6:	; if_then_bb52
00000119 14                   676  	movw de, ax
0000011A                      677  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 318
0000011A 8D12                 678  	mov a, 0xFFF12
0000011C 99                   679  	mov [de], a
0000011D                      680  .BB@LABEL@10_7:	; if_break_bb59
0000011D                      681  	;***      323 :                 }
0000011D                      682  	;***      324 :             }
0000011D                      683  	;***      325 : 
0000011D                      684  	;***      326 :             r_csi01_callback_sendend();    /* complete send */
0000011D                      685  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 326
0000011D FC000000             686  	call !!_r_csi01_callback_sendend@1
00000121                      687  	;***      327 :             r_csi01_callback_receiveend();    /* complete receive */
00000121                      688  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 327
00000121 FC000000             689  	call !!_r_csi01_callback_receiveend@1
00000125 EF00                 690  	br $.BB@LABEL@10_15
00000127                      691  .BB@LABEL@10_8:	; if_then_bb16
00000127                      692  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 290
00000127 AF0000               693  	movw ax, !LOWW(_gp_csi01_rx_address)
0000012A 43                   694  	cmpw ax, bc
0000012B DF00                 695  	bnz $.BB@LABEL@10_10
0000012D                      696  .BB@LABEL@10_9:	; if_else_bb26
0000012D                      697  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 297
0000012D 8D12                 698  	mov a, 0xFFF12
0000012F 9801                 699  	mov [sp+0x01], a
00000131 EF00                 700  	br $.BB@LABEL@10_11
00000133                      701  .BB@LABEL@10_10:	; if_then_bb21
00000133 14                   702  	movw de, ax
00000134                      703  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 292
00000134 8D12                 704  	mov a, 0xFFF12
00000136 99                   705  	mov [de], a
00000137                      706  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 293
00000137 A20000               707  	incw !LOWW(_gp_csi01_rx_address)
0000013A                      708  .BB@LABEL@10_11:	; if_break_bb
0000013A                      709  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 300
0000013A AF0000               710  	movw ax, !LOWW(_gp_csi01_tx_address)
0000013D 43                   711  	cmpw ax, bc
0000013E DF00                 712  	bnz $.BB@LABEL@10_13
00000140                      713  .BB@LABEL@10_12:	; if_else_bb38
00000140                      714  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 307
00000140 CD12FF               715  	mov 0xFFF12, #0xFF
00000143 EF00                 716  	br $.BB@LABEL@10_14
00000145                      717  .BB@LABEL@10_13:	; if_then_bb32
00000145 14                   718  	movw de, ax
00000146                      719  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 302
00000146 89                   720  	mov a, [de]
00000147 9D12                 721  	mov 0xFFF12, a
00000149                      722  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 303
00000149 A5                   723  	incw de
0000014A 15                   724  	movw ax, de
0000014B BF0000               725  	movw !LOWW(_gp_csi01_tx_address), ax
0000014E                      726  .BB@LABEL@10_14:	; if_break_bb39
0000014E                      727  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 310
0000014E B20000               728  	decw !LOWW(_g_csi01_tx_count)
00000151                      729  .BB@LABEL@10_15:	; if_break_bb39
00000151 C6                   730  	pop hl
00000152 C0                   731  	pop ax
00000153 9EFC                 732  	mov cs, a
00000155 60                   733  	mov a, x
00000156 9EFD                 734  	mov es, a
00000158 C6                   735  	pop hl
00000159 C4                   736  	pop de
0000015A C2                   737  	pop bc
0000015B C0                   738  	pop ax
0000015C                      739  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 330
0000015C 61FC                 740  	reti
00000029                      741  	.SECTION .textf,TEXTF
00000029                      742  _r_csi01_callback_receiveend@1:
00000029                      743  	.STACK _r_csi01_callback_receiveend@1 = 4
00000029                      744  	;***      328 :         }
00000029                      745  	;***      329 :     }
00000029                      746  	;***      330 : }
00000029                      747  	;***      331 : 
00000029                      748  	;***      332 : /***********************************************************************************************************************
00000029                      749  	;***      333 : * Function Name: r_csi01_callback_receiveend
00000029                      750  	;***      334 : * Description  : This function is a callback function when CSI01 finishes reception.
00000029                      751  	;***      335 : * Arguments    : None
00000029                      752  	;***      336 : * Return Value : None
00000029                      753  	;***      337 : ***********************************************************************************************************************/
00000029                      754  	;***      338 : static void r_csi01_callback_receiveend(void)
00000029                      755  	;***      339 : {
00000029                      756  	;***      340 :     /* Start user code. Do not edit comment generated here */
00000029                      757  	;***      341 : 	g_csi_rev_end++;
00000029                      758  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 341
00000029 A00000               759  	inc !LOWW(_g_csi_rev_end)
0000002C                      760  	;***      342 : 	R_CSI01_Stop();
0000002C                      761  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 342
0000002C EC000000             762  	br !!_R_CSI01_Stop
00000030                      763  _r_csi01_callback_error@1:
00000030                      764  	.STACK _r_csi01_callback_error@1 = 4
00000030                      765  	;***      343 :     /* End user code. Do not edit comment generated here */
00000030                      766  	;***      344 : }
00000030                      767  	;***      345 : 
00000030                      768  	;***      346 : /***********************************************************************************************************************
00000030                      769  	;***      347 : * Function Name: r_csi01_callback_error
00000030                      770  	;***      348 : * Description  : This function is a callback function when CSI01 reception error occurs.
00000030                      771  	;***      349 : * Arguments    : err_type -
00000030                      772  	;***      350 : *                    error type value
00000030                      773  	;***      351 : * Return Value : None
00000030                      774  	;***      352 : ***********************************************************************************************************************/
00000030                      775  	;***      353 : static void r_csi01_callback_error(uint8_t err_type)
00000030                      776  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 353
00000030 D7                   777  	ret
00000031                      778  _r_csi01_callback_sendend@1:
00000031                      779  	.STACK _r_csi01_callback_sendend@1 = 4
00000031                      780  	;***      354 : {
00000031                      781  	;***      355 :     /* Start user code. Do not edit comment generated here */
00000031                      782  	;***      356 : 
00000031                      783  	;***      357 :     /* End user code. Do not edit comment generated here */
00000031                      784  	;***      358 : }
00000031                      785  	;***      359 : 
00000031                      786  	;***      360 : /***********************************************************************************************************************
00000031                      787  	;***      361 : * Function Name: r_csi01_callback_sendend
00000031                      788  	;***      362 : * Description  : This function is a callback function when CSI01 finishes transmission.
00000031                      789  	;***      363 : * Arguments    : None
00000031                      790  	;***      364 : * Return Value : None
00000031                      791  	;***      365 : ***********************************************************************************************************************/
00000031                      792  	;***      366 : static void r_csi01_callback_sendend(void)
00000031                      793  	;***      367 : {
00000031                      794  	;***      368 :     /* Start user code. Do not edit comment generated here */
00000031                      795  	;***      369 : 	g_csi_send_end++;
00000031                      796  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 369
00000031 A00000               797  	inc !LOWW(_g_csi_send_end)
00000034 D7                   798  	ret
0000015E                      799  	.SECTION .text,TEXT
0000015E                      800  _r_uart2_interrupt_receive@1	.vector 0x0016
0000015E                      801  _r_uart2_interrupt_receive@1:
0000015E                      802  	.STACK _r_uart2_interrupt_receive@1 = 16
0000015E                      803  	;***      370 :     /* End user code. Do not edit comment generated here */
0000015E                      804  	;***      371 : }
0000015E                      805  	;***      372 : 
0000015E                      806  	;***      373 : /***********************************************************************************************************************
0000015E                      807  	;***      374 : * Function Name: r_uart2_interrupt_receive
0000015E                      808  	;***      375 : * Description  : This function is INTSR2 interrupt service routine.
0000015E                      809  	;***      376 : * Arguments    : None
0000015E                      810  	;***      377 : * Return Value : None
0000015E                      811  	;***      378 : ***********************************************************************************************************************/
0000015E                      812  	;***      379 : static void __near r_uart2_interrupt_receive(void)
0000015E                      813  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 379
0000015E C1                   814  	push ax
0000015F C3                   815  	push bc
00000160 C5                   816  	push de
00000161 C7                   817  	push hl
00000162 8EFD                 818  	mov a, es
00000164 70                   819  	mov x, a
00000165 8EFC                 820  	mov a, cs
00000167 C1                   821  	push ax
00000168 C7                   822  	push hl
00000169                      823  	;***      380 : {
00000169                      824  	;***      381 :     volatile uint8_t rx_data;
00000169                      825  	;***      382 :     volatile uint8_t err_type;
00000169                      826  	;***      383 :     
00000169                      827  	;***      384 :     err_type = (uint8_t)(SSR11 & 0x0007U);
00000169                      828  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 384
00000169 AF4201               829  	movw ax, !0x0142
0000016C 60                   830  	mov a, x
0000016D 5C07                 831  	and a, #0x07
0000016F 9800                 832  	mov [sp+0x00], a
00000171                      833  	;***      385 :     SIR11 = (uint16_t)err_type;
00000171                      834  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 385
00000171 8800                 835  	mov a, [sp+0x00]
00000173 318E                 836  	shrw ax, 8+0x00000
00000175 BF4A01               837  	movw !0x014A, ax
00000178                      838  	;***      386 : 
00000178                      839  	;***      387 :     if (err_type != 0U)
00000178                      840  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 387
00000178 8800                 841  	mov a, [sp+0x00]
0000017A D1                   842  	cmp0 a
0000017B DD00                 843  	bz $.BB@LABEL@14_2
0000017D                      844  .BB@LABEL@14_1:	; if_then_bb
0000017D                      845  	;***      388 :     {
0000017D                      846  	;***      389 :         r_uart2_callback_error(err_type);
0000017D                      847  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 389
0000017D 8800                 848  	mov a, [sp+0x00]
0000017F FC000000             849  	call !!_r_uart2_callback_error@1
00000183                      850  .BB@LABEL@14_2:	; if_break_bb
00000183                      851  	;***      390 :     }
00000183                      852  	;***      391 :     
00000183                      853  	;***      392 :     rx_data = RXD2;
00000183                      854  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 392
00000183 8E4A                 855  	mov a, 0xFFF4A
00000185 9801                 856  	mov [sp+0x01], a
00000187                      857  	;***      393 : 
00000187                      858  	;***      394 :     if (g_uart2_rx_length > g_uart2_rx_count)
00000187                      859  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 394
00000187 AF0000               860  	movw ax, !LOWW(_g_uart2_rx_length)
0000018A 420000               861  	cmpw ax, !LOWW(_g_uart2_rx_count)
0000018D 8801                 862  	mov a, [sp+0x01]
0000018F 61D300               863  	bnh $.BB@LABEL@14_6
00000192                      864  .BB@LABEL@14_3:	; if_then_bb18
00000192                      865  	;***      395 :     {
00000192                      866  	;***      396 :         *gp_uart2_rx_address = rx_data;
00000192                      867  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 396
00000192 EB0000               868  	movw de, !LOWW(_gp_uart2_rx_address)
00000195 99                   869  	mov [de], a
00000196                      870  	;***      397 :         gp_uart2_rx_address++;
00000196                      871  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 397
00000196 A20000               872  	incw !LOWW(_gp_uart2_rx_address)
00000199                      873  	;***      398 :         g_uart2_rx_count++;
00000199                      874  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 398
00000199 A20000               875  	incw !LOWW(_g_uart2_rx_count)
0000019C                      876  	;***      399 : 
0000019C                      877  	;***      400 :         if (g_uart2_rx_length == g_uart2_rx_count)
0000019C                      878  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 400
0000019C AF0000               879  	movw ax, !LOWW(_g_uart2_rx_length)
0000019F 420000               880  	cmpw ax, !LOWW(_g_uart2_rx_count)
000001A2 61F8                 881  	sknz
000001A4                      882  .BB@LABEL@14_4:	; if_then_bb30
000001A4                      883  	;***      401 :         {
000001A4                      884  	;***      402 :             r_uart2_callback_receiveend();
000001A4                      885  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 402
000001A4 FC000000             886  	call !!_r_uart2_callback_receiveend@1
000001A8                      887  .BB@LABEL@14_5:	; return
000001A8 C6                   888  	pop hl
000001A9 C0                   889  	pop ax
000001AA 9EFC                 890  	mov cs, a
000001AC 60                   891  	mov a, x
000001AD 9EFD                 892  	mov es, a
000001AF C6                   893  	pop hl
000001B0 C4                   894  	pop de
000001B1 C2                   895  	pop bc
000001B2 C0                   896  	pop ax
000001B3                      897  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 409
000001B3 61FC                 898  	reti
000001B5                      899  .BB@LABEL@14_6:	; if_else_bb
000001B5                      900  	;***      403 :         }
000001B5                      901  	;***      404 :     }
000001B5                      902  	;***      405 :     else
000001B5                      903  	;***      406 :     {
000001B5                      904  	;***      407 :         r_uart2_callback_softwareoverrun(rx_data);
000001B5                      905  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 407
000001B5 318E                 906  	shrw ax, 8+0x00000
000001B7 FC000000             907  	call !!_r_uart2_callback_softwareoverrun@1
000001BB EF00                 908  	br $.BB@LABEL@14_5
000001BD                      909  _r_uart2_interrupt_send@1	.vector 0x0014
000001BD                      910  _r_uart2_interrupt_send@1:
000001BD                      911  	.STACK _r_uart2_interrupt_send@1 = 14
000001BD                      912  	;***      408 :     }
000001BD                      913  	;***      409 : }
000001BD                      914  	;***      410 : 
000001BD                      915  	;***      411 : /***********************************************************************************************************************
000001BD                      916  	;***      412 : * Function Name: r_uart2_interrupt_send
000001BD                      917  	;***      413 : * Description  : This function is INTST2 interrupt service routine.
000001BD                      918  	;***      414 : * Arguments    : None
000001BD                      919  	;***      415 : * Return Value : None
000001BD                      920  	;***      416 : ***********************************************************************************************************************/
000001BD                      921  	;***      417 : static void __near r_uart2_interrupt_send(void)
000001BD                      922  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 417
000001BD C1                   923  	push ax
000001BE C3                   924  	push bc
000001BF C5                   925  	push de
000001C0 C7                   926  	push hl
000001C1 8EFD                 927  	mov a, es
000001C3 70                   928  	mov x, a
000001C4 8EFC                 929  	mov a, cs
000001C6 C1                   930  	push ax
000001C7                      931  	;***      418 : {
000001C7                      932  	;***      419 :     if (g_uart2_tx_count > 0U)
000001C7                      933  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 419
000001C7 AF0000               934  	movw ax, !LOWW(_g_uart2_tx_count)
000001CA F7                   935  	clrw bc
000001CB 43                   936  	cmpw ax, bc
000001CC DF00                 937  	bnz $.BB@LABEL@15_3
000001CE                      938  .BB@LABEL@15_1:	; if_else_bb
000001CE                      939  	;***      420 :     {
000001CE                      940  	;***      421 :         TXD2 = *gp_uart2_tx_address;
000001CE                      941  	;***      422 :         gp_uart2_tx_address++;
000001CE                      942  	;***      423 :         g_uart2_tx_count--;
000001CE                      943  	;***      424 :     }
000001CE                      944  	;***      425 :     else
000001CE                      945  	;***      426 :     {
000001CE                      946  	;***      427 :         r_uart2_callback_sendend();
000001CE                      947  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 427
000001CE FC000000             948  	call !!_r_uart2_callback_sendend@1
000001D2                      949  .BB@LABEL@15_2:	; if_else_bb
000001D2 C0                   950  	pop ax
000001D3 9EFC                 951  	mov cs, a
000001D5 60                   952  	mov a, x
000001D6 9EFD                 953  	mov es, a
000001D8 C6                   954  	pop hl
000001D9 C4                   955  	pop de
000001DA C2                   956  	pop bc
000001DB C0                   957  	pop ax
000001DC                      958  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 429
000001DC 61FC                 959  	reti
000001DE                      960  .BB@LABEL@15_3:	; if_then_bb
000001DE                      961  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 421
000001DE EB0000               962  	movw de, !LOWW(_gp_uart2_tx_address)
000001E1 89                   963  	mov a, [de]
000001E2 9E48                 964  	mov 0xFFF48, a
000001E4                      965  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 422
000001E4 A5                   966  	incw de
000001E5 15                   967  	movw ax, de
000001E6 BF0000               968  	movw !LOWW(_gp_uart2_tx_address), ax
000001E9                      969  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 423
000001E9 B20000               970  	decw !LOWW(_g_uart2_tx_count)
000001EC EF00                 971  	br $.BB@LABEL@15_2
00000035                      972  	.SECTION .textf,TEXTF
00000035                      973  _r_uart2_callback_receiveend@1:
00000035                      974  	.STACK _r_uart2_callback_receiveend@1 = 8
00000035                      975  	;***      428 :     }
00000035                      976  	;***      429 : }
00000035                      977  	;***      430 : 
00000035                      978  	;***      431 : /***********************************************************************************************************************
00000035                      979  	;***      432 : * Function Name: r_uart2_callback_receiveend
00000035                      980  	;***      433 : * Description  : This function is a callback function when UART2 finishes reception.
00000035                      981  	;***      434 : * Arguments    : None
00000035                      982  	;***      435 : * Return Value : None
00000035                      983  	;***      436 : ***********************************************************************************************************************/
00000035                      984  	;***      437 : static void r_uart2_callback_receiveend(void)
00000035                      985  	;***      438 : {
00000035                      986  	;***      439 :     /* Start user code. Do not edit comment generated here */
00000035                      987  	;***      440 : 
00000035                      988  	;***      441 : 	R_UART2_Receive(g_rx_data, 6);
00000035                      989  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 441
00000035 320600               990  	movw bc, #0x0006
00000038 300000               991  	movw ax, #LOWW(_g_rx_data)
0000003B FC000000             992  	call !!_R_UART2_Receive
0000003F                      993  	;***      442 : 	commnunication_flag.recived_time_setting_flag = commnunication_flag.recived_time_setting_flag == 1 ? 2: commnunication_flag.recived_time_setting_flag;
0000003F                      994  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 442
0000003F 40000001             995  	cmp !LOWW(_commnunication_flag+0x00004), #0x01
00000043 5102                 996  	mov a, #0x02
00000045 61E8                 997  	skz
00000047                      998  .BB@LABEL@16_1:	; bb5
00000047 8F0000               999  	mov a, !LOWW(_commnunication_flag+0x00004)
0000004A                     1000  .BB@LABEL@16_2:	; bb8
0000004A 9F0000              1001  	mov !LOWW(_commnunication_flag+0x00004), a
0000004D                     1002  	;***      443 : 	commnunication_flag.recived_number_setting_flag = commnunication_flag.recived_number_setting_flag == 1 ? 2: commnunication_flag.recived_number_setting_flag;
0000004D                     1003  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 443
0000004D 40000001            1004  	cmp !LOWW(_commnunication_flag+0x00003), #0x01
00000051 5102                1005  	mov a, #0x02
00000053 61E8                1006  	skz
00000055                     1007  .BB@LABEL@16_3:	; bb16
00000055 8F0000              1008  	mov a, !LOWW(_commnunication_flag+0x00003)
00000058                     1009  .BB@LABEL@16_4:	; bb20
00000058 9F0000              1010  	mov !LOWW(_commnunication_flag+0x00003), a
0000005B                     1011  	;***      444 : 	if(isCommandNeedResponse(g_rx_data)){
0000005B                     1012  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 444
0000005B 300000              1013  	movw ax, #LOWW(_g_rx_data)
0000005E FE0000              1014  	call $!_isCommandNeedResponse
00000061 D1                  1015  	cmp0 a
00000062 DF00                1016  	bnz $.BB@LABEL@16_10
00000064                     1017  .BB@LABEL@16_5:	; if_else_bb218
00000064                     1018  	;***      445 : 		if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_TIME)){
00000064                     1019  	;***      446 : 			commnunication_flag.send_response_time_flag = 1;
00000064                     1020  	;***      447 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_TIME)){
00000064                     1021  	;***      448 : 			R_UART2_Receive(g_rx_data, timeSettingSize);
00000064                     1022  	;***      449 : 			commnunication_flag.recived_time_setting_flag = 1;
00000064                     1023  	;***      450 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_MACHINE_STATUS)){
00000064                     1024  	;***      451 : 			commnunication_flag.send_respone_status_flag = 1;
00000064                     1025  	;***      452 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == READ_NUMBER)){
00000064                     1026  	;***      453 : 			commnunication_flag.send_response_number_flag = 1;
00000064                     1027  	;***      454 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == SAVE_NUMBER)){
00000064                     1028  	;***      455 : 			R_UART2_Receive(g_rx_data, numberSettingSize);
00000064                     1029  	;***      456 : 			commnunication_flag.recived_number_setting_flag = 1;
00000064                     1030  	;***      457 : 		}else if((g_rx_data[0] == H_READ)&&(g_rx_data[1] == WASHING_MODE)){
00000064                     1031  	;***      458 : 			commnunication_flag.send_response_mode_flag = 1;
00000064                     1032  	;***      459 : //			commnunication_flag.send_response_flag = 0;
00000064                     1033  	;***      460 : 		}else if((g_rx_data[0] == H_CLEAR)){
00000064                     1034  	;***      461 : 			commnunication_flag.alarm_clear_flag = g_rx_data[1];
00000064                     1035  	;***      462 : 		}else if((g_rx_data[0] == H_SET)&&(g_rx_data[1] == NEXT_ANIMATION)){
00000064                     1036  	;***      463 : //			g_machine_state.waitAnimationRes = 0;
00000064                     1037  	;***      464 : 		}else if((g_rx_data[0] == H_READ) && (g_rx_data[1] == MID_NIGHT)){
00000064                     1038  	;***      465 : 			commnunication_flag.send_response_flag = 0;
00000064                     1039  	;***      466 : 			g_machine_state.isMidNight = g_rx_data[5];
00000064                     1040  	;***      467 : 		}
00000064                     1041  	;***      468 : 		if(isThisCommand(g_rx_data, H_SET, WASHING_MODE, 0xff) != 0){
00000064                     1042  	;***      469 : 			g_machine_mode = g_rx_data[5];
00000064                     1043  	;***      470 : 		}
00000064                     1044  	;***      471 : 		if (isThisCommand(g_rx_data, H_SET, OK_USER, 0xff) != 0) {
00000064                     1045  	;***      472 : 			g_machine_state.user = 2;
00000064                     1046  	;***      473 : 		}
00000064                     1047  	;***      474 : 	}else if(commnunication_flag.recived_time_setting_flag != 0 || commnunication_flag.recived_number_setting_flag != 0){
00000064                     1048  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 474
00000064 D50000              1049  	cmp0 !LOWW(_commnunication_flag+0x00004)
00000067 DF00                1050  	bnz $.BB@LABEL@16_8
00000069                     1051  .BB@LABEL@16_6:	; bb223
00000069 D50000              1052  	cmp0 !LOWW(_commnunication_flag+0x00003)
0000006C DF00                1053  	bnz $.BB@LABEL@16_8
0000006E                     1054  .BB@LABEL@16_7:	; if_else_bb238
0000006E                     1055  	;***      475 : 		R_UART2_Receive(g_rx_data, 6);
0000006E                     1056  	;***      476 : 	}else{
0000006E                     1057  	;***      477 : 		g_uart2_fault = 1;
0000006E                     1058  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 477
0000006E E50000              1059  	oneb !LOWW(_g_uart2_fault)
00000071 EF00                1060  	br $.BB@LABEL@16_9
00000073                     1061  .BB@LABEL@16_8:	; if_then_bb236
00000073                     1062  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 475
00000073 320600              1063  	movw bc, #0x0006
00000076 300000              1064  	movw ax, #LOWW(_g_rx_data)
00000079 FC000000            1065  	call !!_R_UART2_Receive
0000007D                     1066  .BB@LABEL@16_9:	; if_then_bb236
0000007D EE0000              1067  	br $!.BB@LABEL@16_40
00000080                     1068  .BB@LABEL@16_10:	; if_then_bb
00000080                     1069  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 445
00000080 8F0000              1070  	mov a, !LOWW(_g_rx_data)
00000083 4C52                1071  	cmp a, #0x52
00000085 DF00                1072  	bnz $.BB@LABEL@16_13
00000087                     1073  .BB@LABEL@16_11:	; bb33
00000087 40000002            1074  	cmp !LOWW(_g_rx_data+0x00001), #0x02
0000008B DF00                1075  	bnz $.BB@LABEL@16_13
0000008D                     1076  .BB@LABEL@16_12:	; if_then_bb46
0000008D                     1077  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 446
0000008D E50000              1078  	oneb !LOWW(_commnunication_flag+0x00001)
00000090 EF00                1079  	br $.BB@LABEL@16_27
00000092                     1080  .BB@LABEL@16_13:	; if_else_bb
00000092                     1081  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 447
00000092 4C53                1082  	cmp a, #0x53
00000094 DF00                1083  	bnz $.BB@LABEL@16_16
00000096                     1084  .BB@LABEL@16_14:	; bb51
00000096 40000014            1085  	cmp !LOWW(_g_rx_data+0x00001), #0x14
0000009A DF00                1086  	bnz $.BB@LABEL@16_16
0000009C                     1087  .BB@LABEL@16_15:	; if_then_bb64
0000009C                     1088  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 448
0000009C 328D00              1089  	movw bc, #0x008D
0000009F 300000              1090  	movw ax, #LOWW(_g_rx_data)
000000A2 FC000000            1091  	call !!_R_UART2_Receive
000000A6                     1092  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 449
000000A6 E50000              1093  	oneb !LOWW(_commnunication_flag+0x00004)
000000A9 EF00                1094  	br $.BB@LABEL@16_30
000000AB                     1095  .BB@LABEL@16_16:	; if_else_bb69
000000AB                     1096  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 450
000000AB 4C52                1097  	cmp a, #0x52
000000AD DF00                1098  	bnz $.BB@LABEL@16_21
000000AF                     1099  .BB@LABEL@16_17:	; bb74
000000AF 40000017            1100  	cmp !LOWW(_g_rx_data+0x00001), #0x17
000000B3 DF00                1101  	bnz $.BB@LABEL@16_19
000000B5                     1102  .BB@LABEL@16_18:	; if_then_bb87
000000B5                     1103  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 451
000000B5 E50000              1104  	oneb !LOWW(_commnunication_flag+0x00005)
000000B8 EF00                1105  	br $.BB@LABEL@16_36
000000BA                     1106  .BB@LABEL@16_19:	; bb93
000000BA                     1107  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 452
000000BA 40000003            1108  	cmp !LOWW(_g_rx_data+0x00001), #0x03
000000BE DF00                1109  	bnz $.BB@LABEL@16_21
000000C0                     1110  .BB@LABEL@16_20:	; if_then_bb106
000000C0                     1111  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 453
000000C0 E50000              1112  	oneb !LOWW(_commnunication_flag+0x00002)
000000C3 EF00                1113  	br $.BB@LABEL@16_36
000000C5                     1114  .BB@LABEL@16_21:	; if_else_bb107
000000C5                     1115  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 454
000000C5 4C53                1116  	cmp a, #0x53
000000C7 DF00                1117  	bnz $.BB@LABEL@16_24
000000C9                     1118  .BB@LABEL@16_22:	; bb112
000000C9 40000015            1119  	cmp !LOWW(_g_rx_data+0x00001), #0x15
000000CD DF00                1120  	bnz $.BB@LABEL@16_24
000000CF                     1121  .BB@LABEL@16_23:	; if_then_bb125
000000CF                     1122  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 455
000000CF 322500              1123  	movw bc, #0x0025
000000D2 300000              1124  	movw ax, #LOWW(_g_rx_data)
000000D5 FC000000            1125  	call !!_R_UART2_Receive
000000D9                     1126  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 456
000000D9 E50000              1127  	oneb !LOWW(_commnunication_flag+0x00003)
000000DC EF00                1128  	br $.BB@LABEL@16_36
000000DE                     1129  .BB@LABEL@16_24:	; if_else_bb129
000000DE                     1130  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 457
000000DE 4C52                1131  	cmp a, #0x52
000000E0 DF00                1132  	bnz $.BB@LABEL@16_28
000000E2                     1133  .BB@LABEL@16_25:	; bb134
000000E2 40000018            1134  	cmp !LOWW(_g_rx_data+0x00001), #0x18
000000E6 DF00                1135  	bnz $.BB@LABEL@16_28
000000E8                     1136  .BB@LABEL@16_26:	; if_then_bb147
000000E8                     1137  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 458
000000E8 E50000              1138  	oneb !LOWW(_commnunication_flag+0x00006)
000000EB                     1139  .BB@LABEL@16_27:	; if_then_bb147
000000EB EF00                1140  	br $.BB@LABEL@16_36
000000ED                     1141  .BB@LABEL@16_28:	; if_else_bb148
000000ED                     1142  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 460
000000ED 4C43                1143  	cmp a, #0x43
000000EF DF00                1144  	bnz $.BB@LABEL@16_31
000000F1                     1145  .BB@LABEL@16_29:	; if_then_bb154
000000F1                     1146  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 461
000000F1 8F0000              1147  	mov a, !LOWW(_g_rx_data+0x00001)
000000F4 9F0000              1148  	mov !LOWW(_commnunication_flag+0x00007), a
000000F7                     1149  .BB@LABEL@16_30:	; if_then_bb154
000000F7 EF00                1150  	br $.BB@LABEL@16_36
000000F9                     1151  .BB@LABEL@16_31:	; if_else_bb156
000000F9                     1152  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 462
000000F9 4C53                1153  	cmp a, #0x53
000000FB DF00                1154  	bnz $.BB@LABEL@16_33
000000FD                     1155  .BB@LABEL@16_32:	; bb161
000000FD 40000013            1156  	cmp !LOWW(_g_rx_data+0x00001), #0x13
00000101 DD00                1157  	bz $.BB@LABEL@16_36
00000103                     1158  .BB@LABEL@16_33:	; bb161
00000103 4C52                1159  	cmp a, #0x52
00000105 DF00                1160  	bnz $.BB@LABEL@16_36
00000107                     1161  .BB@LABEL@16_34:	; bb180
00000107 4000001C            1162  	cmp !LOWW(_g_rx_data+0x00001), #0x1C
0000010B DF00                1163  	bnz $.BB@LABEL@16_36
0000010D                     1164  .BB@LABEL@16_35:	; if_then_bb193
0000010D                     1165  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 465
0000010D F50000              1166  	clrb !LOWW(_commnunication_flag)
00000110                     1167  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 466
00000110 8F0000              1168  	mov a, !LOWW(_g_rx_data+0x00005)
00000113 9F0000              1169  	mov !LOWW(_g_machine_state+0x0000A), a
00000116                     1170  .BB@LABEL@16_36:	; if_break_bb202
00000116 F6                  1171  	clrw ax
00000117                     1172  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 468
00000117 C1                  1173  	push ax
00000118 50FF                1174  	mov x, #0xFF
0000011A C1                  1175  	push ax
0000011B 325318              1176  	movw bc, #0x1853
0000011E 300000              1177  	movw ax, #LOWW(_g_rx_data)
00000121 FC000000            1178  	call !!_isThisCommand
00000125 1004                1179  	addw sp, #0x04
00000127 D1                  1180  	cmp0 a
00000128 DD00                1181  	bz $.BB@LABEL@16_38
0000012A                     1182  .BB@LABEL@16_37:	; if_then_bb208
0000012A                     1183  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 469
0000012A 8F0000              1184  	mov a, !LOWW(_g_rx_data+0x00005)
0000012D 9F0000              1185  	mov !LOWW(_g_machine_mode), a
00000130                     1186  .BB@LABEL@16_38:	; if_break_bb210
00000130 F6                  1187  	clrw ax
00000131                     1188  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 471
00000131 C1                  1189  	push ax
00000132 50FF                1190  	mov x, #0xFF
00000134 C1                  1191  	push ax
00000135 325301              1192  	movw bc, #0x0153
00000138 300000              1193  	movw ax, #LOWW(_g_rx_data)
0000013B FC000000            1194  	call !!_isThisCommand
0000013F 1004                1195  	addw sp, #0x04
00000141 D1                  1196  	cmp0 a
00000142 61E8                1197  	skz
00000144                     1198  .BB@LABEL@16_39:	; if_then_bb216
00000144                     1199  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 472
00000144 CF000002            1200  	mov !LOWW(_g_machine_state+0x0000B), #0x02
00000148                     1201  .BB@LABEL@16_40:	; if_break_bb240
00000148                     1202  	;***      478 : 	}
00000148                     1203  	;***      479 : 	g_uart2_receive++;
00000148                     1204  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 479
00000148 A00000              1205  	inc !LOWW(_g_uart2_receive)
0000014B D7                  1206  	ret
0000014C                     1207  _r_uart2_callback_softwareoverrun@1:
0000014C                     1208  	.STACK _r_uart2_callback_softwareoverrun@1 = 4
0000014C                     1209  	;***      480 : 
0000014C                     1210  	;***      481 :     /* End user code. Do not edit comment generated here */
0000014C                     1211  	;***      482 : }
0000014C                     1212  	;***      483 : 
0000014C                     1213  	;***      484 : /***********************************************************************************************************************
0000014C                     1214  	;***      485 : * Function Name: r_uart2_callback_softwareoverrun
0000014C                     1215  	;***      486 : * Description  : This function is a callback function when UART2 receives an overflow data.
0000014C                     1216  	;***      487 : * Arguments    : rx_data -
0000014C                     1217  	;***      488 : *                    receive data
0000014C                     1218  	;***      489 : * Return Value : None
0000014C                     1219  	;***      490 : ***********************************************************************************************************************/
0000014C                     1220  	;***      491 : static void r_uart2_callback_softwareoverrun(uint16_t rx_data)
0000014C                     1221  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 491
0000014C D7                  1222  	ret
0000014D                     1223  _r_uart2_callback_sendend@1:
0000014D                     1224  	.STACK _r_uart2_callback_sendend@1 = 4
0000014D                     1225  	;***      492 : {
0000014D                     1226  	;***      493 :     /* Start user code. Do not edit comment generated here */
0000014D                     1227  	;***      494 :     /* End user code. Do not edit comment generated here */
0000014D                     1228  	;***      495 : }
0000014D                     1229  	;***      496 : 
0000014D                     1230  	;***      497 : /***********************************************************************************************************************
0000014D                     1231  	;***      498 : * Function Name: r_uart2_callback_sendend
0000014D                     1232  	;***      499 : * Description  : This function is a callback function when UART2 finishes transmission.
0000014D                     1233  	;***      500 : * Arguments    : None
0000014D                     1234  	;***      501 : * Return Value : None
0000014D                     1235  	;***      502 : ***********************************************************************************************************************/
0000014D                     1236  	;***      503 : static void r_uart2_callback_sendend(void)
0000014D                     1237  	;***      504 : {
0000014D                     1238  	;***      505 :     /* Start user code. Do not edit comment generated here */
0000014D                     1239  	;***      506 : 	g_uart2_sendend++;
0000014D                     1240  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 506
0000014D A00000              1241  	inc !LOWW(_g_uart2_sendend)
00000150 D7                  1242  	ret
00000151                     1243  _r_uart2_callback_error@1:
00000151                     1244  	.STACK _r_uart2_callback_error@1 = 4
00000151                     1245  	;***      507 :     /* End user code. Do not edit comment generated here */
00000151                     1246  	;***      508 : }
00000151                     1247  	;***      509 : 
00000151                     1248  	;***      510 : /***********************************************************************************************************************
00000151                     1249  	;***      511 : * Function Name: r_uart2_callback_error
00000151                     1250  	;***      512 : * Description  : This function is a callback function when UART2 reception error occurs.
00000151                     1251  	;***      513 : * Arguments    : err_type -
00000151                     1252  	;***      514 : *                    error type value
00000151                     1253  	;***      515 : * Return Value : None
00000151                     1254  	;***      516 : ***********************************************************************************************************************/
00000151                     1255  	;***      517 : static void r_uart2_callback_error(uint8_t err_type)
00000151                     1256  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 517
00000151 D7                  1257  	ret
000001EE                     1258  	.SECTION .text,TEXT
000001EE                     1259  _r_uart3_interrupt_receive@1	.vector 0x003E
000001EE                     1260  _r_uart3_interrupt_receive@1:
000001EE                     1261  	.STACK _r_uart3_interrupt_receive@1 = 16
000001EE                     1262  	;***      518 : {
000001EE                     1263  	;***      519 :     /* Start user code. Do not edit comment generated here */
000001EE                     1264  	;***      520 :     /* End user code. Do not edit comment generated here */
000001EE                     1265  	;***      521 : }
000001EE                     1266  	;***      522 : 
000001EE                     1267  	;***      523 : /***********************************************************************************************************************
000001EE                     1268  	;***      524 : * Function Name: r_uart3_interrupt_receive
000001EE                     1269  	;***      525 : * Description  : This function is INTSR3 interrupt service routine.
000001EE                     1270  	;***      526 : * Arguments    : None
000001EE                     1271  	;***      527 : * Return Value : None
000001EE                     1272  	;***      528 : ***********************************************************************************************************************/
000001EE                     1273  	;***      529 : static void __near r_uart3_interrupt_receive(void)
000001EE                     1274  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 529
000001EE C1                  1275  	push ax
000001EF C3                  1276  	push bc
000001F0 C5                  1277  	push de
000001F1 C7                  1278  	push hl
000001F2 8EFD                1279  	mov a, es
000001F4 70                  1280  	mov x, a
000001F5 8EFC                1281  	mov a, cs
000001F7 C1                  1282  	push ax
000001F8 C7                  1283  	push hl
000001F9                     1284  	;***      530 : {
000001F9                     1285  	;***      531 :     volatile uint8_t rx_data;
000001F9                     1286  	;***      532 :     volatile uint8_t err_type;
000001F9                     1287  	;***      533 :     
000001F9                     1288  	;***      534 :     err_type = (uint8_t)(SSR13 & 0x0007U);
000001F9                     1289  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 534
000001F9 AF4601              1290  	movw ax, !0x0146
000001FC 60                  1291  	mov a, x
000001FD 5C07                1292  	and a, #0x07
000001FF 9800                1293  	mov [sp+0x00], a
00000201                     1294  	;***      535 :     SIR13 = (uint16_t)err_type;
00000201                     1295  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 535
00000201 8800                1296  	mov a, [sp+0x00]
00000203 318E                1297  	shrw ax, 8+0x00000
00000205 BF4E01              1298  	movw !0x014E, ax
00000208                     1299  	;***      536 : 
00000208                     1300  	;***      537 :     if (err_type != 0U)
00000208                     1301  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 537
00000208 8800                1302  	mov a, [sp+0x00]
0000020A D1                  1303  	cmp0 a
0000020B DD00                1304  	bz $.BB@LABEL@20_2
0000020D                     1305  .BB@LABEL@20_1:	; if_then_bb
0000020D                     1306  	;***      538 :     {
0000020D                     1307  	;***      539 :         r_uart3_callback_error(err_type);
0000020D                     1308  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 539
0000020D 8800                1309  	mov a, [sp+0x00]
0000020F FC000000            1310  	call !!_r_uart3_callback_error@1
00000213                     1311  .BB@LABEL@20_2:	; if_break_bb
00000213                     1312  	;***      540 :     }
00000213                     1313  	;***      541 :     
00000213                     1314  	;***      542 :     rx_data = RXD3;
00000213                     1315  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 542
00000213 8D16                1316  	mov a, 0xFFF16
00000215 9801                1317  	mov [sp+0x01], a
00000217                     1318  	;***      543 : 
00000217                     1319  	;***      544 :     if (g_uart3_rx_length > g_uart3_rx_count)
00000217                     1320  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 544
00000217 AF0000              1321  	movw ax, !LOWW(_g_uart3_rx_length)
0000021A 420000              1322  	cmpw ax, !LOWW(_g_uart3_rx_count)
0000021D 8801                1323  	mov a, [sp+0x01]
0000021F 61D300              1324  	bnh $.BB@LABEL@20_6
00000222                     1325  .BB@LABEL@20_3:	; if_then_bb18
00000222                     1326  	;***      545 :     {
00000222                     1327  	;***      546 :         *gp_uart3_rx_address = rx_data;
00000222                     1328  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 546
00000222 EB0000              1329  	movw de, !LOWW(_gp_uart3_rx_address)
00000225 99                  1330  	mov [de], a
00000226                     1331  	;***      547 :         gp_uart3_rx_address++;
00000226                     1332  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 547
00000226 A20000              1333  	incw !LOWW(_gp_uart3_rx_address)
00000229                     1334  	;***      548 :         g_uart3_rx_count++;
00000229                     1335  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 548
00000229 A20000              1336  	incw !LOWW(_g_uart3_rx_count)
0000022C                     1337  	;***      549 : 
0000022C                     1338  	;***      550 :         if (g_uart3_rx_length == g_uart3_rx_count)
0000022C                     1339  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 550
0000022C AF0000              1340  	movw ax, !LOWW(_g_uart3_rx_length)
0000022F 420000              1341  	cmpw ax, !LOWW(_g_uart3_rx_count)
00000232 61F8                1342  	sknz
00000234                     1343  .BB@LABEL@20_4:	; if_then_bb30
00000234                     1344  	;***      551 :         {
00000234                     1345  	;***      552 :             r_uart3_callback_receiveend();
00000234                     1346  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 552
00000234 FC000000            1347  	call !!_r_uart3_callback_receiveend@1
00000238                     1348  .BB@LABEL@20_5:	; return
00000238 C6                  1349  	pop hl
00000239 C0                  1350  	pop ax
0000023A 9EFC                1351  	mov cs, a
0000023C 60                  1352  	mov a, x
0000023D 9EFD                1353  	mov es, a
0000023F C6                  1354  	pop hl
00000240 C4                  1355  	pop de
00000241 C2                  1356  	pop bc
00000242 C0                  1357  	pop ax
00000243                     1358  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 559
00000243 61FC                1359  	reti
00000245                     1360  .BB@LABEL@20_6:	; if_else_bb
00000245                     1361  	;***      553 :         }
00000245                     1362  	;***      554 :     }
00000245                     1363  	;***      555 :     else
00000245                     1364  	;***      556 :     {
00000245                     1365  	;***      557 :         r_uart3_callback_softwareoverrun(rx_data);
00000245                     1366  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 557
00000245 318E                1367  	shrw ax, 8+0x00000
00000247 FC000000            1368  	call !!_r_uart3_callback_softwareoverrun@1
0000024B EF00                1369  	br $.BB@LABEL@20_5
0000024D                     1370  _r_uart3_interrupt_send@1	.vector 0x003C
0000024D                     1371  _r_uart3_interrupt_send@1:
0000024D                     1372  	.STACK _r_uart3_interrupt_send@1 = 14
0000024D                     1373  	;***      558 :     }
0000024D                     1374  	;***      559 : }
0000024D                     1375  	;***      560 : 
0000024D                     1376  	;***      561 : /***********************************************************************************************************************
0000024D                     1377  	;***      562 : * Function Name: r_uart3_interrupt_send
0000024D                     1378  	;***      563 : * Description  : This function is INTST3 interrupt service routine.
0000024D                     1379  	;***      564 : * Arguments    : None
0000024D                     1380  	;***      565 : * Return Value : None
0000024D                     1381  	;***      566 : ***********************************************************************************************************************/
0000024D                     1382  	;***      567 : static void __near r_uart3_interrupt_send(void)
0000024D                     1383  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 567
0000024D C1                  1384  	push ax
0000024E C3                  1385  	push bc
0000024F C5                  1386  	push de
00000250 C7                  1387  	push hl
00000251 8EFD                1388  	mov a, es
00000253 70                  1389  	mov x, a
00000254 8EFC                1390  	mov a, cs
00000256 C1                  1391  	push ax
00000257                     1392  	;***      568 : {
00000257                     1393  	;***      569 :     if (g_uart3_tx_count > 0U)
00000257                     1394  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 569
00000257 AF0000              1395  	movw ax, !LOWW(_g_uart3_tx_count)
0000025A F7                  1396  	clrw bc
0000025B 43                  1397  	cmpw ax, bc
0000025C DF00                1398  	bnz $.BB@LABEL@21_3
0000025E                     1399  .BB@LABEL@21_1:	; if_else_bb
0000025E                     1400  	;***      570 :     {
0000025E                     1401  	;***      571 :         TXD3 = *gp_uart3_tx_address;
0000025E                     1402  	;***      572 :         gp_uart3_tx_address++;
0000025E                     1403  	;***      573 :         g_uart3_tx_count--;
0000025E                     1404  	;***      574 :     }
0000025E                     1405  	;***      575 :     else
0000025E                     1406  	;***      576 :     {
0000025E                     1407  	;***      577 :         r_uart3_callback_sendend();
0000025E                     1408  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 577
0000025E FC000000            1409  	call !!_r_uart3_callback_sendend@1
00000262                     1410  .BB@LABEL@21_2:	; if_else_bb
00000262 C0                  1411  	pop ax
00000263 9EFC                1412  	mov cs, a
00000265 60                  1413  	mov a, x
00000266 9EFD                1414  	mov es, a
00000268 C6                  1415  	pop hl
00000269 C4                  1416  	pop de
0000026A C2                  1417  	pop bc
0000026B C0                  1418  	pop ax
0000026C                     1419  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 579
0000026C 61FC                1420  	reti
0000026E                     1421  .BB@LABEL@21_3:	; if_then_bb
0000026E                     1422  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 571
0000026E EB0000              1423  	movw de, !LOWW(_gp_uart3_tx_address)
00000271 89                  1424  	mov a, [de]
00000272 9D14                1425  	mov 0xFFF14, a
00000274                     1426  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 572
00000274 A5                  1427  	incw de
00000275 15                  1428  	movw ax, de
00000276 BF0000              1429  	movw !LOWW(_gp_uart3_tx_address), ax
00000279                     1430  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 573
00000279 B20000              1431  	decw !LOWW(_g_uart3_tx_count)
0000027C EF00                1432  	br $.BB@LABEL@21_2
00000152                     1433  	.SECTION .textf,TEXTF
00000152                     1434  _r_uart3_callback_receiveend@1:
00000152                     1435  	.STACK _r_uart3_callback_receiveend@1 = 4
00000152                     1436  	;***      578 :     }
00000152                     1437  	;***      579 : }
00000152                     1438  	;***      580 : 
00000152                     1439  	;***      581 : /***********************************************************************************************************************
00000152                     1440  	;***      582 : * Function Name: r_uart3_callback_receiveend
00000152                     1441  	;***      583 : * Description  : This function is a callback function when UART3 finishes reception.
00000152                     1442  	;***      584 : * Arguments    : None
00000152                     1443  	;***      585 : * Return Value : None
00000152                     1444  	;***      586 : ***********************************************************************************************************************/
00000152                     1445  	;***      587 : static void r_uart3_callback_receiveend(void)
00000152                     1446  	;***      588 : {
00000152                     1447  	;***      589 :     /* Start user code. Do not edit comment generated here */
00000152                     1448  	;***      590 : 	R_UART3_Receive(g_uart3_rx_data, 7);
00000152                     1449  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 590
00000152 320700              1450  	movw bc, #0x0007
00000155 300000              1451  	movw ax, #LOWW(_g_uart3_rx_data)
00000158 FC000000            1452  	call !!_R_UART3_Receive
0000015C                     1453  	;***      591 : 	if(g_uart3_rx_data[0] == 1){
0000015C                     1454  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 591
0000015C 8F0000              1455  	mov a, !LOWW(_g_uart3_rx_data)
0000015F 4C01                1456  	cmp a, #0x01
00000161 DF00                1457  	bnz $.BB@LABEL@22_7
00000163                     1458  .BB@LABEL@22_1:	; if_then_bb
00000163                     1459  	;***      592 : 		//Read timer setting
00000163                     1460  	;***      593 : 		if((rs485_rx_p[0] == H_READ) && (rs485_rx_p[1] == READ_TIME)){
00000163                     1461  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 593
00000163 40000052            1462  	cmp !LOWW(_g_uart3_rx_data+0x00001), #0x52
00000167 DF00                1463  	bnz $.BB@LABEL@22_6
00000169                     1464  .BB@LABEL@22_2:	; bb
00000169 40000002            1465  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x02
0000016D DF00                1466  	bnz $.BB@LABEL@22_4
0000016F                     1467  .BB@LABEL@22_3:	; if_then_bb25
0000016F                     1468  	;***      594 : 			commnunication_flag.rs485_send_to_watersolfner_response_flag = 1;
0000016F                     1469  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 594
0000016F E50000              1470  	oneb !LOWW(_commnunication_flag+0x00008)
00000172 D7                  1471  	ret
00000173                     1472  .BB@LABEL@22_4:	; bb32
00000173                     1473  	;***      595 : 		}else if((rs485_rx_p[0] == 82) && (rs485_rx_p[1] == 24)){
00000173                     1474  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 595
00000173 40000018            1475  	cmp !LOWW(_g_uart3_rx_data+0x00002), #0x18
00000177 61F8                1476  	sknz
00000179                     1477  .BB@LABEL@22_5:	; if_then_bb47
00000179                     1478  	;***      596 : 			commnunication_flag.rs485_send_to_watersolfner_SV1_flag = 1;
00000179                     1479  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 596
00000179 E50000              1480  	oneb !LOWW(_commnunication_flag+0x00009)
0000017C                     1481  .BB@LABEL@22_6:	; if_else_bb.if_else_bb48_crit_edge.critedge
0000017C                     1482  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 613
0000017C D7                  1483  	ret
0000017D                     1484  .BB@LABEL@22_7:	; if_else_bb97
0000017D                     1485  	;***      597 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 70)){
0000017D                     1486  	;***      598 : 			//TODO: Start Water Softener
0000017D                     1487  	;***      599 : 
0000017D                     1488  	;***      600 : 		}else if((rs485_rx_p[0] == 83) && (rs485_rx_p[1] == 80)){
0000017D                     1489  	;***      601 : 			//TODO: Stop Water Softener + Time of SNP ON (4 bytes)
0000017D                     1490  	;***      602 : 		}
0000017D                     1491  	;***      603 : 	}else if(g_uart3_rx_data[0] == 2){
0000017D                     1492  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 603
0000017D 4C02                1493  	cmp a, #0x02
0000017F DF00                1494  	bnz $.BB@LABEL@22_12
00000181                     1495  .BB@LABEL@22_8:	; if_then_bb103
00000181                     1496  	;***      604 : 		if((rs485_rx_p[0] == 11)){
00000181                     1497  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 604
00000181 8F0000              1498  	mov a, !LOWW(_g_uart3_rx_data+0x00001)
00000184 4C0B                1499  	cmp a, #0x0B
00000186 DF00                1500  	bnz $.BB@LABEL@22_10
00000188                     1501  .BB@LABEL@22_9:	; if_then_bb111
00000188                     1502  	;***      605 : 			commnunication_flag.rs485_send_to_valve_response_flag = 1;
00000188                     1503  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 605
00000188 E50000              1504  	oneb !LOWW(_commnunication_flag+0x0000A)
0000018B D7                  1505  	ret
0000018C                     1506  .BB@LABEL@22_10:	; if_else_bb112
0000018C                     1507  	;***      606 : 		}else if((rs485_rx_p[0] == 12)){
0000018C                     1508  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 606
0000018C 4C0C                1509  	cmp a, #0x0C
0000018E DF00                1510  	bnz $.BB@LABEL@22_14
00000190                     1511  .BB@LABEL@22_11:	; if_then_bb120
00000190                     1512  	;***      607 : 			commnunication_flag.rs485_get_valve_gesture_flag = 1;
00000190                     1513  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 607
00000190 E50000              1514  	oneb !LOWW(_commnunication_flag+0x0000B)
00000193 D7                  1515  	ret
00000194                     1516  .BB@LABEL@22_12:	; if_else_bb123
00000194                     1517  	;***      608 : 		}
00000194                     1518  	;***      609 : 	}else if(g_uart3_rx_data[0] != 0xff){
00000194                     1519  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 609
00000194 81                  1520  	inc a
00000195 61E8                1521  	skz
00000197                     1522  .BB@LABEL@22_13:	; if_then_bb129
00000197                     1523  	;***      610 : 		commnunication_flag.rs485_fault = 1;
00000197                     1524  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 610
00000197 E50000              1525  	oneb !LOWW(_commnunication_flag+0x0000C)
0000019A                     1526  .BB@LABEL@22_14:	; return
0000019A                     1527  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 613
0000019A D7                  1528  	ret
0000019B                     1529  _r_uart3_callback_softwareoverrun@1:
0000019B                     1530  	.STACK _r_uart3_callback_softwareoverrun@1 = 4
0000019B                     1531  	;***      611 : 	}
0000019B                     1532  	;***      612 :     /* End user code. Do not edit comment generated here */
0000019B                     1533  	;***      613 : }
0000019B                     1534  	;***      614 : 
0000019B                     1535  	;***      615 : /***********************************************************************************************************************
0000019B                     1536  	;***      616 : * Function Name: r_uart3_callback_softwareoverrun
0000019B                     1537  	;***      617 : * Description  : This function is a callback function when UART3 receives an overflow data.
0000019B                     1538  	;***      618 : * Arguments    : rx_data -
0000019B                     1539  	;***      619 : *                    receive data
0000019B                     1540  	;***      620 : * Return Value : None
0000019B                     1541  	;***      621 : ***********************************************************************************************************************/
0000019B                     1542  	;***      622 : static void r_uart3_callback_softwareoverrun(uint16_t rx_data)
0000019B                     1543  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 622
0000019B D7                  1544  	ret
0000019C                     1545  _r_uart3_callback_sendend@1:
0000019C                     1546  	.STACK _r_uart3_callback_sendend@1 = 4
0000019C                     1547  	;***      623 : {
0000019C                     1548  	;***      624 :     /* Start user code. Do not edit comment generated here */
0000019C                     1549  	;***      625 :     /* End user code. Do not edit comment generated here */
0000019C                     1550  	;***      626 : }
0000019C                     1551  	;***      627 : 
0000019C                     1552  	;***      628 : /***********************************************************************************************************************
0000019C                     1553  	;***      629 : * Function Name: r_uart3_callback_sendend
0000019C                     1554  	;***      630 : * Description  : This function is a callback function when UART3 finishes transmission.
0000019C                     1555  	;***      631 : * Arguments    : None
0000019C                     1556  	;***      632 : * Return Value : None
0000019C                     1557  	;***      633 : ***********************************************************************************************************************/
0000019C                     1558  	;***      634 : static void r_uart3_callback_sendend(void)
0000019C                     1559  	;***      635 : {
0000019C                     1560  	;***      636 :     /* Start user code. Do not edit comment generated here */
0000019C                     1561  	;***      637 : 	g_uart3_sendend++;
0000019C                     1562  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 637
0000019C A00000              1563  	inc !LOWW(_g_uart3_sendend)
0000019F                     1564  	;***      638 : 	O_RS485_MODE_PIN = 0U;
0000019F                     1565  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 638
0000019F 710300              1566  	clr1 0xFFF00.0
000001A2 D7                  1567  	ret
000001A3                     1568  _r_uart3_callback_error@1:
000001A3                     1569  	.STACK _r_uart3_callback_error@1 = 4
000001A3                     1570  	;***      639 :     /* End user code. Do not edit comment generated here */
000001A3                     1571  	;***      640 : }
000001A3                     1572  	;***      641 : 
000001A3                     1573  	;***      642 : /***********************************************************************************************************************
000001A3                     1574  	;***      643 : * Function Name: r_uart3_callback_error
000001A3                     1575  	;***      644 : * Description  : This function is a callback function when UART3 reception error occurs.
000001A3                     1576  	;***      645 : * Arguments    : err_type -
000001A3                     1577  	;***      646 : *                    error type value
000001A3                     1578  	;***      647 : * Return Value : None
000001A3                     1579  	;***      648 : ***********************************************************************************************************************/
000001A3                     1580  	;***      649 : static void r_uart3_callback_error(uint8_t err_type)
000001A3                     1581  	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/r_cg_serial_user.c", 649
000001A3 D7                  1582  	ret
000001A4                     1583  	;***      650 : {
000001A4                     1584  	;***      651 :     /* Start user code. Do not edit comment generated here */
000001A4                     1585  	;***      652 :     /* End user code. Do not edit comment generated here */
000001A4                     1586  	;***      653 : }
000001A4                     1587  	;***      654 : 
000001A4                     1588  	;***      655 : /* Start user code for adding. Do not edit comment generated here */
000001A4                     1589  	;***      656 : /* End user code. Do not edit comment generated here */
00000000                     1590  	.SECTION .bss,BSS
00000000                     1591  _g_uart3_rx_data:
00000000                     1592  	.DS (8)
00000008                     1593  _send_response_flag:
00000008                     1594  	.DS (1)
00000009                     1595  _send_response_time_flag:
00000009                     1596  	.DS (1)
0000000A                     1597  _send_response_number_flag:
0000000A                     1598  	.DS (1)
0000000B                     1599  _recived_time_setting_flag:
0000000B                     1600  	.DS (1)
0000000C                     1601  _send_respone_status_flag:
0000000C                     1602  	.DS (1)
0000000D                     1603  _recived_number_setting_flag:
0000000D                     1604  	.DS (1)
0000000E                     1605  _commnunication_flag:
0000000E                     1606  	.DS (13)
0000001B                     1607  _g_csi_count:
0000001B                     1608  	.DS (1)
0000001C                     1609  _g_csi_err:
0000001C                     1610  	.DS (1)
0000001D                     1611  _g_csi_send_end:
0000001D                     1612  	.DS (1)
0000001E                     1613  _g_csi_rev_end:
0000001E                     1614  	.DS (1)
0000001F                     1615  _g_uart1_send:
0000001F                     1616  	.DS (1)
00000020                     1617  _g_uart2_sendend:
00000020                     1618  	.DS (1)
00000021                     1619  _g_uart2_receive:
00000021                     1620  	.DS (1)
00000022                     1621  _g_rx_data:
00000022                     1622  	.DS (160)
000000C2                     1623  _g_uart2_fault:
000000C2                     1624  	.DS (1)
000000C3                     1625  _g_uart3_sendend:
000000C3                     1626  	.DS (1)

Section List
Attr     Size                Name

TEXT                638 (0000027E) .text
TEXTF               420 (000001A4) .textf
BSS                 196 (000000C4) .bss

Command Line Parameter
Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\bin\asrl.exe" @C:\Users\CODEP~1\AppData\Local\Temp\$ccrl\r_cg_serial_user.asm.cmd 

Command File Parameter
-cpu=S3 -dev=D:\Chieniwa\E2_Studio\.eclipse\com.renesas.platform_1435879475\DebugComp\RL78\RL78\Common\DR5F104ML.DVF -define=__RENESAS_VERSION__=0x01100000 -include="C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc" -include=D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate -character_set=utf8 -prn_path=src -output=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.obj D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src\r_cg_serial_user.asm 

