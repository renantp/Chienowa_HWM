#CC-RL Compiler RL78 Assembler Source
#@  CC-RL Version : V1.10.00 [20 Nov 2020]
#@  Commmand :
#@   -cpu=S3
#@   -c
#@   -dev=D:/Chieniwa/E2_Studio/.eclipse/com.renesas.platform_1435879475/DebugComp/RL78/RL78/Common/DR5F104ML.DVF
#@   -MAKEUD=D:\Chieniwa\E2_Studio\ControlPCB_HWM\HardwareDebug\src
#@   -I C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.10.00\inc
#@   -I D:\Chieniwa\E2_Studio\ControlPCB_HWM\generate
#@   -character_set=utf8
#@   -lang=c99
#@   -g
#@   -asmopt=-prn_path=src
#@   -asm_path=src/
#@   -pass_source
#@   -o src/crc32.obj
#@   ../src/crc32.c
#@  compiled at Fri Feb 25 09:28:32 2022

	.PUBLIC _crc32_table
	.PUBLIC _xcrc32
	.PUBLIC _CRC32

	.SECTION .textf,TEXTF
_xcrc32:
	.STACK _xcrc32 = 12
	;***        1 : /* crc32.c
	;***        2 :    Copyright (C) 2009-2021 Free Software Foundation, Inc.
	;***        3 : 
	;***        4 :    This file is part of the libiberty library.
	;***        5 : 
	;***        6 :    This file is free software; you can redistribute it and/or modify
	;***        7 :    it under the terms of the GNU General Public License as published by
	;***        8 :    the Free Software Foundation; either version 2 of the License, or
	;***        9 :    (at your option) any later version.
	;***       10 : 
	;***       11 :    In addition to the permissions in the GNU General Public License, the
	;***       12 :    Free Software Foundation gives you unlimited permission to link the
	;***       13 :    compiled version of this file into combinations with other programs,
	;***       14 :    and to distribute those combinations without any restriction coming
	;***       15 :    from the use of this file.  (The General Public License restrictions
	;***       16 :    do apply in other respects; for example, they cover modification of
	;***       17 :    the file, and distribution when not linked into a combined
	;***       18 :    executable.)
	;***       19 : 
	;***       20 :    This program is distributed in the hope that it will be useful,
	;***       21 :    but WITHOUT ANY WARRANTY; without even the implied warranty of
	;***       22 :    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	;***       23 :    GNU General Public License for more details.
	;***       24 : 
	;***       25 :    You should have received a copy of the GNU General Public License
	;***       26 :    along with this program; if not, write to the Free Software
	;***       27 :    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
	;***       28 : */
	;***       29 : 
	;***       30 : #ifdef HAVE_CONFIG_H
	;***       31 : #include "config.h"
	;***       32 : #endif
	;***       33 : #include "r_cg_macrodriver.h"
	;***       34 : 
	;***       35 : /* This table was generated by the following program.
	;***       36 : 
	;***       37 :    #include <stdio.h>
	;***       38 : 
	;***       39 :    int
	;***       40 :    main ()
	;***       41 :    {
	;***       42 :      unsigned int i, j;
	;***       43 :      unsigned int c;
	;***       44 :      int table[256];
	;***       45 : 
	;***       46 :      for (i = 0; i < 256; i++)
	;***       47 :        {
	;***       48 : 	 for (c = i << 24, j = 8; j > 0; --j)
	;***       49 : 	   c = c & 0x80000000 ? (c << 1) ^ 0x04c11db7 : (c << 1);
	;***       50 : 	 table[i] = c;
	;***       51 :        }
	;***       52 : 
	;***       53 :      printf ("static const unsigned int crc32_table[] =\n{\n");
	;***       54 :      for (i = 0; i < 256; i += 4)
	;***       55 :        {
	;***       56 : 	 printf ("  0x%08x, 0x%08x, 0x%08x, 0x%08x",
	;***       57 : 		 table[i + 0], table[i + 1], table[i + 2], table[i + 3]);
	;***       58 : 	 if (i + 4 < 256)
	;***       59 : 	   putchar (',');
	;***       60 : 	 putchar ('\n');
	;***       61 :        }
	;***       62 :      printf ("};\n");
	;***       63 :      return 0;
	;***       64 :    }
	;***       65 : 
	;***       66 :    For more information on CRC, see, e.g.,
	;***       67 :    http://www.ross.net/crc/download/crc_v3.txt.  */
	;***       68 : 
	;***       69 : const uint32_t crc32_table[] =
	;***       70 : {
	;***       71 :   0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,
	;***       72 :   0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,
	;***       73 :   0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,
	;***       74 :   0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
	;***       75 :   0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,
	;***       76 :   0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
	;***       77 :   0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,
	;***       78 :   0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,
	;***       79 :   0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,
	;***       80 :   0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
	;***       81 :   0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,
	;***       82 :   0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
	;***       83 :   0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,
	;***       84 :   0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
	;***       85 :   0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,
	;***       86 :   0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,
	;***       87 :   0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,
	;***       88 :   0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
	;***       89 :   0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,
	;***       90 :   0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
	;***       91 :   0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,
	;***       92 :   0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,
	;***       93 :   0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,
	;***       94 :   0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
	;***       95 :   0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,
	;***       96 :   0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,
	;***       97 :   0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,
	;***       98 :   0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,
	;***       99 :   0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,
	;***      100 :   0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
	;***      101 :   0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,
	;***      102 :   0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,
	;***      103 :   0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,
	;***      104 :   0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
	;***      105 :   0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,
	;***      106 :   0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
	;***      107 :   0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,
	;***      108 :   0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,
	;***      109 :   0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,
	;***      110 :   0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
	;***      111 :   0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,
	;***      112 :   0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
	;***      113 :   0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,
	;***      114 :   0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
	;***      115 :   0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,
	;***      116 :   0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,
	;***      117 :   0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,
	;***      118 :   0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
	;***      119 :   0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,
	;***      120 :   0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
	;***      121 :   0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,
	;***      122 :   0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,
	;***      123 :   0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,
	;***      124 :   0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
	;***      125 :   0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,
	;***      126 :   0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,
	;***      127 :   0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,
	;***      128 :   0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,
	;***      129 :   0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,
	;***      130 :   0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
	;***      131 :   0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,
	;***      132 :   0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
	;***      133 :   0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
	;***      134 :   0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
	;***      135 : };
	;***      136 : 
	;***      137 : /*
	;***      138 : 
	;***      139 : @deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @
	;***      140 :   int @var{len}, unsigned int @var{init})
	;***      141 : 
	;***      142 : Compute the 32-bit CRC of @var{buf} which has length @var{len}.  The
	;***      143 : starting value is @var{init}; this may be used to compute the CRC of
	;***      144 : data split across multiple buffers by passing the return value of each
	;***      145 : call as the @var{init} parameter of the next.
	;***      146 : 
	;***      147 : This is used by the @command{gdb} remote protocol for the @samp{qCRC}
	;***      148 : command.  In order to get the same results as gdb for a block of data,
	;***      149 : you must pass the first CRC parameter as @code{0xffffffff}.
	;***      150 : 
	;***      151 : This CRC can be specified as:
	;***      152 : 
	;***      153 :   Width  : 32
	;***      154 :   Poly   : 0x04c11db7
	;***      155 :   Init   : parameter, typically 0xffffffff
	;***      156 :   RefIn  : false
	;***      157 :   RefOut : false
	;***      158 :   XorOut : 0
	;***      159 : 
	;***      160 : This differs from the "standard" CRC-32 algorithm in that the values
	;***      161 : are not reflected, and there is no final XOR value.  These differences
	;***      162 : make it easy to compose the values of multiple blocks.
	;***      163 : 
	;***      164 : @end deftypefn
	;***      165 : 
	;***      166 : */
	;***      167 : 
	;***      168 : uint32_t xcrc32(const unsigned char *buf, int len, uint32_t init)
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 168
	push ax
	subw sp, #0x06
	movw hl, ax
	movw ax, [sp+0x0E]
	movw [sp+0x00], ax
	movw ax, [sp+0x0C]
	movw [sp+0x02], ax
	;***      169 : {
	;***      170 : 	uint32_t crc = init;
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 170
	incw bc
	movw ax, bc
	movw [sp+0x04], ax
.BB@LABEL@1_1:	; bb19
	movw ax, [sp+0x04]
	;***      171 : 	while (len--)
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 171
	addw ax, #0xFFFF
	movw [sp+0x04], ax
	movw ax, [sp+0x00]
	bz $.BB@LABEL@1_3
.BB@LABEL@1_2:	; bb
	;***      172 : 	{
	;***      173 : 		crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 173
	xor a, [hl]
	mov x, #0x04
	mulu x
	addw ax, #SMRLW(_crc32_table)
	movw hl, ax
	movw ax, [sp+0x02]
	movw bc, ax
	shrw ax, 0x08
	movw de, ax
	movw ax, [sp+0x00]
	shlw ax, 0x08
	addw ax, de
	xor a, [hl+0x03]
	xch a, x
	xor a, [hl+0x02]
	xch a, x
	movw [sp+0x00], ax
	shlw bc, 0x08
	movw ax, bc
	xor a, [hl+0x01]
	xch a, x
	xor a, [hl]
	xch a, x
	movw [sp+0x02], ax
	movw ax, [sp+0x06]
	;***      174 : 		buf++;
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 174
	incw ax
	movw hl, ax
	movw [sp+0x06], ax
	br $.BB@LABEL@1_1
.BB@LABEL@1_3:	; bb25
	movw bc, ax
	movw ax, [sp+0x02]
	;***      175 : 	}
	;***      176 : 	return crc;
	;***      177 : }
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 177
	addw sp, #0x08
	ret
_CRC32:
	.STACK _CRC32 = 10
	;***      178 : uint32_t CRC32(const uint8_t data[], uint8_t data_length) {
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 178
	subw sp, #0x06
	movw de, ax
	movw hl, #0xFFFF
	movw ax, hl
	movw [sp+0x02], ax
	clrb b
	movw ax, hl
.BB@LABEL@2_1:	; entry
	movw [sp+0x00], ax
	mov a, b
	;***      179 : 	uint32_t crc32 = 0xFFFFFFFFu;
	;***      180 : 
	;***      181 : 	for (uint8_t i = 0; i < data_length; i++) {
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 181
	cmp a, c
	bz $.BB@LABEL@2_3
.BB@LABEL@2_2:	; bb
	;***      182 : 		const uint32_t lookupIndex = (crc32 ^ data[i]) & 0xff;
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 182
	shrw ax, 8+0x00000
	addw ax, de
	movw hl, ax
	mov a, [sp+0x02]
	xor a, [hl]
	;***      183 : 		crc32 = (crc32 >> 8) ^ crc32_table[lookupIndex];  // CRCTable is an array of 256 32-bit constants
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 183
	mov x, #0x04
	mulu x
	addw ax, #SMRLW(_crc32_table)
	movw [sp+0x04], ax
	movw ax, [sp+0x00]
	shlw ax, 0x08
	movw hl, ax
	movw ax, [sp+0x02]
	shrw ax, 0x08
	addw ax, hl
	movw hl, ax
	movw ax, [sp+0x04]
	xchw ax, hl
	inc b
	xor a, [hl+0x01]
	xch a, x
	xor a, [hl]
	xch a, x
	movw [sp+0x02], ax
	movw ax, [sp+0x00]
	shrw ax, 0x08
	xor a, [hl+0x03]
	xch a, x
	xor a, [hl+0x02]
	xch a, x
	br $.BB@LABEL@2_1
.BB@LABEL@2_3:	; bb29
	pop bc
	push bc
	clrw ax
	decw ax
	movw de, ax
	;***      184 : 	}
	;***      185 : 
	;***      186 : 	// Finalize the CRC-32 value by inverting all the bits
	;***      187 : 	crc32 ^= 0xFFFFFFFFu;
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 187
	subw ax, bc
	;***      188 : 	return crc32;
	;***      189 : }
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 189
	movw bc, ax
	movw ax, [sp+0x02]
	xchw ax, de
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 187
	subw ax, de
	.LINE "D:/Chieniwa/E2_Studio/ControlPCB_HWM/src/crc32.c", 189
	addw sp, #0x06
	ret
	.SECTION .const,CONST
	.ALIGN 2
_crc32_table:
	.DS (4)
	.DB4 0x04C11DB7,0x09823B6E,0x0D4326D9,0x130476DC,0x17C56B6B,0x1A864DB2,0x1E475005,0x2608EDB8
	.DB4 0x22C9F00F,0x2F8AD6D6,0x2B4BCB61,0x350C9B64,0x31CD86D3,0x3C8EA00A,0x384FBDBD,0x4C11DB70
	.DB4 0x48D0C6C7,0x4593E01E,0x4152FDA9,0x5F15ADAC,0x5BD4B01B,0x569796C2,0x52568B75,0x6A1936C8
	.DB4 0x6ED82B7F,0x639B0DA6,0x675A1011,0x791D4014,0x7DDC5DA3,0x709F7B7A,0x745E66CD,0x9823B6E0
	.DB4 0x9CE2AB57,0x91A18D8E,0x95609039,0x8B27C03C,0x8FE6DD8B,0x82A5FB52,0x8664E6E5,0xBE2B5B58
	.DB4 0xBAEA46EF,0xB7A96036,0xB3687D81,0xAD2F2D84,0xA9EE3033,0xA4AD16EA,0xA06C0B5D,0xD4326D90
	.DB4 0xD0F37027,0xDDB056FE,0xD9714B49,0xC7361B4C,0xC3F706FB,0xCEB42022,0xCA753D95,0xF23A8028
	.DB4 0xF6FB9D9F,0xFBB8BB46,0xFF79A6F1,0xE13EF6F4,0xE5FFEB43,0xE8BCCD9A,0xEC7DD02D,0x34867077
	.DB4 0x30476DC0,0x3D044B19,0x39C556AE,0x278206AB,0x23431B1C,0x2E003DC5,0x2AC12072,0x128E9DCF
	.DB4 0x164F8078,0x1B0CA6A1,0x1FCDBB16,0x018AEB13,0x054BF6A4,0x0808D07D,0x0CC9CDCA,0x7897AB07
	.DB4 0x7C56B6B0,0x71159069,0x75D48DDE,0x6B93DDDB,0x6F52C06C,0x6211E6B5,0x66D0FB02,0x5E9F46BF
	.DB4 0x5A5E5B08,0x571D7DD1,0x53DC6066,0x4D9B3063,0x495A2DD4,0x44190B0D,0x40D816BA,0xACA5C697
	.DB4 0xA864DB20,0xA527FDF9,0xA1E6E04E,0xBFA1B04B,0xBB60ADFC,0xB6238B25,0xB2E29692,0x8AAD2B2F
	.DB4 0x8E6C3698,0x832F1041,0x87EE0DF6,0x99A95DF3,0x9D684044,0x902B669D,0x94EA7B2A,0xE0B41DE7
	.DB4 0xE4750050,0xE9362689,0xEDF73B3E,0xF3B06B3B,0xF771768C,0xFA325055,0xFEF34DE2,0xC6BCF05F
	.DB4 0xC27DEDE8,0xCF3ECB31,0xCBFFD686,0xD5B88683,0xD1799B34,0xDC3ABDED,0xD8FBA05A,0x690CE0EE
	.DB4 0x6DCDFD59,0x608EDB80,0x644FC637,0x7A089632,0x7EC98B85,0x738AAD5C,0x774BB0EB,0x4F040D56
	.DB4 0x4BC510E1,0x46863638,0x42472B8F,0x5C007B8A,0x58C1663D,0x558240E4,0x51435D53,0x251D3B9E
	.DB4 0x21DC2629,0x2C9F00F0,0x285E1D47,0x36194D42,0x32D850F5,0x3F9B762C,0x3B5A6B9B,0x0315D626
	.DB4 0x07D4CB91,0x0A97ED48,0x0E56F0FF,0x1011A0FA,0x14D0BD4D,0x19939B94,0x1D528623,0xF12F560E
	.DB4 0xF5EE4BB9,0xF8AD6D60,0xFC6C70D7,0xE22B20D2,0xE6EA3D65,0xEBA91BBC,0xEF68060B,0xD727BBB6
	.DB4 0xD3E6A601,0xDEA580D8,0xDA649D6F,0xC423CD6A,0xC0E2D0DD,0xCDA1F604,0xC960EBB3,0xBD3E8D7E
	.DB4 0xB9FF90C9,0xB4BCB610,0xB07DABA7,0xAE3AFBA2,0xAAFBE615,0xA7B8C0CC,0xA379DD7B,0x9B3660C6
	.DB4 0x9FF77D71,0x92B45BA8,0x9675461F,0x8832161A,0x8CF30BAD,0x81B02D74,0x857130C3,0x5D8A9099
	.DB4 0x594B8D2E,0x5408ABF7,0x50C9B640,0x4E8EE645,0x4A4FFBF2,0x470CDD2B,0x43CDC09C,0x7B827D21
	.DB4 0x7F436096,0x7200464F,0x76C15BF8,0x68860BFD,0x6C47164A,0x61043093,0x65C52D24,0x119B4BE9
	.DB4 0x155A565E,0x18197087,0x1CD86D30,0x029F3D35,0x065E2082,0x0B1D065B,0x0FDC1BEC,0x3793A651
	.DB4 0x3352BBE6,0x3E119D3F,0x3AD08088,0x2497D08D,0x2056CD3A,0x2D15EBE3,0x29D4F654,0xC5A92679
	.DB4 0xC1683BCE,0xCC2B1D17,0xC8EA00A0,0xD6AD50A5,0xD26C4D12,0xDF2F6BCB,0xDBEE767C,0xE3A1CBC1
	.DB4 0xE760D676,0xEA23F0AF,0xEEE2ED18,0xF0A5BD1D,0xF464A0AA,0xF9278673,0xFDE69BC4,0x89B8FD09
	.DB4 0x8D79E0BE,0x803AC667,0x84FBDBD0,0x9ABC8BD5,0x9E7D9662,0x933EB0BB,0x97FFAD0C,0xAFB010B1
	.DB4 0xAB710D06,0xA6322BDF,0xA2F33668,0xBCB4666D,0xB8757BDA,0xB5365D03,0xB1F740B4
